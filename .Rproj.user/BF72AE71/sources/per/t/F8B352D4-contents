
# comparing different models applied to simulated data (in situ, drone and satellite):

library(NSD)
library(lubridate)
library(sp)
library(fda)
library(zoo)

Rcpp::sourceCpp('src/NSD_cpp_code.cpp')
source('C:/Users/craig/OneDrive - University of Glasgow/Papers_drafts_submitted/nonparametric_statistical_downscaling/R_package_test/NSD_with_3_sources/NSD/R/run_NSDmodel.R')

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/simdata_tur_seasonal/simDataTur10insitu.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/simdata_tur_seasonal/simDataTur8000satellite.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/simdata_tur_seasonal/simDataTur35000drone1.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/simdata_tur_seasonal/months_tur.RData")

# Don't need 9 monthly in situ data points, since none fall within the drone data region:
# load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/simdata_tur_seasonal/simDataTur9insitu.RData")

months.tur<-as.yearmon(months.tur)
months.tur.date<-as.Date(months.tur)+14

drone.x1<-seq(17.48723, 17.49392, length.out = 500)
drone.y1<-seq(46.73757, 46.73814, length.out = 70)
coords.drone.grid1<-expand.grid(drone.x1,drone.y1)

locs.insitu.drone1<-cbind.data.frame(lon=c(17.48760, 17.48769, 17.48885, 17.48923, 17.49015, 17.49065, 17.49139, 17.49201, 17.49309, 17.49366),
                                     lat=c(46.73764, 46.73805, 46.73770, 46.73810, 46.73781, 46.73808, 46.73771, 46.73806, 46.73762, 46.73798))

xcoords<-seq(from=17.480,to=17.612,length.out = 1000)
ycoords<-seq(from=46.7375,to=46.73822,length.out = 8)
coords.grid1<-cbind.data.frame(x=rep(xcoords,each=8),y=rep(ycoords,1000))

#

simData_sat_tur_all<-cbind.data.frame(rfsim1.sp.tur.list[[1]]@coords,matrix(nrow=nrow(rfsim1.sp.tur.list[[1]]@coords),ncol=length(rfsim1.sp.tur.list)))
for(i in 1:length(rfsim1.sp.tur.list)){
  tryCatch({simData_sat_tur_all[,i+2]<-rfsim1.sp.tur.list[[i]]@data},error=function(e){e})
}
colnames(simData_sat_tur_all)<-c("lon","lat",round(decimal_date(months.tur.date),3))

simData_drone_tur_all<-cbind.data.frame(rfsim1.sp.tur.list.drone1[[1]]@coords,matrix(nrow=nrow(rfsim1.sp.tur.list.drone1[[1]]@coords),ncol=length(rfsim1.sp.tur.list.drone1)))
for(i in 1:length(rfsim1.sp.tur.list.drone1)){
  tryCatch({simData_drone_tur_all[,i+2]<-rfsim1.sp.tur.list.drone1[[i]]@data},error=function(e){e})
}
colnames(simData_drone_tur_all)<-c("lon","lat",round(decimal_date(months.tur.date),3))

IS.avail.tur.new2<-matrix.to.list(t(simData.10))
times.avail.tur.dec.new2<-times.to.list(t(simData.10),decimal_date(months.tur.date))

which.closest.drone.newIS<-numeric(10)
which.closest.sat.newIS<-numeric(10)
for(i in 1:10){
  which.closest.drone.newIS[i]<-which.min(spDistsN1(as.matrix(coords.drone.grid1),as.matrix(locs.insitu.drone1[i,]),longlat = TRUE))
  which.closest.sat.newIS[i]<-which.min(spDistsN1(as.matrix(coords.grid1),as.matrix(locs.insitu.drone1[i,]),longlat = TRUE))
}

months.RS.tur.dec<-decimal_date(months.tur.date)[-which(apply(is.na(simData_sat_tur_all),2,any)[3:ncol(simData_sat_tur_all)])]

# 10 locations:

locs.insitu.10locs<-locs.insitu.drone1[1:10,]
IS.avail.10locs<-IS.avail.tur.new2[1:10]
which.closest.sat.10locs<-which.closest.sat.newIS[1:10]
which.closest.drone.10locs<-which.closest.drone.newIS[1:10]
times.avail.10locs<-times.avail.tur.dec.new2[1:10]

## bases:

# basis.seq<-c(5,10,15,20,25,30,35,40,45,50)
basis.seq<-5:50
basis.list.bspline<-vector("list",length(basis.seq))
for(i in 1:length(basis.list.bspline)){
  basis.list.bspline[[i]]<-create.bspline.basis(rangeval = c(min(decimal_date(months.tur.date)),
                                                             max(decimal_date(months.tur.date))),
                                                nbasis = basis.seq[i])
}

## phis:

phi.seq<-c(0.1,1,10,100,1000)

#

rmse<-function(obs,pred){
  return(sqrt(mean((obs-pred)^2)))
}


# 1. Full NSD:

# 1.(a) Choose basis dim:

eb.IS.bspline<-vector("list",length(basis.seq))
eb.RS.bspline<-vector("list",length(basis.seq))
for(i in 1:length(basis.seq)){
  eb.IS.bspline[[i]]<-vector("list",10)
  for(k in 1:10){
    eb.IS.bspline[[i]][[k]]<-eval.basis(times.avail.10locs[[k]],basis.list.bspline[[i]])
  }
  eb.RS.bspline[[i]]<-eval.basis(months.RS.tur.dec,basis.list.bspline[[i]])
}

# pred.mat.mod.fullNSD.10locs<-vector("list",length(basis.seq))
# lwrbnd.mat.mod.fullNSD.10locs<-vector("list",length(basis.seq))
# uprbnd.mat.mod.fullNSD.10locs<-vector("list",length(basis.seq))
# for(i in 1:length(basis.seq)){
#   mod.fullNSD.1<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-1],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
#                                    By=eb.IS.bspline[[i]][-1],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[1]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.1<-summary(mod.fullNSD.1)
#   mod.fullNSD.2<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-2],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
#                                    By=eb.IS.bspline[[i]][-2],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[2]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.2<-summary(mod.fullNSD.2)
#   mod.fullNSD.3<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-3],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
#                                    By=eb.IS.bspline[[i]][-3],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[3]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.3<-summary(mod.fullNSD.3)
#   mod.fullNSD.4<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-4],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
#                                    By=eb.IS.bspline[[i]][-4],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[4]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.4<-summary(mod.fullNSD.4)
#   mod.fullNSD.5<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-5],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
#                                    By=eb.IS.bspline[[i]][-5],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[5]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.5<-summary(mod.fullNSD.5)
#   mod.fullNSD.6<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-6],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
#                                    By=eb.IS.bspline[[i]][-6],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[6]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.6<-summary(mod.fullNSD.6)
#   mod.fullNSD.7<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-7],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
#                                    By=eb.IS.bspline[[i]][-7],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[7]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.7<-summary(mod.fullNSD.7)
#   mod.fullNSD.8<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-8],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
#                                    By=eb.IS.bspline[[i]][-8],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[8]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.8<-summary(mod.fullNSD.8)
#   mod.fullNSD.9<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=IS.avail.10locs[-9],
#                                    xData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                    zPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
#                                    By=eb.IS.bspline[[i]][-9],
#                                    Bx=eb.RS.bspline[[i]],
#                                    Bz=eb.RS.bspline[[i]],
#                                    ByPred=eb.IS.bspline[[i]][[9]],
#                                    phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aGamma=2,bGamma=2,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    aZ=2,bZ=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    sigmaXPrecInit=1.5,
#                                    sigmaZPrecInit=1.55,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                    eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.9<-summary(mod.fullNSD.9)
#   mod.fullNSD.10<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                     yData=IS.avail.10locs[-10],
#                                     xData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                     zData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                     xPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                     zPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                     coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                                     coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
#                                     By=eb.IS.bspline[[i]][-10],
#                                     Bx=eb.RS.bspline[[i]],
#                                     Bz=eb.RS.bspline[[i]],
#                                     ByPred=eb.IS.bspline[[i]][[10]],
#                                     phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                     aAlpha=2, bAlpha=1,
#                                     aBeta=2, bBeta=1,
#                                     aGamma=2,bGamma=2,
#                                     aY=2, bY=1,
#                                     aC=2, bC=1,
#                                     aX=2, bX=1,
#                                     aZ=2,bZ=1,
#                                     muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                     muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                     sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                     sigmaCPrecInit=1.4,
#                                     alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                     betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                     gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                     cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                     sigmaXPrecInit=1.5,
#                                     sigmaZPrecInit=1.55,
#                                     dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                     eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
#   summary.mod.fullNSD.10<-summary(mod.fullNSD.10)
#   
#   pred.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   pred.mat.mod.fullNSD.10locs[[i]]<-cbind.data.frame(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
#                                                      pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10)
#   lwrbnd.mat.mod.fullNSD.10locs[[i]]<-cbind.data.frame(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
#                                                        lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10)
#   uprbnd.mat.mod.fullNSD.10locs[[i]]<-cbind.data.frame(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
#                                                        uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10)
#   print(i)
# }
# 
# save(pred.mat.mod.fullNSD.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_fullNSD_10locs.RData")
# save(lwrbnd.mat.mod.fullNSD.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_fullNSD_10locs.RData")
# save(uprbnd.mat.mod.fullNSD.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_fullNSD_10locs.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_fullNSD_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_fullNSD_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_fullNSD_10locs.RData")

rmse.basis.seq.fullNSD.10locs<-numeric(length(basis.seq))
for(i in 1:length(basis.seq)){
  rmse.basis.seq.fullNSD.10locs[i]<-rmse(unlist(pred.mat.mod.fullNSD.10locs[[i]]),unlist(IS.avail.10locs))
}

# 1.(b) Phi values:

eb.IS.bspline.fullNSD.10locs.phi<-vector("list",10)
for(k in 1:10){
  eb.IS.bspline.fullNSD.10locs.phi[[k]]<-eval.basis(times.avail.10locs[[k]],basis.list.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]])
}
eb.RS.bspline.fullNSD.10locs.phi<-eval.basis(months.RS.tur.dec,basis.list.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]])

# pred.mat.mod.fullNSD.10locs.phi<-vector("list",length(phi.seq))
# lwrbnd.mat.mod.fullNSD.10locs.phi<-vector("list",length(phi.seq))
# uprbnd.mat.mod.fullNSD.10locs.phi<-vector("list",length(phi.seq))
# for(i in 1:length(phi.seq)){
#   pred.mat.mod.fullNSD.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   lwrbnd.mat.mod.fullNSD.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   uprbnd.mat.mod.fullNSD.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   for(j in 1:length(phi.seq)){
#     pred.mat.mod.fullNSD.10locs.phi[[i]][[j]]<-vector("list",length(phi.seq))
#     lwrbnd.mat.mod.fullNSD.10locs.phi[[i]][[j]]<-vector("list",length(phi.seq))
#     uprbnd.mat.mod.fullNSD.10locs.phi[[i]][[j]]<-vector("list",length(phi.seq))
#     for(k in 1:length(phi.seq)){
#       mod.fullNSD.1<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-1],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-1],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[1]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.1<-summary(mod.fullNSD.1)
#       mod.fullNSD.2<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-2],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-2],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[2]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.2<-summary(mod.fullNSD.2)
#       mod.fullNSD.3<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-3],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-3],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[3]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.3<-summary(mod.fullNSD.3)
#       mod.fullNSD.4<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-4],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-4],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[4]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.4<-summary(mod.fullNSD.4)
#       mod.fullNSD.5<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-5],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-5],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[5]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.5<-summary(mod.fullNSD.5)
#       mod.fullNSD.6<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-6],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-6],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[6]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.6<-summary(mod.fullNSD.6)
#       mod.fullNSD.7<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-7],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-7],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[7]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.7<-summary(mod.fullNSD.7)
#       mod.fullNSD.8<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-8],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-8],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[8]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.8<-summary(mod.fullNSD.8)
#       mod.fullNSD.9<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                        yData=IS.avail.10locs[-9],
#                                        xData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        xPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                        zPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                        coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                                        coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
#                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-9],
#                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[9]],
#                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                        aAlpha=2, bAlpha=1,
#                                        aBeta=2, bBeta=1,
#                                        aGamma=2,bGamma=2,
#                                        aY=2, bY=1,
#                                        aC=2, bC=1,
#                                        aX=2, bX=1,
#                                        aZ=2,bZ=1,
#                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                        sigmaCPrecInit=1.4,
#                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        sigmaXPrecInit=1.5,
#                                        sigmaZPrecInit=1.55,
#                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                        eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.9<-summary(mod.fullNSD.9)
#       mod.fullNSD.10<-run.NSDmodelMulti(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                         yData=IS.avail.10locs[-10],
#                                         xData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                         zData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                         xPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                         zPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                         coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                                         coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
#                                         By=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][-10],
#                                         Bx=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                         Bz=eb.RS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]],
#                                         ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.fullNSD.10locs)]][[10]],
#                                         phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k],
#                                         aAlpha=2, bAlpha=1,
#                                         aBeta=2, bBeta=1,
#                                         aGamma=2,bGamma=2,
#                                         aY=2, bY=1,
#                                         aC=2, bC=1,
#                                         aX=2, bX=1,
#                                         aZ=2,bZ=1,
#                                         muD=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                         muE=rep(0, basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)]),
#                                         sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                         sigmaCPrecInit=1.4,
#                                         alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                         betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                         gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                         cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                         sigmaXPrecInit=1.5,
#                                         sigmaZPrecInit=1.55,
#                                         dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1),
#                                         eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.fullNSD.10locs)], ncol = length(IS.avail.10locs)-1))
#       summary.mod.fullNSD.10<-summary(mod.fullNSD.10)
#       
#       pred.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       lwrbnd.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       uprbnd.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#       pred.mat.mod.fullNSD.10locs.phi[[i]][[j]][[k]]<-cbind.data.frame(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
#                                                          pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10)
#       lwrbnd.mat.mod.fullNSD.10locs.phi[[i]][[j]][[k]]<-cbind.data.frame(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
#                                                            lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10)
#       uprbnd.mat.mod.fullNSD.10locs.phi[[i]][[j]][[k]]<-cbind.data.frame(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
#                                                            uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10)
#       print(c(i,j,k))
#     }
#   }
# }
# 
# save(pred.mat.mod.fullNSD.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_fullNSD_10locs_phi.RData")
# save(lwrbnd.mat.mod.fullNSD.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_fullNSD_10locs_phi.RData")
# save(uprbnd.mat.mod.fullNSD.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_fullNSD_10locs_phi.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_fullNSD_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_fullNSD_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_fullNSD_10locs_phi.RData")

rmse.basis.seq.fullNSD.10locs.phi<-array(dim=rep(length(phi.seq),3))
for(i in 1:length(phi.seq)){
  for(j in 1:length(phi.seq)){
    for(k in 1:length(phi.seq)){
      rmse.basis.seq.fullNSD.10locs.phi[i,j,k]<-rmse(unlist(pred.mat.mod.fullNSD.10locs.phi[[i]][[j]][[k]]),unlist(IS.avail.10locs))
    }
  }
}


# mod.fullNSD.1<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-1],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
#                               By=eb.IS.bspline14[-1],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[1]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.1<-summary(mod.fullNSD.1)
# mod.fullNSD.2<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-2],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
#                               By=eb.IS.bspline14[-2],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[2]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.2<-summary(mod.fullNSD.2)
# mod.fullNSD.3<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-3],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
#                               By=eb.IS.bspline14[-3],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[3]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.3<-summary(mod.fullNSD.3)
# mod.fullNSD.4<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-4],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
#                               By=eb.IS.bspline14[-4],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[4]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.4<-summary(mod.fullNSD.4)
# mod.fullNSD.5<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-5],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
#                               By=eb.IS.bspline14[-5],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[5]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.5<-summary(mod.fullNSD.5)
# mod.fullNSD.6<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-6],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
#                               By=eb.IS.bspline14[-6],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[6]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.6<-summary(mod.fullNSD.6)
# mod.fullNSD.7<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-7],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
#                               By=eb.IS.bspline14[-7],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[7]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.7<-summary(mod.fullNSD.7)
# mod.fullNSD.8<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-8],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
#                               By=eb.IS.bspline14[-8],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[8]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.8<-summary(mod.fullNSD.8)
# mod.fullNSD.9<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-9],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               zPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
#                               By=eb.IS.bspline14[-9],
#                               Bx=eb.RS.bspline14,
#                               Bz=eb.RS.bspline14,
#                               ByPred=eb.IS.bspline14[[9]],
#                               phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               aZ=2,bZ=1,
#                               muD=rep(0, 14),SigmaD=100*diag(14),
#                               muE=rep(0, 14),SigmaE=100*diag(14),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                               eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.9<-summary(mod.fullNSD.9)
# mod.fullNSD.10<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-10],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                zData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                zPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
#                                By=eb.IS.bspline14[-10],
#                                Bx=eb.RS.bspline14,
#                                Bz=eb.RS.bspline14,
#                                ByPred=eb.IS.bspline14[[10]],
#                                phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                aZ=2,bZ=1,
#                                muD=rep(0, 14),SigmaD=100*diag(14),
#                                muE=rep(0, 14),SigmaE=100*diag(14),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.fullNSD.10<-summary(mod.fullNSD.10)
# 
# pred.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.1<-matrix(summary.mod.fullNSD.1$quantiles[nrow(summary.mod.fullNSD.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.2<-matrix(summary.mod.fullNSD.2$quantiles[nrow(summary.mod.fullNSD.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.3<-matrix(summary.mod.fullNSD.3$quantiles[nrow(summary.mod.fullNSD.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.4<-matrix(summary.mod.fullNSD.4$quantiles[nrow(summary.mod.fullNSD.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.5<-matrix(summary.mod.fullNSD.5$quantiles[nrow(summary.mod.fullNSD.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.6<-matrix(summary.mod.fullNSD.6$quantiles[nrow(summary.mod.fullNSD.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.7<-matrix(summary.mod.fullNSD.7$quantiles[nrow(summary.mod.fullNSD.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.8<-matrix(summary.mod.fullNSD.8$quantiles[nrow(summary.mod.fullNSD.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.9<-matrix(summary.mod.fullNSD.9$quantiles[nrow(summary.mod.fullNSD.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.fullNSD.10<-matrix(summary.mod.fullNSD.10$quantiles[nrow(summary.mod.fullNSD.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# pred.mat.mod.fullNSD.10locs<-cbind.data.frame(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
#                                               pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10)
# lwrbnd.mat.mod.fullNSD.10locs<-cbind.data.frame(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
#                                                 lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10)
# uprbnd.mat.mod.fullNSD.10locs<-cbind.data.frame(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
#                                                 uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10)

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(IS.avail.10locs[[i]]~times.avail.10locs[[i]],type="o",col="grey",pch=16,xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i),
       ylim=c(min(c(min(lwrbnd.mat.mod.fullNSD.10locs),
                    min(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    min(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])))),
              max(c(max(uprbnd.mat.mod.fullNSD.10locs),
                    max(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    max(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]))))))
  lines(t(simData_sat_tur_all[which.closest.sat.10locs[i],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])~months.RS.tur.dec,col=2,pch=15,type="o")
  lines(t(simData_drone_tur_all[which.closest.drone.10locs[i],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])~months.RS.tur.dec,col=4,pch=17,type="o")
  lines(pred.mat.mod.fullNSD.10locs[,i]~times.avail.10locs[[i]])
  lines(lwrbnd.mat.mod.fullNSD.10locs[,i]~times.avail.10locs[[i]],lty=2)
  lines(uprbnd.mat.mod.fullNSD.10locs[,i]~times.avail.10locs[[i]],lty=2)
}
par(mfrow=c(1,1))

# 2. Just with satellite data:

# 2. (a) Choose basis dimension:

eb.IS.bspline<-vector("list",length(basis.seq))
eb.RS.bspline<-vector("list",length(basis.seq))
for(i in 1:length(basis.seq)){
  eb.IS.bspline[[i]]<-vector("list",10)
  for(k in 1:10){
    eb.IS.bspline[[i]][[k]]<-eval.basis(times.avail.10locs[[k]],basis.list.bspline[[i]])
  }
  eb.RS.bspline[[i]]<-eval.basis(months.RS.tur.dec,basis.list.bspline[[i]])
}

# pred.mat.mod.NSDsat.10locs<-vector("list",length(basis.seq))
# lwrbnd.mat.mod.NSDsat.10locs<-vector("list",length(basis.seq))
# uprbnd.mat.mod.NSDsat.10locs<-vector("list",length(basis.seq))
# for(i in 1:length(basis.seq)){
#   mod.NSDsat.1<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-1],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
#                              By=eb.IS.bspline[[i]][-1],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[1]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.1<-summary(mod.NSDsat.1)
#   mod.NSDsat.2<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-2],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
#                              By=eb.IS.bspline[[i]][-2],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[2]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.2<-summary(mod.NSDsat.2)
#   mod.NSDsat.3<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-3],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
#                              By=eb.IS.bspline[[i]][-3],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[3]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.3<-summary(mod.NSDsat.3)
#   mod.NSDsat.4<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-4],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
#                              By=eb.IS.bspline[[i]][-4],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[4]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.4<-summary(mod.NSDsat.4)
#   mod.NSDsat.5<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-5],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
#                              By=eb.IS.bspline[[i]][-5],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[5]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.5<-summary(mod.NSDsat.5)
#   mod.NSDsat.6<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-6],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
#                              By=eb.IS.bspline[[i]][-6],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[6]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.6<-summary(mod.NSDsat.6)
#   mod.NSDsat.7<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-7],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
#                              By=eb.IS.bspline[[i]][-7],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[7]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.7<-summary(mod.NSDsat.7)
#   mod.NSDsat.8<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-8],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
#                              By=eb.IS.bspline[[i]][-8],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[8]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.8<-summary(mod.NSDsat.8)
#   mod.NSDsat.9<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                              yData=IS.avail.10locs[-9],
#                              xData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              xPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                              # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                              coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                              coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
#                              By=eb.IS.bspline[[i]][-9],
#                              Bx=eb.RS.bspline[[i]],
#                              # Bz=eb.RS.bspline[[i]],
#                              ByPred=eb.IS.bspline[[i]][[9]],
#                              phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                              aAlpha=2, bAlpha=1,
#                              aBeta=2, bBeta=1,
#                              # aGamma=2,bGamma=2,
#                              aY=2, bY=1,
#                              aC=2, bC=1,
#                              aX=2, bX=1,
#                              # aZ=2,bZ=1,
#                              muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                              # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                              sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                              sigmaYPrecInit=1.10,
#                              sigmaCPrecInit=1.4,
#                              alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                              sigmaXPrecInit=1.5,
#                              # sigmaZPrecInit=1.55,
#                              dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                              # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.9<-summary(mod.NSDsat.9)
#   mod.NSDsat.10<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                               yData=IS.avail.10locs[-10],
#                               xData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               xPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                               # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                               coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                               coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
#                               By=eb.IS.bspline[[i]][-10],
#                               Bx=eb.RS.bspline[[i]],
#                               # Bz=eb.RS.bspline[[i]],
#                               ByPred=eb.IS.bspline[[i]][[10]],
#                               phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                               aAlpha=2, bAlpha=1,
#                               aBeta=2, bBeta=1,
#                               # aGamma=2,bGamma=2,
#                               aY=2, bY=1,
#                               aC=2, bC=1,
#                               aX=2, bX=1,
#                               # aZ=2,bZ=1,
#                               muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                               # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                               sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                               sigmaYPrecInit=1.10,
#                               sigmaCPrecInit=1.4,
#                               alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                               betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                               # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                               cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                               sigmaXPrecInit=1.5,
#                               # sigmaZPrecInit=1.55,
#                               dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                               # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDsat.10<-summary(mod.NSDsat.10)
#   
#   pred.mat.mod.NSDsat.1<-matrix(summary.mod.NSDsat.1$quantiles[nrow(summary.mod.NSDsat.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.2<-matrix(summary.mod.NSDsat.2$quantiles[nrow(summary.mod.NSDsat.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.3<-matrix(summary.mod.NSDsat.3$quantiles[nrow(summary.mod.NSDsat.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.4<-matrix(summary.mod.NSDsat.4$quantiles[nrow(summary.mod.NSDsat.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.5<-matrix(summary.mod.NSDsat.5$quantiles[nrow(summary.mod.NSDsat.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.6<-matrix(summary.mod.NSDsat.6$quantiles[nrow(summary.mod.NSDsat.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.7<-matrix(summary.mod.NSDsat.7$quantiles[nrow(summary.mod.NSDsat.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.8<-matrix(summary.mod.NSDsat.8$quantiles[nrow(summary.mod.NSDsat.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.9<-matrix(summary.mod.NSDsat.9$quantiles[nrow(summary.mod.NSDsat.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.10<-matrix(summary.mod.NSDsat.10$quantiles[nrow(summary.mod.NSDsat.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.1<-matrix(summary.mod.NSDsat.1$quantiles[nrow(summary.mod.NSDsat.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.2<-matrix(summary.mod.NSDsat.2$quantiles[nrow(summary.mod.NSDsat.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.3<-matrix(summary.mod.NSDsat.3$quantiles[nrow(summary.mod.NSDsat.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.4<-matrix(summary.mod.NSDsat.4$quantiles[nrow(summary.mod.NSDsat.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.5<-matrix(summary.mod.NSDsat.5$quantiles[nrow(summary.mod.NSDsat.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.6<-matrix(summary.mod.NSDsat.6$quantiles[nrow(summary.mod.NSDsat.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.7<-matrix(summary.mod.NSDsat.7$quantiles[nrow(summary.mod.NSDsat.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.8<-matrix(summary.mod.NSDsat.8$quantiles[nrow(summary.mod.NSDsat.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.9<-matrix(summary.mod.NSDsat.9$quantiles[nrow(summary.mod.NSDsat.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDsat.10<-matrix(summary.mod.NSDsat.10$quantiles[nrow(summary.mod.NSDsat.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.1<-matrix(summary.mod.NSDsat.1$quantiles[nrow(summary.mod.NSDsat.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.2<-matrix(summary.mod.NSDsat.2$quantiles[nrow(summary.mod.NSDsat.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.3<-matrix(summary.mod.NSDsat.3$quantiles[nrow(summary.mod.NSDsat.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.4<-matrix(summary.mod.NSDsat.4$quantiles[nrow(summary.mod.NSDsat.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.5<-matrix(summary.mod.NSDsat.5$quantiles[nrow(summary.mod.NSDsat.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.6<-matrix(summary.mod.NSDsat.6$quantiles[nrow(summary.mod.NSDsat.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.7<-matrix(summary.mod.NSDsat.7$quantiles[nrow(summary.mod.NSDsat.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.8<-matrix(summary.mod.NSDsat.8$quantiles[nrow(summary.mod.NSDsat.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.9<-matrix(summary.mod.NSDsat.9$quantiles[nrow(summary.mod.NSDsat.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDsat.10<-matrix(summary.mod.NSDsat.10$quantiles[nrow(summary.mod.NSDsat.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   pred.mat.mod.NSDsat.10locs[[i]]<-cbind.data.frame(pred.mat.mod.NSDsat.1,pred.mat.mod.NSDsat.2,pred.mat.mod.NSDsat.3,pred.mat.mod.NSDsat.4,pred.mat.mod.NSDsat.5,
#                                                     pred.mat.mod.NSDsat.6,pred.mat.mod.NSDsat.7,pred.mat.mod.NSDsat.8,pred.mat.mod.NSDsat.9,pred.mat.mod.NSDsat.10)
#   lwrbnd.mat.mod.NSDsat.10locs[[i]]<-cbind.data.frame(lwrbnd.mat.mod.NSDsat.1,lwrbnd.mat.mod.NSDsat.2,lwrbnd.mat.mod.NSDsat.3,lwrbnd.mat.mod.NSDsat.4,lwrbnd.mat.mod.NSDsat.5,
#                                                       lwrbnd.mat.mod.NSDsat.6,lwrbnd.mat.mod.NSDsat.7,lwrbnd.mat.mod.NSDsat.8,lwrbnd.mat.mod.NSDsat.9,lwrbnd.mat.mod.NSDsat.10)
#   uprbnd.mat.mod.NSDsat.10locs[[i]]<-cbind.data.frame(uprbnd.mat.mod.NSDsat.1,uprbnd.mat.mod.NSDsat.2,uprbnd.mat.mod.NSDsat.3,uprbnd.mat.mod.NSDsat.4,uprbnd.mat.mod.NSDsat.5,
#                                                       uprbnd.mat.mod.NSDsat.6,uprbnd.mat.mod.NSDsat.7,uprbnd.mat.mod.NSDsat.8,uprbnd.mat.mod.NSDsat.9,uprbnd.mat.mod.NSDsat.10)
#   print(i)
# }
# 
# save(pred.mat.mod.NSDsat.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDsat_10locs.RData")
# save(lwrbnd.mat.mod.NSDsat.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDsat_10locs.RData")
# save(uprbnd.mat.mod.NSDsat.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDsat_10locs.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDsat_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDsat_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDsat_10locs.RData")

rmse.basis.seq.NSDsat.10locs<-numeric(length(basis.seq))
for(i in 1:length(basis.seq)){
  rmse.basis.seq.NSDsat.10locs[i]<-rmse(unlist(pred.mat.mod.NSDsat.10locs[[i]]),unlist(IS.avail.10locs))
}

# 2.(b) Choose phi:

# pred.mat.mod.NSDsat.10locs.phi<-vector("list",length(phi.seq))
# lwrbnd.mat.mod.NSDsat.10locs.phi<-vector("list",length(phi.seq))
# uprbnd.mat.mod.NSDsat.10locs.phi<-vector("list",length(phi.seq))
# for(i in 1:length(phi.seq)){
#   pred.mat.mod.NSDsat.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   lwrbnd.mat.mod.NSDsat.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   uprbnd.mat.mod.NSDsat.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   for(j in 1:length(phi.seq)){
#     mod.NSDsat.1<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-1],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-1],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[1]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.1<-summary(mod.NSDsat.1)
#     mod.NSDsat.2<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-2],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-2],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[2]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.2<-summary(mod.NSDsat.2)
#     mod.NSDsat.3<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-3],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-3],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[3]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.3<-summary(mod.NSDsat.3)
#     mod.NSDsat.4<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-4],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-4],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[4]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.4<-summary(mod.NSDsat.4)
#     mod.NSDsat.5<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-5],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-5],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[5]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.5<-summary(mod.NSDsat.5)
#     mod.NSDsat.6<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-6],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-6],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[6]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.6<-summary(mod.NSDsat.6)
#     mod.NSDsat.7<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-7],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-7],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[7]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.7<-summary(mod.NSDsat.7)
#     mod.NSDsat.8<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-8],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-8],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[8]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.8<-summary(mod.NSDsat.8)
#     mod.NSDsat.9<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-9],
#                                xData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                xPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
#                                By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-9],
#                                Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[9]],
#                                phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.9<-summary(mod.NSDsat.9)
#     mod.NSDsat.10<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                 yData=IS.avail.10locs[-10],
#                                 xData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                 # zData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                 xPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                 # zPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                 coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
#                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][-10],
#                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                 # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]],
#                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDsat.10locs)]][[10]],
#                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                 aAlpha=2, bAlpha=1,
#                                 aBeta=2, bBeta=1,
#                                 # aGamma=2,bGamma=2,
#                                 aY=2, bY=1,
#                                 aC=2, bC=1,
#                                 aX=2, bX=1,
#                                 # aZ=2,bZ=1,
#                                 muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                 # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)]),
#                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                 sigmaYPrecInit=1.10,
#                                 sigmaCPrecInit=1.4,
#                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                 # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                 cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1),
#                                 sigmaXPrecInit=1.5,
#                                 # sigmaZPrecInit=1.55,
#                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                 # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDsat.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDsat.10<-summary(mod.NSDsat.10)
#     
#     pred.mat.mod.NSDsat.1<-matrix(summary.mod.NSDsat.1$quantiles[nrow(summary.mod.NSDsat.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.2<-matrix(summary.mod.NSDsat.2$quantiles[nrow(summary.mod.NSDsat.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.3<-matrix(summary.mod.NSDsat.3$quantiles[nrow(summary.mod.NSDsat.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.4<-matrix(summary.mod.NSDsat.4$quantiles[nrow(summary.mod.NSDsat.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.5<-matrix(summary.mod.NSDsat.5$quantiles[nrow(summary.mod.NSDsat.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.6<-matrix(summary.mod.NSDsat.6$quantiles[nrow(summary.mod.NSDsat.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.7<-matrix(summary.mod.NSDsat.7$quantiles[nrow(summary.mod.NSDsat.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.8<-matrix(summary.mod.NSDsat.8$quantiles[nrow(summary.mod.NSDsat.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.9<-matrix(summary.mod.NSDsat.9$quantiles[nrow(summary.mod.NSDsat.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.10<-matrix(summary.mod.NSDsat.10$quantiles[nrow(summary.mod.NSDsat.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.1<-matrix(summary.mod.NSDsat.1$quantiles[nrow(summary.mod.NSDsat.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.2<-matrix(summary.mod.NSDsat.2$quantiles[nrow(summary.mod.NSDsat.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.3<-matrix(summary.mod.NSDsat.3$quantiles[nrow(summary.mod.NSDsat.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.4<-matrix(summary.mod.NSDsat.4$quantiles[nrow(summary.mod.NSDsat.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.5<-matrix(summary.mod.NSDsat.5$quantiles[nrow(summary.mod.NSDsat.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.6<-matrix(summary.mod.NSDsat.6$quantiles[nrow(summary.mod.NSDsat.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.7<-matrix(summary.mod.NSDsat.7$quantiles[nrow(summary.mod.NSDsat.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.8<-matrix(summary.mod.NSDsat.8$quantiles[nrow(summary.mod.NSDsat.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.9<-matrix(summary.mod.NSDsat.9$quantiles[nrow(summary.mod.NSDsat.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDsat.10<-matrix(summary.mod.NSDsat.10$quantiles[nrow(summary.mod.NSDsat.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.1<-matrix(summary.mod.NSDsat.1$quantiles[nrow(summary.mod.NSDsat.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.2<-matrix(summary.mod.NSDsat.2$quantiles[nrow(summary.mod.NSDsat.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.3<-matrix(summary.mod.NSDsat.3$quantiles[nrow(summary.mod.NSDsat.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.4<-matrix(summary.mod.NSDsat.4$quantiles[nrow(summary.mod.NSDsat.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.5<-matrix(summary.mod.NSDsat.5$quantiles[nrow(summary.mod.NSDsat.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.6<-matrix(summary.mod.NSDsat.6$quantiles[nrow(summary.mod.NSDsat.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.7<-matrix(summary.mod.NSDsat.7$quantiles[nrow(summary.mod.NSDsat.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.8<-matrix(summary.mod.NSDsat.8$quantiles[nrow(summary.mod.NSDsat.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.9<-matrix(summary.mod.NSDsat.9$quantiles[nrow(summary.mod.NSDsat.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDsat.10<-matrix(summary.mod.NSDsat.10$quantiles[nrow(summary.mod.NSDsat.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     pred.mat.mod.NSDsat.10locs.phi[[i]][[j]]<-cbind.data.frame(pred.mat.mod.NSDsat.1,pred.mat.mod.NSDsat.2,pred.mat.mod.NSDsat.3,pred.mat.mod.NSDsat.4,pred.mat.mod.NSDsat.5,
#                                                           pred.mat.mod.NSDsat.6,pred.mat.mod.NSDsat.7,pred.mat.mod.NSDsat.8,pred.mat.mod.NSDsat.9,pred.mat.mod.NSDsat.10)
#     lwrbnd.mat.mod.NSDsat.10locs.phi[[i]][[j]]<-cbind.data.frame(lwrbnd.mat.mod.NSDsat.1,lwrbnd.mat.mod.NSDsat.2,lwrbnd.mat.mod.NSDsat.3,lwrbnd.mat.mod.NSDsat.4,lwrbnd.mat.mod.NSDsat.5,
#                                                             lwrbnd.mat.mod.NSDsat.6,lwrbnd.mat.mod.NSDsat.7,lwrbnd.mat.mod.NSDsat.8,lwrbnd.mat.mod.NSDsat.9,lwrbnd.mat.mod.NSDsat.10)
#     uprbnd.mat.mod.NSDsat.10locs.phi[[i]][[j]]<-cbind.data.frame(uprbnd.mat.mod.NSDsat.1,uprbnd.mat.mod.NSDsat.2,uprbnd.mat.mod.NSDsat.3,uprbnd.mat.mod.NSDsat.4,uprbnd.mat.mod.NSDsat.5,
#                                                             uprbnd.mat.mod.NSDsat.6,uprbnd.mat.mod.NSDsat.7,uprbnd.mat.mod.NSDsat.8,uprbnd.mat.mod.NSDsat.9,uprbnd.mat.mod.NSDsat.10)
#     print(c(i,j))
#   }
# }
# 
# save(pred.mat.mod.NSDsat.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDsat_10locs_phi.RData")
# save(lwrbnd.mat.mod.NSDsat.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDsat_10locs_phi.RData")
# save(uprbnd.mat.mod.NSDsat.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDsat_10locs_phi.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDsat_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDsat_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDsat_10locs_phi.RData")

rmse.basis.seq.NSDsat.10locs.phi<-matrix(nrow=length(phi.seq),ncol=length(phi.seq))
for(i in 1:length(phi.seq)){
  for(j in 1:length(phi.seq)){
    rmse.basis.seq.NSDsat.10locs.phi[i,j]<-rmse(unlist(pred.mat.mod.NSDsat.10locs.phi[[i]][[j]]),unlist(IS.avail.10locs))
  }
}

# eb.IS.bspline14<-vector("list",10)
# for(k in 1:10){
#   eb.IS.bspline14[[k]]<-eval.basis(times.avail.10locs[[k]],basis.list.bspline[[which(basis.seq==14)]])
# }
# eb.RS.bspline14<-eval.basis(months.RS.tur.dec,basis.list.bspline[[which(basis.seq==14)]])

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(IS.avail.10locs[[i]]~times.avail.10locs[[i]],type="o",col="grey",pch=16,xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i),
       ylim=c(min(c(min(lwrbnd.mat.mod.NSDsat.10locs),
                    min(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    min(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])))),
              max(c(max(uprbnd.mat.mod.NSDsat.10locs),
                    max(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    max(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]))))))
  lines(t(simData_sat_tur_all[which.closest.sat.10locs[i],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])~months.RS.tur.dec,col=2,pch=15,type="o")
  # lines(t(simData_drone_tur_all[which.closest.drone.10locs[i],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])~months.RS.tur.dec,col=4,pch=17,type="o")
  lines(pred.mat.mod.NSDsat.10locs[,i]~times.avail.10locs[[i]])
  lines(lwrbnd.mat.mod.NSDsat.10locs[,i]~times.avail.10locs[[i]],lty=2)
  lines(uprbnd.mat.mod.NSDsat.10locs[,i]~times.avail.10locs[[i]],lty=2)
}
par(mfrow=c(1,1))

# 3. Just with drone data:

# eb.IS.bspline14<-vector("list",10)
# for(k in 1:10){
#   eb.IS.bspline14[[k]]<-eval.basis(times.avail.10locs[[k]],basis.list.bspline[[which(basis.seq==14)]])
# }
# eb.RS.bspline14<-eval.basis(months.RS.tur.dec,basis.list.bspline[[which(basis.seq==14)]])

# 3.(a) Basis dimension selection:

# pred.mat.mod.NSDdrone.10locs<-vector("list",length(basis.seq))
# lwrbnd.mat.mod.NSDdrone.10locs<-vector("list",length(basis.seq))
# uprbnd.mat.mod.NSDdrone.10locs<-vector("list",length(basis.seq))
# for(i in 1:length(basis.seq)){
#   mod.NSDdrone.1<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-1],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
#                                By=eb.IS.bspline[[i]][-1],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[1]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, 14),SigmaE=100*diag(14),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.1<-summary(mod.NSDdrone.1)
#   mod.NSDdrone.2<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-2],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
#                                By=eb.IS.bspline[[i]][-2],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[2]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.2<-summary(mod.NSDdrone.2)
#   mod.NSDdrone.3<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-3],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
#                                By=eb.IS.bspline[[i]][-3],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[3]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.3<-summary(mod.NSDdrone.3)
#   mod.NSDdrone.4<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-4],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
#                                By=eb.IS.bspline[[i]][-4],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[4]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.4<-summary(mod.NSDdrone.4)
#   mod.NSDdrone.5<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-5],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
#                                By=eb.IS.bspline[[i]][-5],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[5]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.5<-summary(mod.NSDdrone.5)
#   mod.NSDdrone.6<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-6],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
#                                By=eb.IS.bspline[[i]][-6],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[6]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.6<-summary(mod.NSDdrone.6)
#   mod.NSDdrone.7<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-7],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
#                                By=eb.IS.bspline[[i]][-7],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[7]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.7<-summary(mod.NSDdrone.7)
#   mod.NSDdrone.8<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-8],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
#                                By=eb.IS.bspline[[i]][-8],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[8]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.8<-summary(mod.NSDdrone.8)
#   mod.NSDdrone.9<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                yData=IS.avail.10locs[-9],
#                                # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                xPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                                coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
#                                By=eb.IS.bspline[[i]][-9],
#                                Bx=eb.RS.bspline[[i]],
#                                # Bz=eb.RS.bspline[[i]],
#                                ByPred=eb.IS.bspline[[i]][[9]],
#                                phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                aAlpha=2, bAlpha=1,
#                                aBeta=2, bBeta=1,
#                                # aGamma=2,bGamma=2,
#                                aY=2, bY=1,
#                                aC=2, bC=1,
#                                aX=2, bX=1,
#                                # aZ=2,bZ=1,
#                                muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                sigmaYPrecInit=1.10,
#                                sigmaCPrecInit=1.4,
#                                alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                sigmaXPrecInit=1.5,
#                                # sigmaZPrecInit=1.55,
#                                dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.9<-summary(mod.NSDdrone.9)
#   mod.NSDdrone.10<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                 yData=IS.avail.10locs[-10],
#                                 # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                 # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                 coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
#                                 By=eb.IS.bspline[[i]][-10],
#                                 Bx=eb.RS.bspline[[i]],
#                                 # Bz=eb.RS.bspline[[i]],
#                                 ByPred=eb.IS.bspline[[i]][[10]],
#                                 phiAlpha=0.1, phiBeta=0.1, #phiGamma = 0.1,
#                                 aAlpha=2, bAlpha=1,
#                                 aBeta=2, bBeta=1,
#                                 # aGamma=2,bGamma=2,
#                                 aY=2, bY=1,
#                                 aC=2, bC=1,
#                                 aX=2, bX=1,
#                                 # aZ=2,bZ=1,
#                                 muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                 # muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
#                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                 sigmaYPrecInit=1.10,
#                                 sigmaCPrecInit=1.4,
#                                 alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                 betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                 # gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                 cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                 sigmaXPrecInit=1.5,
#                                 # sigmaZPrecInit=1.55,
#                                 dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)#,
#                                 # eInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSDdrone.10<-summary(mod.NSDdrone.10)
#   
#   pred.mat.mod.NSDdrone.1<-matrix(summary.mod.NSDdrone.1$quantiles[nrow(summary.mod.NSDdrone.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.2<-matrix(summary.mod.NSDdrone.2$quantiles[nrow(summary.mod.NSDdrone.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.3<-matrix(summary.mod.NSDdrone.3$quantiles[nrow(summary.mod.NSDdrone.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.4<-matrix(summary.mod.NSDdrone.4$quantiles[nrow(summary.mod.NSDdrone.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.5<-matrix(summary.mod.NSDdrone.5$quantiles[nrow(summary.mod.NSDdrone.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.6<-matrix(summary.mod.NSDdrone.6$quantiles[nrow(summary.mod.NSDdrone.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.7<-matrix(summary.mod.NSDdrone.7$quantiles[nrow(summary.mod.NSDdrone.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.8<-matrix(summary.mod.NSDdrone.8$quantiles[nrow(summary.mod.NSDdrone.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.9<-matrix(summary.mod.NSDdrone.9$quantiles[nrow(summary.mod.NSDdrone.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.10<-matrix(summary.mod.NSDdrone.10$quantiles[nrow(summary.mod.NSDdrone.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.1<-matrix(summary.mod.NSDdrone.1$quantiles[nrow(summary.mod.NSDdrone.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.2<-matrix(summary.mod.NSDdrone.2$quantiles[nrow(summary.mod.NSDdrone.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.3<-matrix(summary.mod.NSDdrone.3$quantiles[nrow(summary.mod.NSDdrone.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.4<-matrix(summary.mod.NSDdrone.4$quantiles[nrow(summary.mod.NSDdrone.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.5<-matrix(summary.mod.NSDdrone.5$quantiles[nrow(summary.mod.NSDdrone.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.6<-matrix(summary.mod.NSDdrone.6$quantiles[nrow(summary.mod.NSDdrone.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.7<-matrix(summary.mod.NSDdrone.7$quantiles[nrow(summary.mod.NSDdrone.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.8<-matrix(summary.mod.NSDdrone.8$quantiles[nrow(summary.mod.NSDdrone.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.9<-matrix(summary.mod.NSDdrone.9$quantiles[nrow(summary.mod.NSDdrone.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSDdrone.10<-matrix(summary.mod.NSDdrone.10$quantiles[nrow(summary.mod.NSDdrone.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.1<-matrix(summary.mod.NSDdrone.1$quantiles[nrow(summary.mod.NSDdrone.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.2<-matrix(summary.mod.NSDdrone.2$quantiles[nrow(summary.mod.NSDdrone.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.3<-matrix(summary.mod.NSDdrone.3$quantiles[nrow(summary.mod.NSDdrone.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.4<-matrix(summary.mod.NSDdrone.4$quantiles[nrow(summary.mod.NSDdrone.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.5<-matrix(summary.mod.NSDdrone.5$quantiles[nrow(summary.mod.NSDdrone.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.6<-matrix(summary.mod.NSDdrone.6$quantiles[nrow(summary.mod.NSDdrone.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.7<-matrix(summary.mod.NSDdrone.7$quantiles[nrow(summary.mod.NSDdrone.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.8<-matrix(summary.mod.NSDdrone.8$quantiles[nrow(summary.mod.NSDdrone.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.9<-matrix(summary.mod.NSDdrone.9$quantiles[nrow(summary.mod.NSDdrone.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSDdrone.10<-matrix(summary.mod.NSDdrone.10$quantiles[nrow(summary.mod.NSDdrone.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   pred.mat.mod.NSDdrone.10locs[[i]]<-cbind.data.frame(pred.mat.mod.NSDdrone.1,pred.mat.mod.NSDdrone.2,pred.mat.mod.NSDdrone.3,pred.mat.mod.NSDdrone.4,pred.mat.mod.NSDdrone.5,
#                                                       pred.mat.mod.NSDdrone.6,pred.mat.mod.NSDdrone.7,pred.mat.mod.NSDdrone.8,pred.mat.mod.NSDdrone.9,pred.mat.mod.NSDdrone.10)
#   lwrbnd.mat.mod.NSDdrone.10locs[[i]]<-cbind.data.frame(lwrbnd.mat.mod.NSDdrone.1,lwrbnd.mat.mod.NSDdrone.2,lwrbnd.mat.mod.NSDdrone.3,lwrbnd.mat.mod.NSDdrone.4,lwrbnd.mat.mod.NSDdrone.5,
#                                                         lwrbnd.mat.mod.NSDdrone.6,lwrbnd.mat.mod.NSDdrone.7,lwrbnd.mat.mod.NSDdrone.8,lwrbnd.mat.mod.NSDdrone.9,lwrbnd.mat.mod.NSDdrone.10)
#   uprbnd.mat.mod.NSDdrone.10locs[[i]]<-cbind.data.frame(uprbnd.mat.mod.NSDdrone.1,uprbnd.mat.mod.NSDdrone.2,uprbnd.mat.mod.NSDdrone.3,uprbnd.mat.mod.NSDdrone.4,uprbnd.mat.mod.NSDdrone.5,
#                                                         uprbnd.mat.mod.NSDdrone.6,uprbnd.mat.mod.NSDdrone.7,uprbnd.mat.mod.NSDdrone.8,uprbnd.mat.mod.NSDdrone.9,uprbnd.mat.mod.NSDdrone.10)
#   print(i)
# }
# 
# save(pred.mat.mod.NSDdrone.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDdrone_10locs.RData")
# save(lwrbnd.mat.mod.NSDdrone.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDdrone_10locs.RData")
# save(uprbnd.mat.mod.NSDdrone.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDdrone_10locs.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDdrone_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDdrone_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDdrone_10locs.RData")

rmse.basis.seq.NSDdrone.10locs<-numeric(length(basis.seq))
for(i in 1:length(basis.seq)){
  rmse.basis.seq.NSDdrone.10locs[i]<-rmse(unlist(pred.mat.mod.NSDdrone.10locs[[i]]),unlist(IS.avail.10locs))
}

# 3. (b) phi choice:

# pred.mat.mod.NSDdrone.10locs.phi<-vector("list",length(phi.seq))
# lwrbnd.mat.mod.NSDdrone.10locs.phi<-vector("list",length(phi.seq))
# uprbnd.mat.mod.NSDdrone.10locs.phi<-vector("list",length(phi.seq))
# for(i in 1:length(phi.seq)){
#   pred.mat.mod.NSDdrone.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   lwrbnd.mat.mod.NSDdrone.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   uprbnd.mat.mod.NSDdrone.10locs.phi[[i]]<-vector("list",length(phi.seq))
#   for(j in 1:length(phi.seq)){
#     mod.NSDdrone.1<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-1],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-1],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[1]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, 14),SigmaE=100*diag(14),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.1<-summary(mod.NSDdrone.1)
#     mod.NSDdrone.2<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-2],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-2],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[2]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.2<-summary(mod.NSDdrone.2)
#     mod.NSDdrone.3<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-3],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-3],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[3]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.3<-summary(mod.NSDdrone.3)
#     mod.NSDdrone.4<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-4],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-4],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[4]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.4<-summary(mod.NSDdrone.4)
#     mod.NSDdrone.5<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-5],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-5],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[5]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.5<-summary(mod.NSDdrone.5)
#     mod.NSDdrone.6<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-6],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-6],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[6]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.6<-summary(mod.NSDdrone.6)
#     mod.NSDdrone.7<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-7],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-7],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[7]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.7<-summary(mod.NSDdrone.7)
#     mod.NSDdrone.8<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-8],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-8],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[8]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.8<-summary(mod.NSDdrone.8)
#     mod.NSDdrone.9<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                  yData=IS.avail.10locs[-9],
#                                  # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                  coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
#                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-9],
#                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[9]],
#                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                  aAlpha=2, bAlpha=1,
#                                  aBeta=2, bBeta=1,
#                                  # aGamma=2,bGamma=2,
#                                  aY=2, bY=1,
#                                  aC=2, bC=1,
#                                  aX=2, bX=1,
#                                  # aZ=2,bZ=1,
#                                  muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                  sigmaYPrecInit=1.10,
#                                  sigmaCPrecInit=1.4,
#                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                  sigmaXPrecInit=1.5,
#                                  # sigmaZPrecInit=1.55,
#                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                  # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.9<-summary(mod.NSDdrone.9)
#     mod.NSDdrone.10<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                   yData=IS.avail.10locs[-10],
#                                   # xData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                   xData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                   # xPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                   xPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                   coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                                   coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
#                                   By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][-10],
#                                   Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                   # Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]],
#                                   ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDdrone.10locs)]][[10]],
#                                   phiAlpha=phi.seq[i], phiBeta=phi.seq[j],
#                                   aAlpha=2, bAlpha=1,
#                                   aBeta=2, bBeta=1,
#                                   # aGamma=2,bGamma=2,
#                                   aY=2, bY=1,
#                                   aC=2, bC=1,
#                                   aX=2, bX=1,
#                                   # aZ=2,bZ=1,
#                                   muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                   # muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)]),
#                                   sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, #sigmaGammaPrecInit = 1.25, 
#                                   sigmaYPrecInit=1.10,
#                                   sigmaCPrecInit=1.4,
#                                   alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                   betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                   # gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                   cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1),
#                                   sigmaXPrecInit=1.5,
#                                   # sigmaZPrecInit=1.55,
#                                   dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)#,
#                                   # eInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDdrone.10locs)], ncol = length(IS.avail.10locs)-1)
#     )
#     summary.mod.NSDdrone.10<-summary(mod.NSDdrone.10)
#     
#     pred.mat.mod.NSDdrone.1<-matrix(summary.mod.NSDdrone.1$quantiles[nrow(summary.mod.NSDdrone.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.2<-matrix(summary.mod.NSDdrone.2$quantiles[nrow(summary.mod.NSDdrone.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.3<-matrix(summary.mod.NSDdrone.3$quantiles[nrow(summary.mod.NSDdrone.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.4<-matrix(summary.mod.NSDdrone.4$quantiles[nrow(summary.mod.NSDdrone.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.5<-matrix(summary.mod.NSDdrone.5$quantiles[nrow(summary.mod.NSDdrone.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.6<-matrix(summary.mod.NSDdrone.6$quantiles[nrow(summary.mod.NSDdrone.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.7<-matrix(summary.mod.NSDdrone.7$quantiles[nrow(summary.mod.NSDdrone.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.8<-matrix(summary.mod.NSDdrone.8$quantiles[nrow(summary.mod.NSDdrone.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.9<-matrix(summary.mod.NSDdrone.9$quantiles[nrow(summary.mod.NSDdrone.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.10<-matrix(summary.mod.NSDdrone.10$quantiles[nrow(summary.mod.NSDdrone.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.1<-matrix(summary.mod.NSDdrone.1$quantiles[nrow(summary.mod.NSDdrone.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.2<-matrix(summary.mod.NSDdrone.2$quantiles[nrow(summary.mod.NSDdrone.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.3<-matrix(summary.mod.NSDdrone.3$quantiles[nrow(summary.mod.NSDdrone.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.4<-matrix(summary.mod.NSDdrone.4$quantiles[nrow(summary.mod.NSDdrone.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.5<-matrix(summary.mod.NSDdrone.5$quantiles[nrow(summary.mod.NSDdrone.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.6<-matrix(summary.mod.NSDdrone.6$quantiles[nrow(summary.mod.NSDdrone.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.7<-matrix(summary.mod.NSDdrone.7$quantiles[nrow(summary.mod.NSDdrone.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.8<-matrix(summary.mod.NSDdrone.8$quantiles[nrow(summary.mod.NSDdrone.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.9<-matrix(summary.mod.NSDdrone.9$quantiles[nrow(summary.mod.NSDdrone.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     lwrbnd.mat.mod.NSDdrone.10<-matrix(summary.mod.NSDdrone.10$quantiles[nrow(summary.mod.NSDdrone.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.1<-matrix(summary.mod.NSDdrone.1$quantiles[nrow(summary.mod.NSDdrone.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.2<-matrix(summary.mod.NSDdrone.2$quantiles[nrow(summary.mod.NSDdrone.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.3<-matrix(summary.mod.NSDdrone.3$quantiles[nrow(summary.mod.NSDdrone.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.4<-matrix(summary.mod.NSDdrone.4$quantiles[nrow(summary.mod.NSDdrone.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.5<-matrix(summary.mod.NSDdrone.5$quantiles[nrow(summary.mod.NSDdrone.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.6<-matrix(summary.mod.NSDdrone.6$quantiles[nrow(summary.mod.NSDdrone.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.7<-matrix(summary.mod.NSDdrone.7$quantiles[nrow(summary.mod.NSDdrone.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.8<-matrix(summary.mod.NSDdrone.8$quantiles[nrow(summary.mod.NSDdrone.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.9<-matrix(summary.mod.NSDdrone.9$quantiles[nrow(summary.mod.NSDdrone.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     uprbnd.mat.mod.NSDdrone.10<-matrix(summary.mod.NSDdrone.10$quantiles[nrow(summary.mod.NSDdrone.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#     pred.mat.mod.NSDdrone.10locs.phi[[i]][[j]]<-cbind.data.frame(pred.mat.mod.NSDdrone.1,pred.mat.mod.NSDdrone.2,pred.mat.mod.NSDdrone.3,pred.mat.mod.NSDdrone.4,pred.mat.mod.NSDdrone.5,
#                                                                  pred.mat.mod.NSDdrone.6,pred.mat.mod.NSDdrone.7,pred.mat.mod.NSDdrone.8,pred.mat.mod.NSDdrone.9,pred.mat.mod.NSDdrone.10)
#     lwrbnd.mat.mod.NSDdrone.10locs.phi[[i]][[j]]<-cbind.data.frame(lwrbnd.mat.mod.NSDdrone.1,lwrbnd.mat.mod.NSDdrone.2,lwrbnd.mat.mod.NSDdrone.3,lwrbnd.mat.mod.NSDdrone.4,lwrbnd.mat.mod.NSDdrone.5,
#                                                                    lwrbnd.mat.mod.NSDdrone.6,lwrbnd.mat.mod.NSDdrone.7,lwrbnd.mat.mod.NSDdrone.8,lwrbnd.mat.mod.NSDdrone.9,lwrbnd.mat.mod.NSDdrone.10)
#     uprbnd.mat.mod.NSDdrone.10locs.phi[[i]][[j]]<-cbind.data.frame(uprbnd.mat.mod.NSDdrone.1,uprbnd.mat.mod.NSDdrone.2,uprbnd.mat.mod.NSDdrone.3,uprbnd.mat.mod.NSDdrone.4,uprbnd.mat.mod.NSDdrone.5,
#                                                                    uprbnd.mat.mod.NSDdrone.6,uprbnd.mat.mod.NSDdrone.7,uprbnd.mat.mod.NSDdrone.8,uprbnd.mat.mod.NSDdrone.9,uprbnd.mat.mod.NSDdrone.10)
#     print(c(i,j))
#   }
# }
# 
# save(pred.mat.mod.NSDdrone.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDdrone_10locs_phi.RData")
# save(lwrbnd.mat.mod.NSDdrone.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDdrone_10locs_phi.RData")
# save(uprbnd.mat.mod.NSDdrone.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDdrone_10locs_phi.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDdrone_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDdrone_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDdrone_10locs_phi.RData")

rmse.basis.seq.NSDdrone.10locs.phi<-matrix(nrow=length(phi.seq),ncol=length(phi.seq))
for(i in 1:length(phi.seq)){
  for(j in 1:length(phi.seq)){
    rmse.basis.seq.NSDdrone.10locs.phi[i,j]<-rmse(unlist(pred.mat.mod.NSDdrone.10locs.phi[[i]][[j]]),unlist(IS.avail.10locs))
  }
}

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(IS.avail.10locs[[i]]~times.avail.10locs[[i]],type="o",col="grey",pch=16,xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i),
       ylim=c(min(c(min(lwrbnd.mat.mod.NSDdrone.10locs),
                    min(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    min(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])))),
              max(c(max(uprbnd.mat.mod.NSDdrone.10locs),
                    max(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    max(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]))))))
  # lines(t(simData_sat_tur_all[which.closest.sat.10locs[i],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])~months.RS.tur.dec,col=2,pch=15,type="o")
  lines(t(simData_drone_tur_all[which.closest.drone.10locs[i],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])~months.RS.tur.dec,col=4,pch=17,type="o")
  lines(pred.mat.mod.NSDdrone.10locs[,i]~times.avail.10locs[[i]])
  lines(lwrbnd.mat.mod.NSDdrone.10locs[,i]~times.avail.10locs[[i]],lty=2)
  lines(uprbnd.mat.mod.NSDdrone.10locs[,i]~times.avail.10locs[[i]],lty=2)
}
par(mfrow=c(1,1))

# 4. 2 stage model: drone and satellite fused, then fuse this product with in situ data:

# 4. (a)  Choose basis dimension:

# pred.mat.mod.NSD2stagePart2.10locs<-vector("list",length(basis.seq))
# lwrbnd.mat.mod.NSD2stagePart2.10locs<-vector("list",length(basis.seq))
# uprbnd.mat.mod.NSD2stagePart2.10locs<-vector("list",length(basis.seq))
# for(i in 1:length(basis.seq)){
#   
#   # Stage (i): Fuse satellite and drone data:
#   
#   eb.RS.bspline.list<-vector("list",length(IS.avail.10locs))
#   for(j in 1:length(IS.avail.10locs)){
#     eb.RS.bspline.list[[j]]<-eb.RS.bspline[[i]]
#   }
#   
#   mod.NSD2stagePart1<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                    yData=matrix.to.list(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
#                                    xData=t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    xPred=t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                    coordsData=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs,1:2],
#                                    coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs,1:2],
#                                    By=eb.RS.bspline.list,
#                                    Bx=eb.RS.bspline[[i]],
#                                    ByPred=eb.RS.bspline[[i]],
#                                    phiAlpha=0.1, phiBeta=0.1, 
#                                    aAlpha=2, bAlpha=1,
#                                    aBeta=2, bBeta=1,
#                                    aY=2, bY=1,
#                                    aC=2, bC=1,
#                                    aX=2, bX=1,
#                                    muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                    sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                    sigmaYPrecInit=1.10,
#                                    sigmaCPrecInit=1.4,
#                                    alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)),
#                                    betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)),
#                                    cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)),
#                                    sigmaXPrecInit=1.5,
#                                    dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs))
#   )
#   summary.mod.NSD2stagePart1<-summary(mod.NSD2stagePart1)
#   
#   pred.mat.mod.NSD2stagePart1<-matrix(summary.mod.NSD2stagePart1$quantiles[nrow(summary.mod.NSD2stagePart1$quantiles)-((44*10-1):0),3],nrow=44,ncol=10)
#   
#   # Stage (ii): Fuse (satellite and drone data product) with in situ data:
#   
#   mod.NSD2stagePart2.1<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-1],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-1],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,1],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[1],1:2],
#                                      By=eb.IS.bspline[[i]][-1],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[1]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.1<-summary(mod.NSD2stagePart2.1)
#   mod.NSD2stagePart2.2<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-2],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-2],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,2],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[2],1:2],
#                                      By=eb.IS.bspline[[i]][-2],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[2]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.2<-summary(mod.NSD2stagePart2.2)
#   mod.NSD2stagePart2.3<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-3],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-3],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,3],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[3],1:2],
#                                      By=eb.IS.bspline[[i]][-3],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[3]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.3<-summary(mod.NSD2stagePart2.3)
#   mod.NSD2stagePart2.4<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-4],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-4],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,4],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[4],1:2],
#                                      By=eb.IS.bspline[[i]][-4],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[4]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.4<-summary(mod.NSD2stagePart2.4)
#   mod.NSD2stagePart2.5<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-5],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-5],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,5],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[5],1:2],
#                                      By=eb.IS.bspline[[i]][-5],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[5]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.5<-summary(mod.NSD2stagePart2.5)
#   mod.NSD2stagePart2.6<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-6],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-6],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,6],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[6],1:2],
#                                      By=eb.IS.bspline[[i]][-6],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[6]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.6<-summary(mod.NSD2stagePart2.6)
#   mod.NSD2stagePart2.7<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-7],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-7],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,7],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[7],1:2],
#                                      By=eb.IS.bspline[[i]][-7],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[7]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.7<-summary(mod.NSD2stagePart2.7)
#   mod.NSD2stagePart2.8<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-8],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-8],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,8],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[8],1:2],
#                                      By=eb.IS.bspline[[i]][-8],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[8]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.8<-summary(mod.NSD2stagePart2.8)
#   mod.NSD2stagePart2.9<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                      yData=IS.avail.10locs[-9],
#                                      xData=pred.mat.mod.NSD2stagePart1[,-9],
#                                      xPred=pred.mat.mod.NSD2stagePart1[,9],
#                                      coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                                      coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[9],1:2],
#                                      By=eb.IS.bspline[[i]][-9],
#                                      Bx=eb.RS.bspline[[i]],
#                                      ByPred=eb.IS.bspline[[i]][[9]],
#                                      phiAlpha=0.1, phiBeta=0.1, 
#                                      aAlpha=2, bAlpha=1,
#                                      aBeta=2, bBeta=1,
#                                      aY=2, bY=1,
#                                      aC=2, bC=1,
#                                      aX=2, bX=1,
#                                      muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                      sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                      sigmaYPrecInit=1.10,
#                                      sigmaCPrecInit=1.4,
#                                      alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                      sigmaXPrecInit=1.5,
#                                      dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.9<-summary(mod.NSD2stagePart2.9)
#   mod.NSD2stagePart2.10<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
#                                       yData=IS.avail.10locs[-10],
#                                       xData=pred.mat.mod.NSD2stagePart1[,-10],
#                                       xPred=pred.mat.mod.NSD2stagePart1[,10],
#                                       coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[10],1:2],
#                                       By=eb.IS.bspline[[i]][-10],
#                                       Bx=eb.RS.bspline[[i]],
#                                       ByPred=eb.IS.bspline[[i]][[10]],
#                                       phiAlpha=0.1, phiBeta=0.1, 
#                                       aAlpha=2, bAlpha=1,
#                                       aBeta=2, bBeta=1,
#                                       aY=2, bY=1,
#                                       aC=2, bC=1,
#                                       aX=2, bX=1,
#                                       muD=rep(0, basis.seq[i]),SigmaD=100*diag(basis.seq[i]),
#                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
#                                       sigmaYPrecInit=1.10,
#                                       sigmaCPrecInit=1.4,
#                                       alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                       betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                       cInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
#                                       sigmaXPrecInit=1.5,
#                                       dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1)
#   )
#   summary.mod.NSD2stagePart2.10<-summary(mod.NSD2stagePart2.10)
#   
#   pred.mat.mod.NSD2stagePart2.1<-matrix(summary.mod.NSD2stagePart2.1$quantiles[nrow(summary.mod.NSD2stagePart2.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.2<-matrix(summary.mod.NSD2stagePart2.2$quantiles[nrow(summary.mod.NSD2stagePart2.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.3<-matrix(summary.mod.NSD2stagePart2.3$quantiles[nrow(summary.mod.NSD2stagePart2.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.4<-matrix(summary.mod.NSD2stagePart2.4$quantiles[nrow(summary.mod.NSD2stagePart2.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.5<-matrix(summary.mod.NSD2stagePart2.5$quantiles[nrow(summary.mod.NSD2stagePart2.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.6<-matrix(summary.mod.NSD2stagePart2.6$quantiles[nrow(summary.mod.NSD2stagePart2.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.7<-matrix(summary.mod.NSD2stagePart2.7$quantiles[nrow(summary.mod.NSD2stagePart2.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.8<-matrix(summary.mod.NSD2stagePart2.8$quantiles[nrow(summary.mod.NSD2stagePart2.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.9<-matrix(summary.mod.NSD2stagePart2.9$quantiles[nrow(summary.mod.NSD2stagePart2.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.10<-matrix(summary.mod.NSD2stagePart2.10$quantiles[nrow(summary.mod.NSD2stagePart2.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.1<-matrix(summary.mod.NSD2stagePart2.1$quantiles[nrow(summary.mod.NSD2stagePart2.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.2<-matrix(summary.mod.NSD2stagePart2.2$quantiles[nrow(summary.mod.NSD2stagePart2.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.3<-matrix(summary.mod.NSD2stagePart2.3$quantiles[nrow(summary.mod.NSD2stagePart2.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.4<-matrix(summary.mod.NSD2stagePart2.4$quantiles[nrow(summary.mod.NSD2stagePart2.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.5<-matrix(summary.mod.NSD2stagePart2.5$quantiles[nrow(summary.mod.NSD2stagePart2.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.6<-matrix(summary.mod.NSD2stagePart2.6$quantiles[nrow(summary.mod.NSD2stagePart2.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.7<-matrix(summary.mod.NSD2stagePart2.7$quantiles[nrow(summary.mod.NSD2stagePart2.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.8<-matrix(summary.mod.NSD2stagePart2.8$quantiles[nrow(summary.mod.NSD2stagePart2.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.9<-matrix(summary.mod.NSD2stagePart2.9$quantiles[nrow(summary.mod.NSD2stagePart2.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   lwrbnd.mat.mod.NSD2stagePart2.10<-matrix(summary.mod.NSD2stagePart2.10$quantiles[nrow(summary.mod.NSD2stagePart2.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.1<-matrix(summary.mod.NSD2stagePart2.1$quantiles[nrow(summary.mod.NSD2stagePart2.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.2<-matrix(summary.mod.NSD2stagePart2.2$quantiles[nrow(summary.mod.NSD2stagePart2.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.3<-matrix(summary.mod.NSD2stagePart2.3$quantiles[nrow(summary.mod.NSD2stagePart2.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.4<-matrix(summary.mod.NSD2stagePart2.4$quantiles[nrow(summary.mod.NSD2stagePart2.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.5<-matrix(summary.mod.NSD2stagePart2.5$quantiles[nrow(summary.mod.NSD2stagePart2.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.6<-matrix(summary.mod.NSD2stagePart2.6$quantiles[nrow(summary.mod.NSD2stagePart2.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.7<-matrix(summary.mod.NSD2stagePart2.7$quantiles[nrow(summary.mod.NSD2stagePart2.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.8<-matrix(summary.mod.NSD2stagePart2.8$quantiles[nrow(summary.mod.NSD2stagePart2.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.9<-matrix(summary.mod.NSD2stagePart2.9$quantiles[nrow(summary.mod.NSD2stagePart2.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   uprbnd.mat.mod.NSD2stagePart2.10<-matrix(summary.mod.NSD2stagePart2.10$quantiles[nrow(summary.mod.NSD2stagePart2.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
#   pred.mat.mod.NSD2stagePart2.10locs[[i]]<-cbind.data.frame(pred.mat.mod.NSD2stagePart2.1,pred.mat.mod.NSD2stagePart2.2,pred.mat.mod.NSD2stagePart2.3,pred.mat.mod.NSD2stagePart2.4,pred.mat.mod.NSD2stagePart2.5,
#                                                             pred.mat.mod.NSD2stagePart2.6,pred.mat.mod.NSD2stagePart2.7,pred.mat.mod.NSD2stagePart2.8,pred.mat.mod.NSD2stagePart2.9,pred.mat.mod.NSD2stagePart2.10)
#   lwrbnd.mat.mod.NSD2stagePart2.10locs[[i]]<-cbind.data.frame(lwrbnd.mat.mod.NSD2stagePart2.1,lwrbnd.mat.mod.NSD2stagePart2.2,lwrbnd.mat.mod.NSD2stagePart2.3,lwrbnd.mat.mod.NSD2stagePart2.4,lwrbnd.mat.mod.NSD2stagePart2.5,
#                                                               lwrbnd.mat.mod.NSD2stagePart2.6,lwrbnd.mat.mod.NSD2stagePart2.7,lwrbnd.mat.mod.NSD2stagePart2.8,lwrbnd.mat.mod.NSD2stagePart2.9,lwrbnd.mat.mod.NSD2stagePart2.10)
#   uprbnd.mat.mod.NSD2stagePart2.10locs[[i]]<-cbind.data.frame(uprbnd.mat.mod.NSD2stagePart2.1,uprbnd.mat.mod.NSD2stagePart2.2,uprbnd.mat.mod.NSD2stagePart2.3,uprbnd.mat.mod.NSD2stagePart2.4,uprbnd.mat.mod.NSD2stagePart2.5,
#                                                               uprbnd.mat.mod.NSD2stagePart2.6,uprbnd.mat.mod.NSD2stagePart2.7,uprbnd.mat.mod.NSD2stagePart2.8,uprbnd.mat.mod.NSD2stagePart2.9,uprbnd.mat.mod.NSD2stagePart2.10)
#   
#   print(i)
# }
# 
# save(pred.mat.mod.NSD2stagePart2.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSD2stagePart2_10locs.RData")
# save(lwrbnd.mat.mod.NSD2stagePart2.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSD2stagePart2_10locs.RData")
# save(uprbnd.mat.mod.NSD2stagePart2.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSD2stagePart2_10locs.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSD2stagePart2_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSD2stagePart2_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSD2stagePart2_10locs.RData")

rmse.basis.seq.NSD2stagePart2.10locs<-numeric(length(basis.seq))
for(i in 1:length(basis.seq)){
  rmse.basis.seq.NSD2stagePart2.10locs[i]<-rmse(unlist(pred.mat.mod.NSD2stagePart2.10locs[[i]]),unlist(IS.avail.10locs))
}

# 4. (b)  Choose phi values:

pred.mat.mod.NSD2stagePart2.10locs.phi<-vector("list",length(phi.seq))
lwrbnd.mat.mod.NSD2stagePart2.10locs.phi<-vector("list",length(phi.seq))
uprbnd.mat.mod.NSD2stagePart2.10locs.phi<-vector("list",length(phi.seq))

eb.RS.bspline.list<-vector("list",length(IS.avail.10locs))
for(j in 1:length(IS.avail.10locs)){
  eb.RS.bspline.list[[j]]<-eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]]
}

for(i in 1:length(phi.seq)){
  pred.mat.mod.NSD2stagePart2.10locs.phi[[i]]<-vector("list",length(phi.seq))
  lwrbnd.mat.mod.NSD2stagePart2.10locs.phi[[i]]<-vector("list",length(phi.seq))
  uprbnd.mat.mod.NSD2stagePart2.10locs.phi[[i]]<-vector("list",length(phi.seq))
  for(j in 1:length(phi.seq)){
    # Stage (i): Fuse satellite and drone data:
    

    
    mod.NSD2stagePart1<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                     yData=matrix.to.list(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                                     xData=t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                     xPred=t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                     coordsData=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs,1:2],
                                     coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs,1:2],
                                     By=eb.RS.bspline.list,
                                     Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                     ByPred=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                     phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                     aAlpha=2, bAlpha=1,
                                     aBeta=2, bBeta=1,
                                     aY=2, bY=1,
                                     aC=2, bC=1,
                                     aX=2, bX=1,
                                     muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                     sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                     sigmaYPrecInit=1.10,
                                     sigmaCPrecInit=1.4,
                                     alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)),
                                     betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)),
                                     cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)),
                                     sigmaXPrecInit=1.5,
                                     dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs))
    )
    summary.mod.NSD2stagePart1<-summary(mod.NSD2stagePart1)
    
    pred.mat.mod.NSD2stagePart1<-matrix(summary.mod.NSD2stagePart1$quantiles[nrow(summary.mod.NSD2stagePart1$quantiles)-((44*10-1):0),3],nrow=44,ncol=10)
    
    # Stage (ii): Fuse (satellite and drone data product) with in situ data:
    
    mod.NSD2stagePart2.1<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-1],
                                       xData=pred.mat.mod.NSD2stagePart1[,-1],
                                       xPred=pred.mat.mod.NSD2stagePart1[,1],
                                       coordsData=as.matrix(locs.insitu.10locs)[-1,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[1],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-1],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[1]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.1<-summary(mod.NSD2stagePart2.1)
    mod.NSD2stagePart2.2<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-2],
                                       xData=pred.mat.mod.NSD2stagePart1[,-2],
                                       xPred=pred.mat.mod.NSD2stagePart1[,2],
                                       coordsData=as.matrix(locs.insitu.10locs)[-2,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[2],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-2],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[2]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.2<-summary(mod.NSD2stagePart2.2)
    mod.NSD2stagePart2.3<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-3],
                                       xData=pred.mat.mod.NSD2stagePart1[,-3],
                                       xPred=pred.mat.mod.NSD2stagePart1[,3],
                                       coordsData=as.matrix(locs.insitu.10locs)[-3,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[3],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-3],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[3]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.3<-summary(mod.NSD2stagePart2.3)
    mod.NSD2stagePart2.4<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-4],
                                       xData=pred.mat.mod.NSD2stagePart1[,-4],
                                       xPred=pred.mat.mod.NSD2stagePart1[,4],
                                       coordsData=as.matrix(locs.insitu.10locs)[-4,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[4],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-4],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[4]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.4<-summary(mod.NSD2stagePart2.4)
    mod.NSD2stagePart2.5<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-5],
                                       xData=pred.mat.mod.NSD2stagePart1[,-5],
                                       xPred=pred.mat.mod.NSD2stagePart1[,5],
                                       coordsData=as.matrix(locs.insitu.10locs)[-5,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[5],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-5],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[5]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.5<-summary(mod.NSD2stagePart2.5)
    mod.NSD2stagePart2.6<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-6],
                                       xData=pred.mat.mod.NSD2stagePart1[,-6],
                                       xPred=pred.mat.mod.NSD2stagePart1[,6],
                                       coordsData=as.matrix(locs.insitu.10locs)[-6,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[6],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-6],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[6]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.6<-summary(mod.NSD2stagePart2.6)
    mod.NSD2stagePart2.7<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-7],
                                       xData=pred.mat.mod.NSD2stagePart1[,-7],
                                       xPred=pred.mat.mod.NSD2stagePart1[,7],
                                       coordsData=as.matrix(locs.insitu.10locs)[-7,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[7],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-7],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[7]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.7<-summary(mod.NSD2stagePart2.7)
    mod.NSD2stagePart2.8<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-8],
                                       xData=pred.mat.mod.NSD2stagePart1[,-8],
                                       xPred=pred.mat.mod.NSD2stagePart1[,8],
                                       coordsData=as.matrix(locs.insitu.10locs)[-8,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[8],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-8],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[8]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.8<-summary(mod.NSD2stagePart2.8)
    mod.NSD2stagePart2.9<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                       yData=IS.avail.10locs[-9],
                                       xData=pred.mat.mod.NSD2stagePart1[,-9],
                                       xPred=pred.mat.mod.NSD2stagePart1[,9],
                                       coordsData=as.matrix(locs.insitu.10locs)[-9,],
                                       coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[9],1:2],
                                       By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-9],
                                       Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                       ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[9]],
                                       phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                       aAlpha=2, bAlpha=1,
                                       aBeta=2, bBeta=1,
                                       aY=2, bY=1,
                                       aC=2, bC=1,
                                       aX=2, bX=1,
                                       muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                       sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                       sigmaYPrecInit=1.10,
                                       sigmaCPrecInit=1.4,
                                       alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                       sigmaXPrecInit=1.5,
                                       dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.9<-summary(mod.NSD2stagePart2.9)
    mod.NSD2stagePart2.10<-run.NSDmodel(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                        yData=IS.avail.10locs[-10],
                                        xData=pred.mat.mod.NSD2stagePart1[,-10],
                                        xPred=pred.mat.mod.NSD2stagePart1[,10],
                                        coordsData=as.matrix(locs.insitu.10locs)[-10,],
                                        coordsPred=as.matrix(simData_drone_tur_all)[which.closest.drone.10locs[10],1:2],
                                        By=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][-10],
                                        Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]],
                                        ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]][[10]],
                                        phiAlpha=phi.seq[i], phiBeta=phi.seq[j], 
                                        aAlpha=2, bAlpha=1,
                                        aBeta=2, bBeta=1,
                                        aY=2, bY=1,
                                        aC=2, bC=1,
                                        aX=2, bX=1,
                                        muD=rep(0, basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),SigmaD=100*diag(basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)]),
                                        sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2,
                                        sigmaYPrecInit=1.10,
                                        sigmaCPrecInit=1.4,
                                        alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                        betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                        cInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1),
                                        sigmaXPrecInit=1.5,
                                        dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSD2stagePart2.10locs)], ncol = length(IS.avail.10locs)-1)
    )
    summary.mod.NSD2stagePart2.10<-summary(mod.NSD2stagePart2.10)
    
    pred.mat.mod.NSD2stagePart2.1<-matrix(summary.mod.NSD2stagePart2.1$quantiles[nrow(summary.mod.NSD2stagePart2.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.2<-matrix(summary.mod.NSD2stagePart2.2$quantiles[nrow(summary.mod.NSD2stagePart2.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.3<-matrix(summary.mod.NSD2stagePart2.3$quantiles[nrow(summary.mod.NSD2stagePart2.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.4<-matrix(summary.mod.NSD2stagePart2.4$quantiles[nrow(summary.mod.NSD2stagePart2.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.5<-matrix(summary.mod.NSD2stagePart2.5$quantiles[nrow(summary.mod.NSD2stagePart2.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.6<-matrix(summary.mod.NSD2stagePart2.6$quantiles[nrow(summary.mod.NSD2stagePart2.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.7<-matrix(summary.mod.NSD2stagePart2.7$quantiles[nrow(summary.mod.NSD2stagePart2.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.8<-matrix(summary.mod.NSD2stagePart2.8$quantiles[nrow(summary.mod.NSD2stagePart2.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.9<-matrix(summary.mod.NSD2stagePart2.9$quantiles[nrow(summary.mod.NSD2stagePart2.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.10<-matrix(summary.mod.NSD2stagePart2.10$quantiles[nrow(summary.mod.NSD2stagePart2.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.1<-matrix(summary.mod.NSD2stagePart2.1$quantiles[nrow(summary.mod.NSD2stagePart2.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.2<-matrix(summary.mod.NSD2stagePart2.2$quantiles[nrow(summary.mod.NSD2stagePart2.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.3<-matrix(summary.mod.NSD2stagePart2.3$quantiles[nrow(summary.mod.NSD2stagePart2.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.4<-matrix(summary.mod.NSD2stagePart2.4$quantiles[nrow(summary.mod.NSD2stagePart2.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.5<-matrix(summary.mod.NSD2stagePart2.5$quantiles[nrow(summary.mod.NSD2stagePart2.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.6<-matrix(summary.mod.NSD2stagePart2.6$quantiles[nrow(summary.mod.NSD2stagePart2.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.7<-matrix(summary.mod.NSD2stagePart2.7$quantiles[nrow(summary.mod.NSD2stagePart2.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.8<-matrix(summary.mod.NSD2stagePart2.8$quantiles[nrow(summary.mod.NSD2stagePart2.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.9<-matrix(summary.mod.NSD2stagePart2.9$quantiles[nrow(summary.mod.NSD2stagePart2.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    lwrbnd.mat.mod.NSD2stagePart2.10<-matrix(summary.mod.NSD2stagePart2.10$quantiles[nrow(summary.mod.NSD2stagePart2.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.1<-matrix(summary.mod.NSD2stagePart2.1$quantiles[nrow(summary.mod.NSD2stagePart2.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.2<-matrix(summary.mod.NSD2stagePart2.2$quantiles[nrow(summary.mod.NSD2stagePart2.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.3<-matrix(summary.mod.NSD2stagePart2.3$quantiles[nrow(summary.mod.NSD2stagePart2.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.4<-matrix(summary.mod.NSD2stagePart2.4$quantiles[nrow(summary.mod.NSD2stagePart2.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.5<-matrix(summary.mod.NSD2stagePart2.5$quantiles[nrow(summary.mod.NSD2stagePart2.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.6<-matrix(summary.mod.NSD2stagePart2.6$quantiles[nrow(summary.mod.NSD2stagePart2.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.7<-matrix(summary.mod.NSD2stagePart2.7$quantiles[nrow(summary.mod.NSD2stagePart2.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.8<-matrix(summary.mod.NSD2stagePart2.8$quantiles[nrow(summary.mod.NSD2stagePart2.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.9<-matrix(summary.mod.NSD2stagePart2.9$quantiles[nrow(summary.mod.NSD2stagePart2.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    uprbnd.mat.mod.NSD2stagePart2.10<-matrix(summary.mod.NSD2stagePart2.10$quantiles[nrow(summary.mod.NSD2stagePart2.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
    pred.mat.mod.NSD2stagePart2.10locs.phi[[i]][[j]]<-cbind.data.frame(pred.mat.mod.NSD2stagePart2.1,pred.mat.mod.NSD2stagePart2.2,pred.mat.mod.NSD2stagePart2.3,pred.mat.mod.NSD2stagePart2.4,pred.mat.mod.NSD2stagePart2.5,
                                                                       pred.mat.mod.NSD2stagePart2.6,pred.mat.mod.NSD2stagePart2.7,pred.mat.mod.NSD2stagePart2.8,pred.mat.mod.NSD2stagePart2.9,pred.mat.mod.NSD2stagePart2.10)
    lwrbnd.mat.mod.NSD2stagePart2.10locs.phi[[i]][[j]]<-cbind.data.frame(lwrbnd.mat.mod.NSD2stagePart2.1,lwrbnd.mat.mod.NSD2stagePart2.2,lwrbnd.mat.mod.NSD2stagePart2.3,lwrbnd.mat.mod.NSD2stagePart2.4,lwrbnd.mat.mod.NSD2stagePart2.5,
                                                                         lwrbnd.mat.mod.NSD2stagePart2.6,lwrbnd.mat.mod.NSD2stagePart2.7,lwrbnd.mat.mod.NSD2stagePart2.8,lwrbnd.mat.mod.NSD2stagePart2.9,lwrbnd.mat.mod.NSD2stagePart2.10)
    uprbnd.mat.mod.NSD2stagePart2.10locs.phi[[i]][[j]]<-cbind.data.frame(uprbnd.mat.mod.NSD2stagePart2.1,uprbnd.mat.mod.NSD2stagePart2.2,uprbnd.mat.mod.NSD2stagePart2.3,uprbnd.mat.mod.NSD2stagePart2.4,uprbnd.mat.mod.NSD2stagePart2.5,
                                                                         uprbnd.mat.mod.NSD2stagePart2.6,uprbnd.mat.mod.NSD2stagePart2.7,uprbnd.mat.mod.NSD2stagePart2.8,uprbnd.mat.mod.NSD2stagePart2.9,uprbnd.mat.mod.NSD2stagePart2.10)
    
    print(c(i,j))
  }
}

# save(pred.mat.mod.NSD2stagePart2.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSD2stagePart2_10locs_phi.RData")
# save(lwrbnd.mat.mod.NSD2stagePart2.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSD2stagePart2_10locs_phi.RData")
# save(uprbnd.mat.mod.NSD2stagePart2.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSD2stagePart2_10locs_phi.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSD2stagePart2_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSD2stagePart2_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSD2stagePart2_10locs_phi.RData")

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(IS.avail.10locs[[i]]~times.avail.10locs[[i]],type="o",col="grey",pch=16,xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i),
       ylim=c(min(c(min(lwrbnd.mat.mod.NSD2stagePart2.10locs),
                    min(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    min(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])))),
              max(c(max(uprbnd.mat.mod.NSD2stagePart2.10locs),
                    max(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    max(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]))))))
  lines(t(simData_sat_tur_all[which.closest.sat.10locs[i],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])~months.RS.tur.dec,col=2,pch=15,type="o")
  lines(t(simData_drone_tur_all[which.closest.drone.10locs[i],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])~months.RS.tur.dec,col=4,pch=17,type="o")
  lines(pred.mat.mod.NSD2stagePart2.10locs[,i]~times.avail.10locs[[i]])
  lines(lwrbnd.mat.mod.NSD2stagePart2.10locs[,i]~times.avail.10locs[[i]],lty=2)
  lines(uprbnd.mat.mod.NSD2stagePart2.10locs[,i]~times.avail.10locs[[i]],lty=2)
}
par(mfrow=c(1,1))

# 5. 2-stage model accounting for uncertainties at each stage:

eb.IS.bspline14<-vector("list",10)
for(k in 1:10){
  eb.IS.bspline14[[k]]<-eval.basis(times.avail.10locs[[k]],basis.list.bspline[[which(basis.seq==14)]])
}
eb.RS.bspline14<-eval.basis(months.RS.tur.dec,basis.list.bspline[[which(basis.seq==14)]])

# nIter,nBurnIn,nChains,nThin,yData,xData,xPred,zData,zPred,coordsData,coordsPred,By,Bx,Bz,ByPred,
# phiAlpha,phiBeta,phiGamma,phiDelta,
# aAlpha,bAlpha,aBeta,bBeta,aY,bY,aGamma,bGamma,aDelta,bDelta,aC,bC,aX,bX,aD,bD,aZ,bZ,muE,SigmaE,
# sigmaAlphaPrecInit,sigmaBetaPrecInit,sigmaGammaPrecInit,sigmaDeltaPrecInit,sigmaYPrecInit,sigmaCPrecInit,sigmaXPrecInit,
# sigmaZPrecInit,sigmaDPrecInit,alphaInit,betaInit,gammaInit,deltaInit,cInit,dInit,eInit

# 5. (a) Choose basis dimension:

pred.mat.mod.NSDmodel2Stage.10locs<-vector("list",length(basis.seq))
lwrbnd.mat.mod.NSDmodel2Stage.10locs<-vector("list",length(basis.seq))
uprbnd.mat.mod.NSDmodel2Stage.10locs<-vector("list",length(basis.seq))

for(i in 1:length(basis.seq)){
  mod.NSDmodel2Stage.1<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-1],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-1,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
                                           By=eb.IS.bspline[[i]][-1],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[1]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.1<-summary(mod.NSDmodel2Stage.1)
  mod.NSDmodel2Stage.2<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-2],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-2,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
                                           By=eb.IS.bspline[[i]][-2],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[2]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.2<-summary(mod.NSDmodel2Stage.2)
  mod.NSDmodel2Stage.3<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-3],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-3,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
                                           By=eb.IS.bspline[[i]][-3],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[3]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.3<-summary(mod.NSDmodel2Stage.3)
  mod.NSDmodel2Stage.4<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-4],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-4,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
                                           By=eb.IS.bspline[[i]][-4],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[4]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.4<-summary(mod.NSDmodel2Stage.4)
  mod.NSDmodel2Stage.5<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-5],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-5,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
                                           By=eb.IS.bspline[[i]][-5],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[5]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.5<-summary(mod.NSDmodel2Stage.5)
  mod.NSDmodel2Stage.6<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-6],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-6,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
                                           By=eb.IS.bspline[[i]][-6],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[6]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.6<-summary(mod.NSDmodel2Stage.6)
  mod.NSDmodel2Stage.7<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-7],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-7,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
                                           By=eb.IS.bspline[[i]][-7],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[7]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.7<-summary(mod.NSDmodel2Stage.7)
  mod.NSDmodel2Stage.8<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-8],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-8,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
                                           By=eb.IS.bspline[[i]][-8],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[8]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.8<-summary(mod.NSDmodel2Stage.8)
  mod.NSDmodel2Stage.9<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                           yData=IS.avail.10locs[-9],
                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                           coordsData=as.matrix(locs.insitu.10locs)[-9,],
                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
                                           By=eb.IS.bspline[[i]][-9],
                                           Bx=eb.RS.bspline[[i]],
                                           Bz=eb.RS.bspline[[i]],
                                           ByPred=eb.IS.bspline[[i]][[9]],
                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                           aAlpha=2, bAlpha=1,
                                           aBeta=2, bBeta=1,
                                           aY=2, bY=1,
                                           aGamma=2,bGamma=2,
                                           aDelta=2,bDelta=2,
                                           aC=2, bC=1,
                                           aX=2, bX=1,
                                           aD=2, bD=1,
                                           aZ=2,bZ=1,
                                           muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                           alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                           eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.9<-summary(mod.NSDmodel2Stage.9)
  mod.NSDmodel2Stage.10<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                            yData=IS.avail.10locs[-10],
                                            zData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                            xData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                            zPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                            xPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                            coordsData=as.matrix(locs.insitu.10locs)[-10,],
                                            coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
                                            By=eb.IS.bspline[[i]][-10],
                                            Bx=eb.RS.bspline[[i]],
                                            Bz=eb.RS.bspline[[i]],
                                            ByPred=eb.IS.bspline[[i]][[10]],
                                            phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
                                            aAlpha=2, bAlpha=1,
                                            aBeta=2, bBeta=1,
                                            aY=2, bY=1,
                                            aGamma=2,bGamma=2,
                                            aDelta=2,bDelta=2,
                                            aC=2, bC=1,
                                            aX=2, bX=1,
                                            aD=2, bD=1,
                                            aZ=2,bZ=1,
                                            muE=rep(0, basis.seq[i]),SigmaE=100*diag(basis.seq[i]),
                                            sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                            sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                            alphaInit=matrix(0, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                            betaInit=matrix(0.4, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                            gammaInit=matrix(0.45, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                            deltaInit=matrix(0.5, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                            cInit=matrix(0.55, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                            dInit=matrix(0.6, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1),
                                            eInit=matrix(0.65, nrow = basis.seq[i], ncol = length(IS.avail.10locs)-1))
  summary.mod.NSDmodel2Stage.10<-summary(mod.NSDmodel2Stage.10)
  
  pred.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  lwrbnd.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  uprbnd.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
  pred.mat.mod.NSDmodel2Stage.10locs[[i]]<-cbind.data.frame(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
                                                            pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10)
  lwrbnd.mat.mod.NSDmodel2Stage.10locs[[i]]<-cbind.data.frame(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
                                                              lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10)
  uprbnd.mat.mod.NSDmodel2Stage.10locs[[i]]<-cbind.data.frame(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
                                                              uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10)
  print(i)
}

# save(pred.mat.mod.NSDmodel2Stage.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDmodel2Stage_10locs.RData")
# save(lwrbnd.mat.mod.NSDmodel2Stage.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDmodel2Stage_10locs.RData")
# save(uprbnd.mat.mod.NSDmodel2Stage.10locs,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDmodel2Stage_10locs.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDmodel2Stage_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDmodel2Stage_10locs.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDmodel2Stage_10locs.RData")

rmse.basis.seq.NSDmodel2Stage.10locs<-numeric(length(basis.seq))
for(i in 1:length(basis.seq)){
  rmse.basis.seq.NSDmodel2Stage.10locs[i]<-rmse(unlist(pred.mat.mod.NSDmodel2Stage.10locs[[i]]),unlist(IS.avail.10locs))
}

# 5. (b) Choose phi values:

pred.mat.mod.NSDmodel2Stage.10locs.phi<-vector("list",length(phi.seq))
lwrbnd.mat.mod.NSDmodel2Stage.10locs.phi<-vector("list",length(phi.seq))
uprbnd.mat.mod.NSDmodel2Stage.10locs.phi<-vector("list",length(phi.seq))
for(i in 1:length(phi.seq)){
  pred.mat.mod.NSDmodel2Stage.10locs.phi[[i]]<-vector("list",length(phi.seq))
  lwrbnd.mat.mod.NSDmodel2Stage.10locs.phi[[i]]<-vector("list",length(phi.seq))
  uprbnd.mat.mod.NSDmodel2Stage.10locs.phi[[i]]<-vector("list",length(phi.seq))
  for(j in 1:length(phi.seq)){
    pred.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]]<-vector("list",length(phi.seq))
    lwrbnd.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]]<-vector("list",length(phi.seq))
    uprbnd.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]]<-vector("list",length(phi.seq))
    for(k in 1:length(phi.seq)){
      pred.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]][[k]]<-vector("list",length(phi.seq))
      lwrbnd.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]][[k]]<-vector("list",length(phi.seq))
      uprbnd.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]][[k]]<-vector("list",length(phi.seq))
      for(l in 1:length(phi.seq)){
        mod.NSDmodel2Stage.1<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-1],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-1,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-1],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[1]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.1<-summary(mod.NSDmodel2Stage.1)
        mod.NSDmodel2Stage.2<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-2],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-2,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-2],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[2]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.2<-summary(mod.NSDmodel2Stage.2)
        mod.NSDmodel2Stage.3<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-3],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-3,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-3],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[3]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.3<-summary(mod.NSDmodel2Stage.3)
        mod.NSDmodel2Stage.4<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-4],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-4,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-4],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[4]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.4<-summary(mod.NSDmodel2Stage.4)
        mod.NSDmodel2Stage.5<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-5],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-5,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-5],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[5]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.5<-summary(mod.NSDmodel2Stage.5)
        mod.NSDmodel2Stage.6<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-6],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-6,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-6],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[6]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.6<-summary(mod.NSDmodel2Stage.6)
        mod.NSDmodel2Stage.7<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-7],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-7,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-7],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[7]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.7<-summary(mod.NSDmodel2Stage.7)
        mod.NSDmodel2Stage.8<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-8],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-8,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-8],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[8]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.8<-summary(mod.NSDmodel2Stage.8)
        mod.NSDmodel2Stage.9<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                 yData=IS.avail.10locs[-9],
                                                 zData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 zPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                 xPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                 coordsData=as.matrix(locs.insitu.10locs)[-9,],
                                                 coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
                                                 By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-9],
                                                 Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                 ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[9]],
                                                 phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                 aAlpha=2, bAlpha=1,
                                                 aBeta=2, bBeta=1,
                                                 aY=2, bY=1,
                                                 aGamma=2,bGamma=2,
                                                 aDelta=2,bDelta=2,
                                                 aC=2, bC=1,
                                                 aX=2, bX=1,
                                                 aD=2, bD=1,
                                                 aZ=2,bZ=1,
                                                 muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                 sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                 sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                 alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                 eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.9<-summary(mod.NSDmodel2Stage.9)
        mod.NSDmodel2Stage.10<-run.NSDmodel2Stage(nIter=1000,nBurnIn=100,nChains=2,nThin=10,
                                                  yData=IS.avail.10locs[-10],
                                                  zData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                  xData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                  zPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                                  xPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                                  coordsData=as.matrix(locs.insitu.10locs)[-10,],
                                                  coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
                                                  By=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][-10],
                                                  Bx=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                  Bz=eb.RS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]],
                                                  ByPred=eb.IS.bspline[[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]][[10]],
                                                  phiAlpha=phi.seq[i], phiBeta=phi.seq[j], phiGamma = phi.seq[k], phiDelta = phi.seq[l],
                                                  aAlpha=2, bAlpha=1,
                                                  aBeta=2, bBeta=1,
                                                  aY=2, bY=1,
                                                  aGamma=2,bGamma=2,
                                                  aDelta=2,bDelta=2,
                                                  aC=2, bC=1,
                                                  aX=2, bX=1,
                                                  aD=2, bD=1,
                                                  aZ=2,bZ=1,
                                                  muE=rep(0, basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),SigmaE=100*diag(basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)]),
                                                  sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
                                                  sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
                                                  alphaInit=matrix(0, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                  betaInit=matrix(0.4, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                  gammaInit=matrix(0.45, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                  deltaInit=matrix(0.5, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                  cInit=matrix(0.55, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                  dInit=matrix(0.6, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1),
                                                  eInit=matrix(0.65, nrow = basis.seq[which.min(rmse.basis.seq.NSDmodel2Stage.10locs)], ncol = length(IS.avail.10locs)-1))
        summary.mod.NSDmodel2Stage.10<-summary(mod.NSDmodel2Stage.10)
        
        pred.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        lwrbnd.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        uprbnd.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
        pred.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]][[k]][[l]]<-cbind.data.frame(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
                                                                                     pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10)
        lwrbnd.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]][[k]][[l]]<-cbind.data.frame(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
                                                                                       lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10)
        uprbnd.mat.mod.NSDmodel2Stage.10locs.phi[[i]][[j]][[k]][[l]]<-cbind.data.frame(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
                                                                                       uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10)
        print(c(i,j,k,l))
      }
    }
  }
}

# save(pred.mat.mod.NSDmodel2Stage.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDmodel2Stage_10locs_phi.RData")
# save(lwrbnd.mat.mod.NSDmodel2Stage.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDmodel2Stage_10locs_phi.RData")
# save(uprbnd.mat.mod.NSDmodel2Stage.10locs.phi,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDmodel2Stage_10locs_phi.RData")

load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/pred_mat_mod_NSDmodel2Stage_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/lwrbnd_mat_mod_NSDmodel2Stage_10locs_phi.RData")
load("C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_comparison_all_models_10locs/uprbnd_mat_mod_NSDmodel2Stage_10locs_phi.RData")

# mod.NSDmodel2Stage.1<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-1],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[1],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[1],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-1,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[1],1:2],
#                                          By=eb.IS.bspline14[-1],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[1]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.1<-summary(mod.NSDmodel2Stage.1)
# mod.NSDmodel2Stage.2<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-2],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[2],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[2],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-2,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[2],1:2],
#                                          By=eb.IS.bspline14[-2],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[2]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.2<-summary(mod.NSDmodel2Stage.2)
# mod.NSDmodel2Stage.3<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-3],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[3],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[3],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-3,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[3],1:2],
#                                          By=eb.IS.bspline14[-3],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[3]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.3<-summary(mod.NSDmodel2Stage.3)
# mod.NSDmodel2Stage.4<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-4],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[4],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[4],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-4,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[4],1:2],
#                                          By=eb.IS.bspline14[-4],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[4]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.4<-summary(mod.NSDmodel2Stage.4)
# mod.NSDmodel2Stage.5<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-5],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[5],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[5],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-5,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[5],1:2],
#                                          By=eb.IS.bspline14[-5],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[5]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.5<-summary(mod.NSDmodel2Stage.5)
# mod.NSDmodel2Stage.6<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-6],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[6],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[6],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-6,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[6],1:2],
#                                          By=eb.IS.bspline14[-6],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[6]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.6<-summary(mod.NSDmodel2Stage.6)
# mod.NSDmodel2Stage.7<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-7],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[7],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[7],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-7,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[7],1:2],
#                                          By=eb.IS.bspline14[-7],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[7]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.7<-summary(mod.NSDmodel2Stage.7)
# mod.NSDmodel2Stage.8<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-8],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[8],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[8],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-8,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[8],1:2],
#                                          By=eb.IS.bspline14[-8],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[8]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.8<-summary(mod.NSDmodel2Stage.8)
# mod.NSDmodel2Stage.9<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=IS.avail.10locs[-9],
#                                          zData=t(simData_sat_tur_all[which.closest.sat.10locs[-9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xData=t(simData_drone_tur_all[which.closest.drone.10locs[-9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          zPred=t(simData_sat_tur_all[which.closest.sat.10locs[9],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                          xPred=t(simData_drone_tur_all[which.closest.drone.10locs[9],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                          coordsData=as.matrix(locs.insitu.10locs)[-9,],
#                                          coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[9],1:2],
#                                          By=eb.IS.bspline14[-9],
#                                          Bx=eb.RS.bspline14,
#                                          Bz=eb.RS.bspline14,
#                                          ByPred=eb.IS.bspline14[[9]],
#                                          phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                          aAlpha=2, bAlpha=1,
#                                          aBeta=2, bBeta=1,
#                                          aY=2, bY=1,
#                                          aGamma=2,bGamma=2,
#                                          aDelta=2,bDelta=2,
#                                          aC=2, bC=1,
#                                          aX=2, bX=1,
#                                          aD=2, bD=1,
#                                          aZ=2,bZ=1,
#                                          muE=rep(0, 14),SigmaE=100*diag(14),
#                                          sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                          sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                          alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                          eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.9<-summary(mod.NSDmodel2Stage.9)
# mod.NSDmodel2Stage.10<-run.NSDmodel2Stage(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                           yData=IS.avail.10locs[-10],
#                                           zData=t(simData_sat_tur_all[which.closest.sat.10locs[-10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                           xData=t(simData_drone_tur_all[which.closest.drone.10locs[-10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                           zPred=t(simData_sat_tur_all[which.closest.sat.10locs[10],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
#                                           xPred=t(simData_drone_tur_all[which.closest.drone.10locs[10],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
#                                           coordsData=as.matrix(locs.insitu.10locs)[-10,],
#                                           coordsPred=as.matrix(simData_sat_tur_all)[which.closest.sat.10locs[10],1:2],
#                                           By=eb.IS.bspline14[-10],
#                                           Bx=eb.RS.bspline14,
#                                           Bz=eb.RS.bspline14,
#                                           ByPred=eb.IS.bspline14[[10]],
#                                           phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1, phiDelta = 0.1,
#                                           aAlpha=2, bAlpha=1,
#                                           aBeta=2, bBeta=1,
#                                           aY=2, bY=1,
#                                           aGamma=2,bGamma=2,
#                                           aDelta=2,bDelta=2,
#                                           aC=2, bC=1,
#                                           aX=2, bX=1,
#                                           aD=2, bD=1,
#                                           aZ=2,bZ=1,
#                                           muE=rep(0, 14),SigmaE=100*diag(14),
#                                           sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaDeltaPrecInit = 1.3,
#                                           sigmaYPrecInit=1.10, sigmaCPrecInit=1.4, sigmaXPrecInit=1.5, sigmaZPrecInit=1.55, sigmaDPrecInit = 1.6,
#                                           alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                           betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                           gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                           deltaInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                           cInit=matrix(0.55, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                           dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)-1),
#                                           eInit=matrix(0.65, nrow = 14, ncol = length(IS.avail.10locs)-1))
# summary.mod.NSDmodel2Stage.10<-summary(mod.NSDmodel2Stage.10)
# 
# pred.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),3],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# lwrbnd.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),1],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.1<-matrix(summary.mod.NSDmodel2Stage.1$quantiles[nrow(summary.mod.NSDmodel2Stage.1$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.2<-matrix(summary.mod.NSDmodel2Stage.2$quantiles[nrow(summary.mod.NSDmodel2Stage.2$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.3<-matrix(summary.mod.NSDmodel2Stage.3$quantiles[nrow(summary.mod.NSDmodel2Stage.3$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.4<-matrix(summary.mod.NSDmodel2Stage.4$quantiles[nrow(summary.mod.NSDmodel2Stage.4$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.5<-matrix(summary.mod.NSDmodel2Stage.5$quantiles[nrow(summary.mod.NSDmodel2Stage.5$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.6<-matrix(summary.mod.NSDmodel2Stage.6$quantiles[nrow(summary.mod.NSDmodel2Stage.6$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.7<-matrix(summary.mod.NSDmodel2Stage.7$quantiles[nrow(summary.mod.NSDmodel2Stage.7$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.8<-matrix(summary.mod.NSDmodel2Stage.8$quantiles[nrow(summary.mod.NSDmodel2Stage.8$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.9<-matrix(summary.mod.NSDmodel2Stage.9$quantiles[nrow(summary.mod.NSDmodel2Stage.9$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# uprbnd.mat.mod.NSDmodel2Stage.10<-matrix(summary.mod.NSDmodel2Stage.10$quantiles[nrow(summary.mod.NSDmodel2Stage.10$quantiles)-((48*1-1):0),5],ncol=1,nrow=48)
# pred.mat.mod.NSDmodel2Stage.10locs<-cbind.data.frame(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
#                                               pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10)
# lwrbnd.mat.mod.NSDmodel2Stage.10locs<-cbind.data.frame(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
#                                                 lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10)
# uprbnd.mat.mod.NSDmodel2Stage.10locs<-cbind.data.frame(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
#                                                 uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10)

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(IS.avail.10locs[[i]]~times.avail.10locs[[i]],type="o",col="grey",pch=16,xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i),
       ylim=c(min(c(min(lwrbnd.mat.mod.NSDmodel2Stage.10locs),
                    min(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    min(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])))),
              max(c(max(uprbnd.mat.mod.NSDmodel2Stage.10locs),
                    max(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                    max(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]))))))
  lines(t(simData_sat_tur_all[which.closest.sat.10locs[i],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])~months.RS.tur.dec,col=2,pch=15,type="o")
  lines(t(simData_drone_tur_all[which.closest.drone.10locs[i],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])~months.RS.tur.dec,col=4,pch=17,type="o")
  lines(pred.mat.mod.NSDmodel2Stage.10locs[,i]~times.avail.10locs[[i]])
  lines(lwrbnd.mat.mod.NSDmodel2Stage.10locs[,i]~times.avail.10locs[[i]],lty=2)
  lines(uprbnd.mat.mod.NSDmodel2Stage.10locs[,i]~times.avail.10locs[[i]],lty=2)
}
par(mfrow=c(1,1))

# Kriging of in situ data: ####################################################################################

library(geoR)

simData.10.geodata<-vector("list",ncol(simData.10))
for(i in 1:ncol(simData.10)){
  simData.10.geodata[[i]]<-vector("list",nrow(simData.10))
  for(j in 1:nrow(simData.10)){
    simData.10.geodata[[i]][[j]]<-as.geodata(cbind.data.frame(locs.insitu.10locs[-j,],simData.10[-j,i]))
  }
}
pred.krige.bayes.1<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
lwrbnd.krige.bayes.1<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
uprbnd.krige.bayes.1<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
var.krige.bayes.1<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
for(i in 1:ncol(simData.10)){
  for(j in 1:nrow(simData.10)){
    k1.temp<-krige.bayes(simData.10.geodata[[i]][[j]],locations = locs.insitu.10locs[j,])
    pred.krige.bayes.1[j,i]<-k1.temp$predictive$mean.simulations
    lwrbnd.krige.bayes.1[j,i]<-quantile(k1.temp$predictive$simulations,0.025)
    uprbnd.krige.bayes.1[j,i]<-quantile(k1.temp$predictive$simulations,0.975)
    var.krige.bayes.1[j,i]<-k1.temp$predictive$variance
  }
}

plot(pred.krige.bayes.1,simData.10);abline(0,1)

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(simData.10[i,]~times.avail.10locs[[i]],ylim=c(min(lwrbnd.krige.bayes.1[i,]),max(uprbnd.krige.bayes.1[i,])),pch=16,col="grey",
       xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i))
  lines(pred.krige.bayes.1[i,]~times.avail.10locs[[i]])
  lines(lwrbnd.krige.bayes.1[i,]~times.avail.10locs[[i]],lty=2)
  lines(uprbnd.krige.bayes.1[i,]~times.avail.10locs[[i]],lty=2)
}
par(mfrow=c(1,1),mar=c(4,4.5,1.5,0.5))

# ... but need to remove the trend and fit to the residuals:

lm.list<-vector("list",48)
summary.lm.list<-vector("list",48)
res.list<-vector("list",48)
pred.mat<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
for(i in 1:48){
  lm.list[[i]]<-vector("list",10)
  summary.lm.list[[i]]<-vector("list",10)
  res.list[[i]]<-vector("list",10)
  for(j in 1:10){
    y.temp<-simData.10[-j,i]
    lon.temp<-locs.insitu.10locs[-j,1]
    lat.temp<-locs.insitu.10locs[-j,2]
    lm.list[[i]][[j]]<-lm(y.temp~lon.temp+lat.temp)
    summary.lm.list[[i]][[j]]<-summary(lm.list[[i]][[j]])
    res.list[[i]][[j]]<-resid(lm.list[[i]][[j]])
    pred.mat[j,i]<-predict(lm.list[[i]][[j]],newdata = data.frame(lon.temp=locs.insitu.10locs[j,1],lat.temp=locs.insitu.10locs[j,2]))
  }
}

res.list.geodata<-vector("list",48)
for(i in 1:48){
  res.list.geodata[[i]]<-vector("list",10)
  for(j in 1:10){
    res.list.geodata[[i]][[j]]<-as.geodata(cbind.data.frame(locs.insitu.10locs[-j,],res.list[[i]][[j]]))
  }
}

pred.krige.bayes.2<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
lwrbnd.krige.bayes.2<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
uprbnd.krige.bayes.2<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
var.krige.bayes.2<-matrix(nrow=nrow(simData.10),ncol=ncol(simData.10))
for(i in 1:ncol(simData.10)){
  for(j in 1:nrow(simData.10)){
    k1.temp<-krige.bayes(res.list.geodata[[i]][[j]],locations = locs.insitu.10locs[j,])
    pred.krige.bayes.2[j,i]<-k1.temp$predictive$mean.simulations+pred.mat[j,i]
    lwrbnd.krige.bayes.2[j,i]<-quantile(k1.temp$predictive$simulations,0.025)+pred.mat[j,i]
    uprbnd.krige.bayes.2[j,i]<-quantile(k1.temp$predictive$simulations,0.975)+pred.mat[j,i]
    var.krige.bayes.2[j,i]<-k1.temp$predictive$variance
  }
}

plot(pred.krige.bayes.2,simData.10);abline(0,1)

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(simData.10[i,]~times.avail.10locs[[i]],ylim=c(min(lwrbnd.krige.bayes.2[i,]),max(uprbnd.krige.bayes.2[i,])),pch=16,col="grey",
       xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i))
  lines(pred.krige.bayes.2[i,]~times.avail.10locs[[i]])
  lines(lwrbnd.krige.bayes.2[i,]~times.avail.10locs[[i]],lty=2)
  lines(uprbnd.krige.bayes.2[i,]~times.avail.10locs[[i]],lty=2)
}
par(mfrow=c(1,1),mar=c(4,4.5,1.5,0.5))

## Giraldo et al. (2011) Ordinary kriging for functional valued data: ################################################################################

library(fda)
library(geoR)

# source('C:/Users/craig/OneDrive - University of Glasgow/RamgangaData/3. OKFD_CANADIAN_MARITIMES/okfd.R')
source('C:/Users/craig/OneDrive - University of Glasgow/RamgangaData/3. OKFD_CANADIAN_MARITIMES/okfd_CW.R')
source('C:/Users/craig/OneDrive - University of Glasgow/RamgangaData/UKFD_CANADA/ukfd_CW.R')

pred.mat.okfd<-matrix(nrow=48,ncol=10)
for(i in 1:10){
  pred.mat.okfd[,i]<-okfd(as.matrix(locs.insitu.10locs)[-i,],t(simData.10)[,-i],times.avail.10locs[[1]],3,t(as.matrix(locs.insitu.10locs)[i,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),period=1)$krig.new.data
}

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(simData.10[i,]~times.avail.10locs[[i]],ylim=c(-2,4),pch=16,col="grey",
       xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i))
  lines(pred.mat.okfd[,i]~times.avail.10locs[[i]])
}
par(mfrow=c(1,1),mar=c(4,4.5,1.5,0.5))

rmse(simData.10,t(pred.mat.okfd))
var(c(pred.mat.okfd))
# no CIs, since not Bayesian.

# Bspline:

pred.mat.okfd.bsp<-matrix(nrow=48,ncol=10)
for(i in 1:10){
  pred.mat.okfd.bsp[,i]<-okfd(as.matrix(locs.insitu.10locs)[-i,],t(simData.10)[,-i],times.avail.10locs[[1]],14,t(as.matrix(locs.insitu.10locs)[i,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),period=1,basis.type = "bspline")$krig.new.data
}

par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
for(i in 1:10){
  plot(simData.10[i,]~times.avail.10locs[[i]],ylim=c(-2,4),pch=16,col="grey",
       xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i))
  lines(pred.mat.okfd.bsp[,i]~times.avail.10locs[[i]])
}
par(mfrow=c(1,1),mar=c(4,4.5,1.5,0.5))

rmse(simData.10,t(pred.mat.okfd.bsp))
var(c(pred.mat.okfd.bsp))

## Ordinary kriging for functional valued data accounting for the trend: #####################################################################

constantfd <- fd(matrix(1,1,9), create.constant.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]]))))
xfdlist <- vector("list",10)
for(i in 1:10){
  xfdlist[[i]]<-vector("list",3)
  xfdlist[[i]][[1]] <- constantfd
  xfdlist[[i]][[2]] <- locs.insitu.10locs[-i,1]
  xfdlist[[i]][[3]] <- locs.insitu.10locs[-i,2]
}

time.mat<-matrix(unlist(times.avail.10locs[1:9]),nrow=48,ncol=9)

# Fourier basis:

seq.Fourier<-seq(3,19,by=2)

# Fourier basis, OKFD:

simDatafd.F.okfd<-vector("list",length(seq.Fourier))
betalist.F.okfd<-vector("list",length(seq.Fourier))
regression.F.okfd<-vector("list",length(seq.Fourier))
betas.F.okfd<-vector("list",length(seq.Fourier))
yhatmat.F.okfd<-vector("list",length(seq.Fourier))
ymat.F.okfd<-vector("list",length(seq.Fourier))
res.F.okfd<-vector("list",length(seq.Fourier))
pred.mat.res.F.okfd<-vector("list",length(seq.Fourier))
pred.mat.res.orig.F.okfd<-vector("list",length(seq.Fourier))
for(i in 1:length(seq.Fourier)){
  simDatafd.F.okfd[[i]]<-vector("list",10)
  for(j in 1:10){
    simDatafd.F.okfd[[i]][[j]]<-Data2fd(times.avail.10locs[[1]], t(simData.10[-j,]), create.fourier.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])), seq.Fourier[i], 1))
  }
  betalist.F.okfd[[i]]<-vector("list",3)
  for(j in 1:3){
    betalist.F.okfd[[i]][[j]]<-fdPar(fd(matrix(0,seq.Fourier[i],1),create.fourier.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),nbasis=seq.Fourier[i],period = 1)),Lfdobj = int2Lfd(0),0)
  }
  regression.F.okfd[[i]]<-vector("list",10)
  for(j in 1:10){
    regression.F.okfd[[i]][[j]]<-fRegress(simDatafd.F.okfd[[i]][[j]], xfdlist[[j]] ,betalist.F.okfd[[i]])
  }
  betas.F.okfd[[i]] <- vector("list",10)
  for(j in 1:10){
    betas.F.okfd[[i]][[j]]<-regression.F.okfd[[i]][[j]]$betaestlist
  }
  yhatmat.F.okfd[[i]]<-vector("list",10)
  ymat.F.okfd[[i]]<-vector("list",10)
  res.F.okfd[[i]]<-vector("list",10)
  for(j in 1:10){
    yhatmat.F.okfd[[i]][[j]]<-eval.fd(time.mat, regression.F.okfd[[i]][[j]]$yhatfdobj$fd)
    ymat.F.okfd[[i]][[j]]<-eval.fd(time.mat, simDatafd.F.okfd[[i]][[j]])
    res.F.okfd[[i]][[j]]<-ymat.F.okfd[[i]][[j]] - yhatmat.F.okfd[[i]][[j]]
  }
  pred.mat.res.F.okfd[[i]]<-matrix(nrow=48,ncol=10)
  pred.mat.res.orig.F.okfd[[i]]<-matrix(nrow=48,ncol=10)
  for(j in 1:10){
    pred.mat.res.F.okfd[[i]][,j]<-okfd(as.matrix(locs.insitu.10locs)[-j,],res.F.okfd[[i]][[j]],times.avail.10locs[[1]],seq.Fourier[i],t(as.matrix(locs.insitu.10locs)[j,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),period=1)$krig.new.data
    pred.mat.res.orig.F.okfd[[i]][,j]<-pred.mat.res.F.okfd[[i]][,j]+eval.fd(times.avail.10locs[[1]],betas.F.okfd[[i]][[j]][[1]][1]$fd+locs.insitu.10locs[j,1]*betas.F.okfd[[i]][[j]][[2]][1]$fd+locs.insitu.10locs[j,2]*betas.F.okfd[[i]][[j]][[3]][1]$fd)
  }
}

rmse.vec.Fourier.okfd<-numeric(length(seq.Fourier))
for(i in 1:length(seq.Fourier)){
  rmse.vec.Fourier.okfd[i]<-rmse(simData.10,t(pred.mat.res.orig.F.okfd[[i]]))
}
plot(seq.Fourier,rmse.vec.Fourier.okfd,type="b")
seq.Fourier[which.min(rmse.vec.Fourier.okfd)] # min at 15.

# Fourier basis, UKFD:

simDatafd.F.ukfd<-vector("list",length(seq.Fourier))
betalist.F.ukfd<-vector("list",length(seq.Fourier))
regression.F.ukfd<-vector("list",length(seq.Fourier))
betas.F.ukfd<-vector("list",length(seq.Fourier))
yhatmat.F.ukfd<-vector("list",length(seq.Fourier))
ymat.F.ukfd<-vector("list",length(seq.Fourier))
res.F.ukfd<-vector("list",length(seq.Fourier))
pred.mat.res.F.ukfd<-vector("list",length(seq.Fourier))
pred.mat.res.orig.F.ukfd<-vector("list",length(seq.Fourier))
for(i in 1:length(seq.Fourier)){
  simDatafd.F.ukfd[[i]]<-vector("list",10)
  for(j in 1:10){
    simDatafd.F.ukfd[[i]][[j]]<-Data2fd(times.avail.10locs[[1]], t(simData.10[-j,]), create.fourier.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])), seq.Fourier[i], 1))
  }
  betalist.F.ukfd[[i]]<-vector("list",3)
  for(j in 1:3){
    betalist.F.ukfd[[i]][[j]]<-fdPar(fd(matrix(0,seq.Fourier[i],1),create.fourier.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),nbasis=seq.Fourier[i],period = 1)),Lfdobj = int2Lfd(0),0)
  }
  regression.F.ukfd[[i]]<-vector("list",10)
  for(j in 1:10){
    regression.F.ukfd[[i]][[j]]<-fRegress(simDatafd.F.ukfd[[i]][[j]], xfdlist[[j]] ,betalist.F.ukfd[[i]])
  }
  betas.F.ukfd[[i]] <- vector("list",10)
  for(j in 1:10){
    betas.F.ukfd[[i]][[j]]<-regression.F.ukfd[[i]][[j]]$betaestlist
  }
  yhatmat.F.ukfd[[i]]<-vector("list",10)
  ymat.F.ukfd[[i]]<-vector("list",10)
  res.F.ukfd[[i]]<-vector("list",10)
  for(j in 1:10){
    yhatmat.F.ukfd[[i]][[j]]<-eval.fd(time.mat, regression.F.ukfd[[i]][[j]]$yhatfdobj$fd)
    ymat.F.ukfd[[i]][[j]]<-eval.fd(time.mat, simDatafd.F.ukfd[[i]][[j]])
    res.F.ukfd[[i]][[j]]<-ymat.F.ukfd[[i]][[j]] - yhatmat.F.ukfd[[i]][[j]]
  }
  pred.mat.res.F.ukfd[[i]]<-matrix(nrow=48,ncol=10)
  pred.mat.res.orig.F.ukfd[[i]]<-matrix(nrow=48,ncol=10)
  for(j in 1:10){
    pred.mat.res.F.ukfd[[i]][,j]<-ukfd(as.matrix(locs.insitu.10locs)[-j,],t(simData.10[-j,]),res.F.ukfd[[i]][[j]],times.avail.10locs[[1]],seq.Fourier[i],t(as.matrix(locs.insitu.10locs)[j,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),period=1)$krig.new.data
    pred.mat.res.orig.F.ukfd[[i]][,j]<-pred.mat.res.F.ukfd[[i]][,j]
  }
}

rmse.vec.Fourier.ukfd<-numeric(length(seq.Fourier))
for(i in 1:length(seq.Fourier)){
  rmse.vec.Fourier.ukfd[i]<-rmse(simData.10,t(pred.mat.res.orig.F.ukfd[[i]]))
}
plot(seq.Fourier,rmse.vec.Fourier.ukfd,type="b")
seq.Fourier[which.min(rmse.vec.Fourier.ukfd)] # min at 17.

#

# B-spline basis:

seq.Bspline<-5:50

# B-spline basis, OKFD:

simDatafd.bsp.okfd<-vector("list",length(seq.Bspline))
betalist.bsp.okfd<-vector("list",length(seq.Bspline))
regression.bsp.okfd<-vector("list",length(seq.Bspline))
betas.bsp.okfd<-vector("list",length(seq.Bspline))
yhatmat.bsp.okfd<-vector("list",length(seq.Bspline))
ymat.bsp.okfd<-vector("list",length(seq.Bspline))
res.bsp.okfd<-vector("list",length(seq.Bspline))
pred.mat.res.bsp.okfd<-vector("list",length(seq.Bspline))
pred.mat.res.orig.bsp.okfd<-vector("list",length(seq.Bspline))
for(i in 1:length(seq.Bspline)){
  simDatafd.bsp.okfd[[i]]<-vector("list",10)
  for(j in 1:10){
    simDatafd.bsp.okfd[[i]][[j]]<-Data2fd(times.avail.10locs[[1]], t(simData.10[-j,]), create.bspline.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])), seq.Bspline[i], 1))
  }
  betalist.bsp.okfd[[i]]<-vector("list",3)
  for(j in 1:3){
    betalist.bsp.okfd[[i]][[j]]<-fdPar(fd(matrix(0,seq.Bspline[i],1),create.bspline.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),nbasis=seq.Bspline[i])),Lfdobj = int2Lfd(0),0)
  }
  regression.bsp.okfd[[i]]<-vector("list",10)
  for(j in 1:10){
    tryCatch({regression.bsp.okfd[[i]][[j]]<-fRegress(simDatafd.bsp.okfd[[i]][[j]], xfdlist[[j]] ,betalist.bsp.okfd[[i]])},error=function(e){e})
  }
  betas.bsp.okfd[[i]] <- vector("list",10)
  for(j in 1:10){
    tryCatch({betas.bsp.okfd[[i]][[j]]<-regression.bsp.okfd[[i]][[j]]$betaestlist},error=function(e){e})
  }
  yhatmat.bsp.okfd[[i]]<-vector("list",10)
  ymat.bsp.okfd[[i]]<-vector("list",10)
  res.bsp.okfd[[i]]<-vector("list",10)
  for(j in 1:10){
    tryCatch({yhatmat.bsp.okfd[[i]][[j]]<-eval.fd(time.mat, regression.bsp.okfd[[i]][[j]]$yhatfdobj$fd)},error=function(e){e})
    tryCatch({ymat.bsp.okfd[[i]][[j]]<-eval.fd(time.mat, simDatafd.bsp.okfd[[i]][[j]])},error=function(e){e})
    tryCatch({res.bsp.okfd[[i]][[j]]<-ymat.bsp.okfd[[i]][[j]] - yhatmat.bsp.okfd[[i]][[j]]},error=function(e){e})
  }
  pred.mat.res.bsp.okfd[[i]]<-matrix(nrow=48,ncol=10)
  pred.mat.res.orig.bsp.okfd[[i]]<-matrix(nrow=48,ncol=10)
  for(j in 1:10){
    tryCatch({pred.mat.res.bsp.okfd[[i]][,j]<-okfd(as.matrix(locs.insitu.10locs)[-j,],res.bsp.okfd[[i]][[j]],times.avail.10locs[[1]],seq.Bspline[i],t(as.matrix(locs.insitu.10locs)[j,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),basis.type = "bspline")$krig.new.data},error=function(e){e})
    tryCatch({pred.mat.res.orig.bsp.okfd[[i]][,j]<-pred.mat.res.bsp.okfd[[i]][,j]+eval.fd(times.avail.10locs[[1]],betas.bsp.okfd[[i]][[j]][[1]][1]$fd+locs.insitu.10locs[j,1]*betas.bsp.okfd[[i]][[j]][[2]][1]$fd+locs.insitu.10locs[j,2]*betas.bsp.okfd[[i]][[j]][[3]][1]$fd)},error=function(e){e})
  }
}

rmse.vec.Bspline.okfd<-numeric(length(seq.Bspline))
for(i in 1:length(seq.Bspline)){
  rmse.vec.Bspline.okfd[i]<-rmse(simData.10,t(pred.mat.res.orig.bsp.okfd[[i]]))
}
plot(seq.Bspline,rmse.vec.Bspline.okfd,type="b")
seq.Bspline[which.min(rmse.vec.Bspline.okfd)] # min at 40.

# B-spline basis, UKFD:

simDatafd.bsp.ukfd<-vector("list",length(seq.Bspline))
betalist.bsp.ukfd<-vector("list",length(seq.Bspline))
regression.bsp.ukfd<-vector("list",length(seq.Bspline))
betas.bsp.ukfd<-vector("list",length(seq.Bspline))
yhatmat.bsp.ukfd<-vector("list",length(seq.Bspline))
ymat.bsp.ukfd<-vector("list",length(seq.Bspline))
res.bsp.ukfd<-vector("list",length(seq.Bspline))
pred.mat.res.bsp.ukfd<-vector("list",length(seq.Bspline))
pred.mat.res.orig.bsp.ukfd<-vector("list",length(seq.Bspline))
for(i in 1:length(seq.Bspline)){
  simDatafd.bsp.ukfd[[i]]<-vector("list",10)
  for(j in 1:10){
    simDatafd.bsp.ukfd[[i]][[j]]<-Data2fd(times.avail.10locs[[1]], t(simData.10[-j,]), create.bspline.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])), seq.Bspline[i], 1))
  }
  betalist.bsp.ukfd[[i]]<-vector("list",3)
  for(j in 1:3){
    betalist.bsp.ukfd[[i]][[j]]<-fdPar(fd(matrix(0,seq.Bspline[i],1),create.bspline.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),nbasis=seq.Bspline[i])),Lfdobj = int2Lfd(0),0)
  }
  regression.bsp.ukfd[[i]]<-vector("list",10)
  for(j in 1:10){
    tryCatch({regression.bsp.ukfd[[i]][[j]]<-fRegress(simDatafd.bsp.ukfd[[i]][[j]], xfdlist[[j]] ,betalist.bsp.ukfd[[i]])},error=function(e){e})
  }
  betas.bsp.ukfd[[i]] <- vector("list",10)
  for(j in 1:10){
    tryCatch({betas.bsp.ukfd[[i]][[j]]<-regression.bsp.ukfd[[i]][[j]]$betaestlist},error=function(e){e})
  }
  yhatmat.bsp.ukfd[[i]]<-vector("list",10)
  ymat.bsp.ukfd[[i]]<-vector("list",10)
  res.bsp.ukfd[[i]]<-vector("list",10)
  for(j in 1:10){
    tryCatch({yhatmat.bsp.ukfd[[i]][[j]]<-eval.fd(time.mat, regression.bsp.ukfd[[i]][[j]]$yhatfdobj$fd)},error=function(e){e})
    tryCatch({ymat.bsp.ukfd[[i]][[j]]<-eval.fd(time.mat, simDatafd.bsp.ukfd[[i]][[j]])},error=function(e){e})
    tryCatch({res.bsp.ukfd[[i]][[j]]<-ymat.bsp.ukfd[[i]][[j]] - yhatmat.bsp.ukfd[[i]][[j]]},error=function(e){e})
  }
  pred.mat.res.bsp.ukfd[[i]]<-matrix(nrow=48,ncol=10)
  pred.mat.res.orig.bsp.ukfd[[i]]<-matrix(nrow=48,ncol=10)
  for(j in 1:10){
    tryCatch({pred.mat.res.bsp.ukfd[[i]][,j]<-ukfd(as.matrix(locs.insitu.10locs)[-j,],t(simData.10[-j,]),res.bsp.ukfd[[i]][[j]],times.avail.10locs[[1]],seq.Bspline[i],t(as.matrix(locs.insitu.10locs)[j,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),basis.type = "bspline")$krig.new.data},error=function(e){e})
    tryCatch({pred.mat.res.orig.bsp.ukfd[[i]][,j]<-pred.mat.res.bsp.ukfd[[i]][,j]},error=function(e){e})
  }
}

rmse.vec.Bspline.ukfd<-numeric(length(seq.Bspline))
for(i in 1:length(seq.Bspline)){
  rmse.vec.Bspline.ukfd[i]<-rmse(simData.10,t(pred.mat.res.orig.bsp.ukfd[[i]]))
}
plot(seq.Bspline,rmse.vec.Bspline.ukfd,type="b")
seq.Bspline[which.min(rmse.vec.Bspline.ukfd)] # min at 49.

#

# # simDatafd <- Data2fd(times.avail.10locs[[1]], t(simData.10), create.fourier.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])), 3, 1))
# simDatafd <- vector("list",10)
# for(i in 1:10){
#   simDatafd[[i]]<-Data2fd(times.avail.10locs[[1]], t(simData.10[-i,]), create.fourier.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])), 3, 1))
# }
# 
# # constantfd <- fd(matrix(1,1,10), create.constant.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]]))))
# # xfdlist <- vector("list",3)
# # xfdlist[[1]] <- constantfd
# # xfdlist[[2]] <- locs.insitu.10locs[,1]
# # xfdlist[[3]] <- locs.insitu.10locs[,2]
# constantfd <- fd(matrix(1,1,9), create.constant.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]]))))
# xfdlist <- vector("list",10)
# for(i in 1:10){
#   xfdlist[[i]]<-vector("list",3)
#   xfdlist[[i]][[1]] <- constantfd
#   xfdlist[[i]][[2]] <- locs.insitu.10locs[-i,1]
#   xfdlist[[i]][[3]] <- locs.insitu.10locs[-i,2]
# }
# 
# betalist<-vector("list",3)
# for(i in 1:3){betalist[[i]]<-fdPar(fd(matrix(0,3,1),create.fourier.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),nbasis=3,period = 1)),Lfdobj = int2Lfd(0),0)}
# 
# # regression<-fRegress(simDatafd, xfdlist ,betalist)
# regression<-vector("list",10)
# for(i in 1:10){
#   regression[[i]]<-fRegress(simDatafd[[i]], xfdlist[[i]] ,betalist)
# }
# 
# # betas <- regression$betaestlist
# # par(mfrow=c(1,3))
# # for (j in 1:3) {
# #   betaestParfdj <- betas[[j]]
# #   plot(betaestParfdj$fd, xlab="Day", ylab="Estimated Parameter")
# # }
# betas <- vector("list",10)
# for(i in 1:10){
#   betas[[i]]<-regression[[i]]$betaestlist
# }
# par(mfrow=c(1,3))
# for(i in 1:10){
#   plot(betas[[i]][[1]]$fd, xlab="Day", ylab="Constant")
#   plot(betas[[i]][[2]]$fd, xlab="Day", ylab="Beta1")
#   plot(betas[[i]][[3]]$fd, xlab="Day", ylab="Beta2")
# }
# 
# names(regression[[1]]$yhatfdobj)
# par(mfrow=c(1,2))
# plot(simDatafd[[1]])
# plot(regression[[1]]$yhatfdobj$fd)
# 
# # time.mat<-matrix(unlist(times.avail.10locs),nrow=48,ncol=10)
# time.mat<-matrix(unlist(times.avail.10locs[1:9]),nrow=48,ncol=9)
# 
# # yhatmat    <- eval.fd(time.mat, regression$yhatfdobj$fd)
# # ymat       <- eval.fd(time.mat, simDatafd)
# # # res <- ymat[,1:35] - yhatmat[,1:35]
# # res <- ymat - yhatmat
# # matplot(time.mat,res, xlab="Day", ylab="Residual", type="l")
# # dimnames(res) <- list(NULL,paste0("Location ",1:10))
# # summary(res)
# 
# yhatmat<-vector("list",10)
# ymat<-vector("list",10)
# res<-vector("list",10)
# for(i in 1:10){
#   yhatmat[[i]]<-eval.fd(time.mat, regression[[i]]$yhatfdobj$fd)
#   ymat[[i]]<-eval.fd(time.mat, simDatafd[[i]])
#   res[[i]]<-ymat[[i]] - yhatmat[[i]]
# }
# 
# matplot(time.mat,res[[1]], xlab="Day", ylab="Residual", type="l")
# for(i in 1:10){
#   dimnames(res[[i]]) <- list(NULL,paste0("Location ",1:9))
# }
# summary(res[[1]])
# 
# # OKFD of residuals:
# 
# pred.mat.okfd.res<-matrix(nrow=48,ncol=10)
# for(i in 1:10){
#   pred.mat.okfd.res[,i]<-okfd(as.matrix(locs.insitu.10locs)[-i,],res[[i]],times.avail.10locs[[1]],3,t(as.matrix(locs.insitu.10locs)[i,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),period=1)$krig.new.data
# }
# 
# pred.mat.okfd.res.orig<-matrix(nrow=48,ncol=10)
# for(i in 1:10){
#   pred.mat.okfd.res.orig[,i]<-pred.mat.okfd.res[,i]+eval.fd(times.avail.10locs[[1]],betas[[i]][[1]][1]$fd+locs.insitu.10locs[i,1]*betas[[i]][[2]][1]$fd+locs.insitu.10locs[i,2]*betas[[i]][[3]][1]$fd)
# }
# 
# par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
# for(i in 1:10){
#   plot(simData.10[i,]~times.avail.10locs[[i]],ylim=c(-2,4),pch=16,col="grey",
#        xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i))
#   lines(pred.mat.okfd.res.orig[,i]~times.avail.10locs[[i]])
# }
# par(mfrow=c(1,1),mar=c(4,4.5,1.5,0.5))
# 
# rmse(simData.10,t(pred.mat.okfd.res.orig))
# var(c(pred.mat.okfd.res.orig))
# 
# # Very low RMSE - predictions are very close to the in situ data, mostly due to the functional regression part (with lon and lat as the covariates).
# 
# # UKFD of data:
# 
# source('C:/Users/craig/OneDrive - University of Glasgow/RamgangaData/UKFD_CANADA/ukfd_CW.R')
# 
# pred.mat.ukfd.res<-matrix(nrow=48,ncol=10)
# for(i in 1:10){
#   pred.mat.ukfd.res[,i]<-ukfd(as.matrix(locs.insitu.10locs)[-i,],t(simData.10)[,-i],res[[i]],times.avail.10locs[[1]],3,t(as.matrix(locs.insitu.10locs)[i,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),period=1)$krig.new.data
# }
# 
# pred.mat.ukfd.res.orig<-matrix(nrow=48,ncol=10)
# for(i in 1:10){
#   pred.mat.ukfd.res.orig[,i]<-pred.mat.ukfd.res[,i]#+eval.fd(times.avail.10locs[[1]],betas[[i]][[1]][1]$fd+locs.insitu.10locs[i,1]*betas[[i]][[2]][1]$fd+locs.insitu.10locs[i,2]*betas[[i]][[3]][1]$fd)
# }
# 
# par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
# for(i in 1:10){
#   plot(simData.10[i,]~times.avail.10locs[[i]],ylim=c(-2,4),pch=16,col="grey",
#        xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i))
#   lines(pred.mat.ukfd.res.orig[,i]~times.avail.10locs[[i]])
# }
# par(mfrow=c(1,1),mar=c(4,4.5,1.5,0.5))
# 
# rmse(simData.10,t(pred.mat.ukfd.res.orig))
# var(c(pred.mat.ukfd.res.orig))
# 
# # Very low RMSE - predictions are very close to the in situ data.
# 
# ## Using B-spline basis: ##
# 
# simDatafd.bsp <- vector("list",10)
# for(i in 1:10){
#   simDatafd.bsp[[i]]<-Data2fd(times.avail.10locs[[1]], t(simData.10[-i,]), create.bspline.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])), 14))
# }
# 
# betalist.bsp<-vector("list",3)
# for(i in 1:3){betalist.bsp[[i]]<-fdPar(fd(matrix(0,14,1),create.bspline.basis(c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),nbasis=14)),Lfdobj = int2Lfd(0),0)}
# 
# regression.bsp<-vector("list",10)
# for(i in 1:10){
#   regression.bsp[[i]]<-fRegress(simDatafd.bsp[[i]], xfdlist[[i]] ,betalist.bsp)
# }
# 
# betas.bsp <- vector("list",10)
# for(i in 1:10){
#   betas.bsp[[i]]<-regression.bsp[[i]]$betaestlist
# }
# par(mfrow=c(1,3))
# for(i in 1:10){
#   plot(betas.bsp[[i]][[1]]$fd, xlab="Day", ylab="Constant")
#   plot(betas.bsp[[i]][[2]]$fd, xlab="Day", ylab="Beta1")
#   plot(betas.bsp[[i]][[3]]$fd, xlab="Day", ylab="Beta2")
# }
# 
# names(regression.bsp[[1]]$yhatfdobj)
# par(mfrow=c(1,2))
# plot(simDatafd.bsp[[1]])
# plot(regression.bsp[[1]]$yhatfdobj$fd)
# 
# yhatmat.bsp<-vector("list",10)
# ymat.bsp<-vector("list",10)
# res.bsp<-vector("list",10)
# for(i in 1:10){
#   yhatmat.bsp[[i]]<-eval.fd(time.mat, regression.bsp[[i]]$yhatfdobj$fd)
#   ymat.bsp[[i]]<-eval.fd(time.mat, simDatafd.bsp[[i]])
#   res.bsp[[i]]<-ymat.bsp[[i]] - yhatmat.bsp[[i]]
# }
# 
# matplot(time.mat,res.bsp[[1]], xlab="Day", ylab="Residual", type="l")
# for(i in 1:10){
#   dimnames(res.bsp[[i]]) <- list(NULL,paste0("Location ",1:9))
# }
# summary(res.bsp[[1]])
# 
# # OKFD of residuals, Bspline basis:
# 
# pred.mat.okfd.res.bsp<-matrix(nrow=48,ncol=10)
# for(i in 1:10){
#   pred.mat.okfd.res.bsp[,i]<-okfd(as.matrix(locs.insitu.10locs)[-i,],res[[i]],times.avail.10locs[[1]],14,t(as.matrix(locs.insitu.10locs)[i,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),period=1,basis.type = "bspline")$krig.new.data
# }
# 
# pred.mat.okfd.res.bsp.orig<-matrix(nrow=48,ncol=10)
# for(i in 1:10){
#   pred.mat.okfd.res.bsp.orig[,i]<-pred.mat.okfd.res.bsp[,i]+eval.fd(times.avail.10locs[[1]],betas.bsp[[i]][[1]][1]$fd+locs.insitu.10locs[i,1]*betas.bsp[[i]][[2]][1]$fd+locs.insitu.10locs[i,2]*betas.bsp[[i]][[3]][1]$fd)
# }
# 
# par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
# for(i in 1:10){
#   plot(simData.10[i,]~times.avail.10locs[[i]],ylim=c(-2,4),pch=16,col="grey",
#        xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i))
#   lines(pred.mat.okfd.res.bsp.orig[,i]~times.avail.10locs[[i]])
# }
# par(mfrow=c(1,1),mar=c(4,4.5,1.5,0.5))
# 
# rmse(simData.10,t(pred.mat.okfd.res.bsp.orig))
# var(c(pred.mat.okfd.res.bsp.orig))
# 
# # Very low RMSE - predictions are very close to the in situ data, mostly due to the functional regression part (with lon and lat as the covariates).
# 
# # UKFD of data, Bspline basis:
# 
# source('C:/Users/craig/OneDrive - University of Glasgow/RamgangaData/UKFD_CANADA/ukfd_CW.R')
# 
# pred.mat.ukfd.res.bsp<-matrix(nrow=48,ncol=10)
# for(i in 1:10){
#   pred.mat.ukfd.res.bsp[,i]<-ukfd(as.matrix(locs.insitu.10locs)[-i,],t(simData.10)[,-i],res.bsp[[i]],times.avail.10locs[[1]],14,t(as.matrix(locs.insitu.10locs)[i,]),range = c(min(times.avail.10locs[[1]]),max(times.avail.10locs[[1]])),period=1,basis.type = "bspline")$krig.new.data
# }
# 
# pred.mat.ukfd.res.bsp.orig<-matrix(nrow=48,ncol=10)
# for(i in 1:10){
#   pred.mat.ukfd.res.bsp.orig[,i]<-pred.mat.ukfd.res.bsp[,i]
# }
# 
# par(mfrow=c(4,3),mar=c(4,4.5,1.5,0.5))
# for(i in 1:10){
#   plot(simData.10[i,]~times.avail.10locs[[i]],ylim=c(-2,4),pch=16,col="grey",
#        xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i))
#   lines(pred.mat.ukfd.res.bsp.orig[,i]~times.avail.10locs[[i]])
# }
# par(mfrow=c(1,1),mar=c(4,4.5,1.5,0.5))
# 
# rmse(simData.10,t(pred.mat.ukfd.res.bsp.orig))
# var(c(pred.mat.ukfd.res.bsp.orig))
# 
# # Very low RMSE - predictions are very close to the in situ data.


## comparison of five models fitted so far: ##########################################################################################################

# RMSE:

rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
                                      pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10)))
rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDsat.1,pred.mat.mod.NSDsat.2,pred.mat.mod.NSDsat.3,pred.mat.mod.NSDsat.4,pred.mat.mod.NSDsat.5,
                                      pred.mat.mod.NSDsat.6,pred.mat.mod.NSDsat.7,pred.mat.mod.NSDsat.8,pred.mat.mod.NSDsat.9,pred.mat.mod.NSDsat.10)))
rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDdrone.1,pred.mat.mod.NSDdrone.2,pred.mat.mod.NSDdrone.3,pred.mat.mod.NSDdrone.4,pred.mat.mod.NSDdrone.5,
                                      pred.mat.mod.NSDdrone.6,pred.mat.mod.NSDdrone.7,pred.mat.mod.NSDdrone.8,pred.mat.mod.NSDdrone.9,pred.mat.mod.NSDdrone.10)))
rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSD2stagePart2.1,pred.mat.mod.NSD2stagePart2.2,pred.mat.mod.NSD2stagePart2.3,pred.mat.mod.NSD2stagePart2.4,pred.mat.mod.NSD2stagePart2.5,
                                      pred.mat.mod.NSD2stagePart2.6,pred.mat.mod.NSD2stagePart2.7,pred.mat.mod.NSD2stagePart2.8,pred.mat.mod.NSD2stagePart2.9,pred.mat.mod.NSD2stagePart2.10)))
rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
                                      pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10)))
rmse(simData.10,pred.krige.bayes.1)
rmse(simData.10,pred.krige.bayes.2)

# Variance:

var(unlist(c(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
             pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10)))
var(unlist(c(pred.mat.mod.NSDsat.1,pred.mat.mod.NSDsat.2,pred.mat.mod.NSDsat.3,pred.mat.mod.NSDsat.4,pred.mat.mod.NSDsat.5,
             pred.mat.mod.NSDsat.6,pred.mat.mod.NSDsat.7,pred.mat.mod.NSDsat.8,pred.mat.mod.NSDsat.9,pred.mat.mod.NSDsat.10)))
var(unlist(c(pred.mat.mod.NSDdrone.1,pred.mat.mod.NSDdrone.2,pred.mat.mod.NSDdrone.3,pred.mat.mod.NSDdrone.4,pred.mat.mod.NSDdrone.5,
             pred.mat.mod.NSDdrone.6,pred.mat.mod.NSDdrone.7,pred.mat.mod.NSDdrone.8,pred.mat.mod.NSDdrone.9,pred.mat.mod.NSDdrone.10)))
var(unlist(c(pred.mat.mod.NSD2stagePart2.1,pred.mat.mod.NSD2stagePart2.2,pred.mat.mod.NSD2stagePart2.3,pred.mat.mod.NSD2stagePart2.4,pred.mat.mod.NSD2stagePart2.5,
             pred.mat.mod.NSD2stagePart2.6,pred.mat.mod.NSD2stagePart2.7,pred.mat.mod.NSD2stagePart2.8,pred.mat.mod.NSD2stagePart2.9,pred.mat.mod.NSD2stagePart2.10)))
var(unlist(c(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
             pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10)))
var(c(pred.krige.bayes.1))
var(c(pred.krige.bayes.2))

# Mean interval width:

mean(unlist(c(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
              uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10)) - 
       unlist(c(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
                lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10)))
mean(unlist(c(uprbnd.mat.mod.NSDsat.1,uprbnd.mat.mod.NSDsat.2,uprbnd.mat.mod.NSDsat.3,uprbnd.mat.mod.NSDsat.4,uprbnd.mat.mod.NSDsat.5,
              uprbnd.mat.mod.NSDsat.6,uprbnd.mat.mod.NSDsat.7,uprbnd.mat.mod.NSDsat.8,uprbnd.mat.mod.NSDsat.9,uprbnd.mat.mod.NSDsat.10)) - 
       unlist(c(lwrbnd.mat.mod.NSDsat.1,lwrbnd.mat.mod.NSDsat.2,lwrbnd.mat.mod.NSDsat.3,lwrbnd.mat.mod.NSDsat.4,lwrbnd.mat.mod.NSDsat.5,
                lwrbnd.mat.mod.NSDsat.6,lwrbnd.mat.mod.NSDsat.7,lwrbnd.mat.mod.NSDsat.8,lwrbnd.mat.mod.NSDsat.9,lwrbnd.mat.mod.NSDsat.10)))
mean(unlist(c(uprbnd.mat.mod.NSDdrone.1,uprbnd.mat.mod.NSDdrone.2,uprbnd.mat.mod.NSDdrone.3,uprbnd.mat.mod.NSDdrone.4,uprbnd.mat.mod.NSDdrone.5,
              uprbnd.mat.mod.NSDdrone.6,uprbnd.mat.mod.NSDdrone.7,uprbnd.mat.mod.NSDdrone.8,uprbnd.mat.mod.NSDdrone.9,uprbnd.mat.mod.NSDdrone.10)) - 
       unlist(c(lwrbnd.mat.mod.NSDdrone.1,lwrbnd.mat.mod.NSDdrone.2,lwrbnd.mat.mod.NSDdrone.3,lwrbnd.mat.mod.NSDdrone.4,lwrbnd.mat.mod.NSDdrone.5,
                lwrbnd.mat.mod.NSDdrone.6,lwrbnd.mat.mod.NSDdrone.7,lwrbnd.mat.mod.NSDdrone.8,lwrbnd.mat.mod.NSDdrone.9,lwrbnd.mat.mod.NSDdrone.10)))
mean(unlist(c(uprbnd.mat.mod.NSD2stagePart2.1,uprbnd.mat.mod.NSD2stagePart2.2,uprbnd.mat.mod.NSD2stagePart2.3,uprbnd.mat.mod.NSD2stagePart2.4,uprbnd.mat.mod.NSD2stagePart2.5,
              uprbnd.mat.mod.NSD2stagePart2.6,uprbnd.mat.mod.NSD2stagePart2.7,uprbnd.mat.mod.NSD2stagePart2.8,uprbnd.mat.mod.NSD2stagePart2.9,uprbnd.mat.mod.NSD2stagePart2.10)) - 
       unlist(c(lwrbnd.mat.mod.NSD2stagePart2.1,lwrbnd.mat.mod.NSD2stagePart2.2,lwrbnd.mat.mod.NSD2stagePart2.3,lwrbnd.mat.mod.NSD2stagePart2.4,lwrbnd.mat.mod.NSD2stagePart2.5,
                lwrbnd.mat.mod.NSD2stagePart2.6,lwrbnd.mat.mod.NSD2stagePart2.7,lwrbnd.mat.mod.NSD2stagePart2.8,lwrbnd.mat.mod.NSD2stagePart2.9,lwrbnd.mat.mod.NSD2stagePart2.10)))
mean(unlist(c(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
              uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10)) - 
       unlist(c(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
                lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10)))
mean(uprbnd.krige.bayes.1-lwrbnd.krige.bayes.1)
mean(uprbnd.krige.bayes.2-lwrbnd.krige.bayes.2)

# Mean interval coverage:

mean(unlist(c(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
              uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10))>=unlist(IS.avail.10locs)&
       unlist(c(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
                lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10))<=unlist(IS.avail.10locs))
mean(unlist(c(uprbnd.mat.mod.NSDsat.1,uprbnd.mat.mod.NSDsat.2,uprbnd.mat.mod.NSDsat.3,uprbnd.mat.mod.NSDsat.4,uprbnd.mat.mod.NSDsat.5,
              uprbnd.mat.mod.NSDsat.6,uprbnd.mat.mod.NSDsat.7,uprbnd.mat.mod.NSDsat.8,uprbnd.mat.mod.NSDsat.9,uprbnd.mat.mod.NSDsat.10))>=unlist(IS.avail.10locs)&
       unlist(c(lwrbnd.mat.mod.NSDsat.1,lwrbnd.mat.mod.NSDsat.2,lwrbnd.mat.mod.NSDsat.3,lwrbnd.mat.mod.NSDsat.4,lwrbnd.mat.mod.NSDsat.5,
                lwrbnd.mat.mod.NSDsat.6,lwrbnd.mat.mod.NSDsat.7,lwrbnd.mat.mod.NSDsat.8,lwrbnd.mat.mod.NSDsat.9,lwrbnd.mat.mod.NSDsat.10))<=unlist(IS.avail.10locs))
mean(unlist(c(uprbnd.mat.mod.NSDdrone.1,uprbnd.mat.mod.NSDdrone.2,uprbnd.mat.mod.NSDdrone.3,uprbnd.mat.mod.NSDdrone.4,uprbnd.mat.mod.NSDdrone.5,
              uprbnd.mat.mod.NSDdrone.6,uprbnd.mat.mod.NSDdrone.7,uprbnd.mat.mod.NSDdrone.8,uprbnd.mat.mod.NSDdrone.9,uprbnd.mat.mod.NSDdrone.10))>=unlist(IS.avail.10locs)&
       unlist(c(lwrbnd.mat.mod.NSDdrone.1,lwrbnd.mat.mod.NSDdrone.2,lwrbnd.mat.mod.NSDdrone.3,lwrbnd.mat.mod.NSDdrone.4,lwrbnd.mat.mod.NSDdrone.5,
                lwrbnd.mat.mod.NSDdrone.6,lwrbnd.mat.mod.NSDdrone.7,lwrbnd.mat.mod.NSDdrone.8,lwrbnd.mat.mod.NSDdrone.9,lwrbnd.mat.mod.NSDdrone.10))<=unlist(IS.avail.10locs))
mean(unlist(c(uprbnd.mat.mod.NSD2stagePart2.1,uprbnd.mat.mod.NSD2stagePart2.2,uprbnd.mat.mod.NSD2stagePart2.3,uprbnd.mat.mod.NSD2stagePart2.4,uprbnd.mat.mod.NSD2stagePart2.5,
              uprbnd.mat.mod.NSD2stagePart2.6,uprbnd.mat.mod.NSD2stagePart2.7,uprbnd.mat.mod.NSD2stagePart2.8,uprbnd.mat.mod.NSD2stagePart2.9,uprbnd.mat.mod.NSD2stagePart2.10))>=unlist(IS.avail.10locs)&
       unlist(c(lwrbnd.mat.mod.NSD2stagePart2.1,lwrbnd.mat.mod.NSD2stagePart2.2,lwrbnd.mat.mod.NSD2stagePart2.3,lwrbnd.mat.mod.NSD2stagePart2.4,lwrbnd.mat.mod.NSD2stagePart2.5,
                lwrbnd.mat.mod.NSD2stagePart2.6,lwrbnd.mat.mod.NSD2stagePart2.7,lwrbnd.mat.mod.NSD2stagePart2.8,lwrbnd.mat.mod.NSD2stagePart2.9,lwrbnd.mat.mod.NSD2stagePart2.10))<=unlist(IS.avail.10locs))
mean(unlist(c(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
              uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10))>=unlist(IS.avail.10locs)&
       unlist(c(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
                lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10))<=unlist(IS.avail.10locs))
mean(uprbnd.krige.bayes.1>=pred.krige.bayes.1&pred.krige.bayes.1>=lwrbnd.krige.bayes.1)
mean(uprbnd.krige.bayes.2>=pred.krige.bayes.2&pred.krige.bayes.2>=lwrbnd.krige.bayes.2)

# plots:
par(mfrow=c(2,2),mar=c(10,4.5,1,0.5))
plot(c(rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
                                             pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10))),
       rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDsat.1,pred.mat.mod.NSDsat.2,pred.mat.mod.NSDsat.3,pred.mat.mod.NSDsat.4,pred.mat.mod.NSDsat.5,
                                             pred.mat.mod.NSDsat.6,pred.mat.mod.NSDsat.7,pred.mat.mod.NSDsat.8,pred.mat.mod.NSDsat.9,pred.mat.mod.NSDsat.10))),
       rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDdrone.1,pred.mat.mod.NSDdrone.2,pred.mat.mod.NSDdrone.3,pred.mat.mod.NSDdrone.4,pred.mat.mod.NSDdrone.5,
                                             pred.mat.mod.NSDdrone.6,pred.mat.mod.NSDdrone.7,pred.mat.mod.NSDdrone.8,pred.mat.mod.NSDdrone.9,pred.mat.mod.NSDdrone.10))),
       rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSD2stagePart2.1,pred.mat.mod.NSD2stagePart2.2,pred.mat.mod.NSD2stagePart2.3,pred.mat.mod.NSD2stagePart2.4,pred.mat.mod.NSD2stagePart2.5,
                                             pred.mat.mod.NSD2stagePart2.6,pred.mat.mod.NSD2stagePart2.7,pred.mat.mod.NSD2stagePart2.8,pred.mat.mod.NSD2stagePart2.9,pred.mat.mod.NSD2stagePart2.10))),
       rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
                                             pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10))),
       rmse(simData.10,pred.krige.bayes.1),
       rmse(simData.10,pred.krige.bayes.2),
       rmse(simData.10,t(pred.mat.okfd)),
       rmse(simData.10,t(pred.mat.okfd.bsp)),
       rmse(simData.10,t(pred.mat.okfd.res.orig)),
       rmse(simData.10,t(pred.mat.okfd.res.bsp.orig)),
       rmse(simData.10,t(pred.mat.ukfd.res.orig)),
       rmse(simData.10,t(pred.mat.ukfd.res.bsp.orig))
),xlab="",ylab="RMSE",pch=15,xaxt="n")
axis(1,at=1:13,labels = c("NSD: 2 covariates","NSD: just satellite","NSD: just drone","2-stage NSD","2-stage NSD, fully integrated","Bayesian spatial kriging","Bayesian spatial kriging acc. for trend","OKFD, Fourier 3","OKFD, B-spline 14","OKFD acc. for trend, Fourier 3","OKFD acc. for trend, B-spline 14","UKFD, Fourier 3","UKFD, B-spline 14"),las=2,cex.axis=0.75)
mtext("Model",side=1,line=9,cex=0.85)

plot(c(var(unlist(c(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
                    pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10))),
       var(unlist(c(pred.mat.mod.NSDsat.1,pred.mat.mod.NSDsat.2,pred.mat.mod.NSDsat.3,pred.mat.mod.NSDsat.4,pred.mat.mod.NSDsat.5,
                    pred.mat.mod.NSDsat.6,pred.mat.mod.NSDsat.7,pred.mat.mod.NSDsat.8,pred.mat.mod.NSDsat.9,pred.mat.mod.NSDsat.10))),
       var(unlist(c(pred.mat.mod.NSDdrone.1,pred.mat.mod.NSDdrone.2,pred.mat.mod.NSDdrone.3,pred.mat.mod.NSDdrone.4,pred.mat.mod.NSDdrone.5,
                    pred.mat.mod.NSDdrone.6,pred.mat.mod.NSDdrone.7,pred.mat.mod.NSDdrone.8,pred.mat.mod.NSDdrone.9,pred.mat.mod.NSDdrone.10))),
       var(unlist(c(pred.mat.mod.NSD2stagePart2.1,pred.mat.mod.NSD2stagePart2.2,pred.mat.mod.NSD2stagePart2.3,pred.mat.mod.NSD2stagePart2.4,pred.mat.mod.NSD2stagePart2.5,
                    pred.mat.mod.NSD2stagePart2.6,pred.mat.mod.NSD2stagePart2.7,pred.mat.mod.NSD2stagePart2.8,pred.mat.mod.NSD2stagePart2.9,pred.mat.mod.NSD2stagePart2.10))),
       var(unlist(c(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
                    pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10))),
       var(c(pred.krige.bayes.1)),
       var(c(pred.krige.bayes.2)),
       var(c(pred.mat.okfd)),
       var(c(pred.mat.okfd.bsp)),
       var(c(pred.mat.okfd.res.orig)),
       var(c(pred.mat.okfd.res.bsp.orig)),
       var(c(pred.mat.ukfd.res.orig)),
       var(c(pred.mat.ukfd.res.bsp.orig))
),xlab="",ylab="Variance of predictions",pch=15,xaxt="n")
axis(1,at=1:13,labels = c("NSD: 2 covariates","NSD: just satellite","NSD: just drone","2-stage NSD","2-stage NSD, fully integrated","Bayesian spatial kriging","Bayesian spatial kriging acc. for trend","OKFD, Fourier 3","OKFD, B-spline 14","OKFD acc. for trend, Fourier 3","OKFD acc. for trend, B-spline 14","UKFD, Fourier 3","UKFD, B-spline 14"),las=2,cex.axis=0.75)
mtext("Model",side=1,line=9,cex=0.85)

plot(c(mean(unlist(c(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
                     uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10)) - 
              unlist(c(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
                       lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10))),
       mean(unlist(c(uprbnd.mat.mod.NSDsat.1,uprbnd.mat.mod.NSDsat.2,uprbnd.mat.mod.NSDsat.3,uprbnd.mat.mod.NSDsat.4,uprbnd.mat.mod.NSDsat.5,
                     uprbnd.mat.mod.NSDsat.6,uprbnd.mat.mod.NSDsat.7,uprbnd.mat.mod.NSDsat.8,uprbnd.mat.mod.NSDsat.9,uprbnd.mat.mod.NSDsat.10)) - 
              unlist(c(lwrbnd.mat.mod.NSDsat.1,lwrbnd.mat.mod.NSDsat.2,lwrbnd.mat.mod.NSDsat.3,lwrbnd.mat.mod.NSDsat.4,lwrbnd.mat.mod.NSDsat.5,
                       lwrbnd.mat.mod.NSDsat.6,lwrbnd.mat.mod.NSDsat.7,lwrbnd.mat.mod.NSDsat.8,lwrbnd.mat.mod.NSDsat.9,lwrbnd.mat.mod.NSDsat.10))),
       mean(unlist(c(uprbnd.mat.mod.NSDdrone.1,uprbnd.mat.mod.NSDdrone.2,uprbnd.mat.mod.NSDdrone.3,uprbnd.mat.mod.NSDdrone.4,uprbnd.mat.mod.NSDdrone.5,
                     uprbnd.mat.mod.NSDdrone.6,uprbnd.mat.mod.NSDdrone.7,uprbnd.mat.mod.NSDdrone.8,uprbnd.mat.mod.NSDdrone.9,uprbnd.mat.mod.NSDdrone.10)) - 
              unlist(c(lwrbnd.mat.mod.NSDdrone.1,lwrbnd.mat.mod.NSDdrone.2,lwrbnd.mat.mod.NSDdrone.3,lwrbnd.mat.mod.NSDdrone.4,lwrbnd.mat.mod.NSDdrone.5,
                       lwrbnd.mat.mod.NSDdrone.6,lwrbnd.mat.mod.NSDdrone.7,lwrbnd.mat.mod.NSDdrone.8,lwrbnd.mat.mod.NSDdrone.9,lwrbnd.mat.mod.NSDdrone.10))),
       mean(unlist(c(uprbnd.mat.mod.NSD2stagePart2.1,uprbnd.mat.mod.NSD2stagePart2.2,uprbnd.mat.mod.NSD2stagePart2.3,uprbnd.mat.mod.NSD2stagePart2.4,uprbnd.mat.mod.NSD2stagePart2.5,
                     uprbnd.mat.mod.NSD2stagePart2.6,uprbnd.mat.mod.NSD2stagePart2.7,uprbnd.mat.mod.NSD2stagePart2.8,uprbnd.mat.mod.NSD2stagePart2.9,uprbnd.mat.mod.NSD2stagePart2.10)) - 
              unlist(c(lwrbnd.mat.mod.NSD2stagePart2.1,lwrbnd.mat.mod.NSD2stagePart2.2,lwrbnd.mat.mod.NSD2stagePart2.3,lwrbnd.mat.mod.NSD2stagePart2.4,lwrbnd.mat.mod.NSD2stagePart2.5,
                       lwrbnd.mat.mod.NSD2stagePart2.6,lwrbnd.mat.mod.NSD2stagePart2.7,lwrbnd.mat.mod.NSD2stagePart2.8,lwrbnd.mat.mod.NSD2stagePart2.9,lwrbnd.mat.mod.NSD2stagePart2.10))),
       mean(unlist(c(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
                     uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10)) - 
              unlist(c(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
                       lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10))),
       mean(uprbnd.krige.bayes.1-lwrbnd.krige.bayes.1),
       mean(uprbnd.krige.bayes.2-lwrbnd.krige.bayes.2),
       NA,
       NA,
       NA,
       NA,
       NA,
       NA
),xlab="",ylab="Mean 95% interval width",pch=15,xaxt="n")
axis(1,at=1:13,labels = c("NSD: 2 covariates","NSD: just satellite","NSD: just drone","2-stage NSD","2-stage NSD, fully integrated","Bayesian spatial kriging","Bayesian spatial kriging acc. for trend","OKFD, Fourier 3","OKFD, B-spline 14","OKFD acc. for trend, Fourier 3","OKFD acc. for trend, B-spline 14","UKFD, Fourier 3","UKFD, B-spline 14"),las=2,cex.axis=0.75)
mtext("Model",side=1,line=9,cex=0.85)

plot(c(mean(unlist(c(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
                     uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
                       lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10))<=unlist(IS.avail.10locs)),
       mean(unlist(c(uprbnd.mat.mod.NSDsat.1,uprbnd.mat.mod.NSDsat.2,uprbnd.mat.mod.NSDsat.3,uprbnd.mat.mod.NSDsat.4,uprbnd.mat.mod.NSDsat.5,
                     uprbnd.mat.mod.NSDsat.6,uprbnd.mat.mod.NSDsat.7,uprbnd.mat.mod.NSDsat.8,uprbnd.mat.mod.NSDsat.9,uprbnd.mat.mod.NSDsat.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.NSDsat.1,lwrbnd.mat.mod.NSDsat.2,lwrbnd.mat.mod.NSDsat.3,lwrbnd.mat.mod.NSDsat.4,lwrbnd.mat.mod.NSDsat.5,
                       lwrbnd.mat.mod.NSDsat.6,lwrbnd.mat.mod.NSDsat.7,lwrbnd.mat.mod.NSDsat.8,lwrbnd.mat.mod.NSDsat.9,lwrbnd.mat.mod.NSDsat.10))<=unlist(IS.avail.10locs)),
       mean(unlist(c(uprbnd.mat.mod.NSDdrone.1,uprbnd.mat.mod.NSDdrone.2,uprbnd.mat.mod.NSDdrone.3,uprbnd.mat.mod.NSDdrone.4,uprbnd.mat.mod.NSDdrone.5,
                     uprbnd.mat.mod.NSDdrone.6,uprbnd.mat.mod.NSDdrone.7,uprbnd.mat.mod.NSDdrone.8,uprbnd.mat.mod.NSDdrone.9,uprbnd.mat.mod.NSDdrone.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.NSDdrone.1,lwrbnd.mat.mod.NSDdrone.2,lwrbnd.mat.mod.NSDdrone.3,lwrbnd.mat.mod.NSDdrone.4,lwrbnd.mat.mod.NSDdrone.5,
                       lwrbnd.mat.mod.NSDdrone.6,lwrbnd.mat.mod.NSDdrone.7,lwrbnd.mat.mod.NSDdrone.8,lwrbnd.mat.mod.NSDdrone.9,lwrbnd.mat.mod.NSDdrone.10))<=unlist(IS.avail.10locs)),
       mean(unlist(c(uprbnd.mat.mod.NSD2stagePart2.1,uprbnd.mat.mod.NSD2stagePart2.2,uprbnd.mat.mod.NSD2stagePart2.3,uprbnd.mat.mod.NSD2stagePart2.4,uprbnd.mat.mod.NSD2stagePart2.5,
                     uprbnd.mat.mod.NSD2stagePart2.6,uprbnd.mat.mod.NSD2stagePart2.7,uprbnd.mat.mod.NSD2stagePart2.8,uprbnd.mat.mod.NSD2stagePart2.9,uprbnd.mat.mod.NSD2stagePart2.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.NSD2stagePart2.1,lwrbnd.mat.mod.NSD2stagePart2.2,lwrbnd.mat.mod.NSD2stagePart2.3,lwrbnd.mat.mod.NSD2stagePart2.4,lwrbnd.mat.mod.NSD2stagePart2.5,
                       lwrbnd.mat.mod.NSD2stagePart2.6,lwrbnd.mat.mod.NSD2stagePart2.7,lwrbnd.mat.mod.NSD2stagePart2.8,lwrbnd.mat.mod.NSD2stagePart2.9,lwrbnd.mat.mod.NSD2stagePart2.10))<=unlist(IS.avail.10locs)),
       mean(unlist(c(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
                     uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
                       lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10))<=unlist(IS.avail.10locs)),
       mean(uprbnd.krige.bayes.1>=pred.krige.bayes.1&pred.krige.bayes.1>=lwrbnd.krige.bayes.1),
       mean(uprbnd.krige.bayes.2>=pred.krige.bayes.2&pred.krige.bayes.2>=lwrbnd.krige.bayes.2),
       NA,
       NA,
       NA,
       NA,
       NA,
       NA
),xlab="",ylab="Mean 95% interval coverage",pch=15,xaxt="n")
axis(1,at=1:13,labels = c("NSD: 2 covariates","NSD: just satellite","NSD: just drone","2-stage NSD","2-stage NSD, fully integrated","Bayesian spatial kriging","Bayesian spatial kriging acc. for trend","OKFD, Fourier 3","OKFD, B-spline 14","OKFD acc. for trend, Fourier 3","OKFD acc. for trend, B-spline 14","UKFD, Fourier 3","UKFD, B-spline 14"),las=2,cex.axis=0.75)
mtext("Model",side=1,line=9,cex=0.85)
par(mfrow=c(1,1),mar=c(4,4.5,1,0.5))

# plots, v2:
par(mfrow=c(2,2),mar=c(10.5,4.5,1,0.5))
plot(c(rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
                                             pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10))),
       rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDsat.1,pred.mat.mod.NSDsat.2,pred.mat.mod.NSDsat.3,pred.mat.mod.NSDsat.4,pred.mat.mod.NSDsat.5,
                                             pred.mat.mod.NSDsat.6,pred.mat.mod.NSDsat.7,pred.mat.mod.NSDsat.8,pred.mat.mod.NSDsat.9,pred.mat.mod.NSDsat.10))),
       rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDdrone.1,pred.mat.mod.NSDdrone.2,pred.mat.mod.NSDdrone.3,pred.mat.mod.NSDdrone.4,pred.mat.mod.NSDdrone.5,
                                             pred.mat.mod.NSDdrone.6,pred.mat.mod.NSDdrone.7,pred.mat.mod.NSDdrone.8,pred.mat.mod.NSDdrone.9,pred.mat.mod.NSDdrone.10))),
       rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSD2stagePart2.1,pred.mat.mod.NSD2stagePart2.2,pred.mat.mod.NSD2stagePart2.3,pred.mat.mod.NSD2stagePart2.4,pred.mat.mod.NSD2stagePart2.5,
                                             pred.mat.mod.NSD2stagePart2.6,pred.mat.mod.NSD2stagePart2.7,pred.mat.mod.NSD2stagePart2.8,pred.mat.mod.NSD2stagePart2.9,pred.mat.mod.NSD2stagePart2.10))),
       rmse(unlist(IS.avail.10locs),unlist(c(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
                                             pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10))),
       rmse(simData.10,pred.krige.bayes.2),
       min(rmse.vec.Fourier.okfd,na.rm=TRUE),
       min(rmse.vec.Bspline.okfd,na.rm=TRUE),
       min(rmse.vec.Fourier.ukfd,na.rm=TRUE),
       min(rmse.vec.Bspline.ukfd,na.rm=TRUE)
       # rmse(simData.10,t(pred.mat.okfd.res.orig)),
       # rmse(simData.10,t(pred.mat.okfd.res.bsp.orig)),
       # rmse(simData.10,t(pred.mat.ukfd.res.orig)),
       # rmse(simData.10,t(pred.mat.ukfd.res.bsp.orig))
),xlab="",ylab="RMSE",pch=15,xaxt="n")
axis(1,at=1:10,labels = c("NSD: 2 covariates","NSD: just satellite","NSD: just drone","2-stage NSD","2-stage NSD, fully integrated","Bayesian spatial kriging","OKFD, Fourier 3","OKFD, B-spline 14","UKFD, Fourier 3","UKFD, B-spline 14"),las=2,cex.axis=0.75)
mtext("Model",side=1,line=9.5,cex=0.85)

plot(c(var(unlist(c(pred.mat.mod.fullNSD.1,pred.mat.mod.fullNSD.2,pred.mat.mod.fullNSD.3,pred.mat.mod.fullNSD.4,pred.mat.mod.fullNSD.5,
                    pred.mat.mod.fullNSD.6,pred.mat.mod.fullNSD.7,pred.mat.mod.fullNSD.8,pred.mat.mod.fullNSD.9,pred.mat.mod.fullNSD.10))),
       var(unlist(c(pred.mat.mod.NSDsat.1,pred.mat.mod.NSDsat.2,pred.mat.mod.NSDsat.3,pred.mat.mod.NSDsat.4,pred.mat.mod.NSDsat.5,
                    pred.mat.mod.NSDsat.6,pred.mat.mod.NSDsat.7,pred.mat.mod.NSDsat.8,pred.mat.mod.NSDsat.9,pred.mat.mod.NSDsat.10))),
       var(unlist(c(pred.mat.mod.NSDdrone.1,pred.mat.mod.NSDdrone.2,pred.mat.mod.NSDdrone.3,pred.mat.mod.NSDdrone.4,pred.mat.mod.NSDdrone.5,
                    pred.mat.mod.NSDdrone.6,pred.mat.mod.NSDdrone.7,pred.mat.mod.NSDdrone.8,pred.mat.mod.NSDdrone.9,pred.mat.mod.NSDdrone.10))),
       var(unlist(c(pred.mat.mod.NSD2stagePart2.1,pred.mat.mod.NSD2stagePart2.2,pred.mat.mod.NSD2stagePart2.3,pred.mat.mod.NSD2stagePart2.4,pred.mat.mod.NSD2stagePart2.5,
                    pred.mat.mod.NSD2stagePart2.6,pred.mat.mod.NSD2stagePart2.7,pred.mat.mod.NSD2stagePart2.8,pred.mat.mod.NSD2stagePart2.9,pred.mat.mod.NSD2stagePart2.10))),
       var(unlist(c(pred.mat.mod.NSDmodel2Stage.1,pred.mat.mod.NSDmodel2Stage.2,pred.mat.mod.NSDmodel2Stage.3,pred.mat.mod.NSDmodel2Stage.4,pred.mat.mod.NSDmodel2Stage.5,
                    pred.mat.mod.NSDmodel2Stage.6,pred.mat.mod.NSDmodel2Stage.7,pred.mat.mod.NSDmodel2Stage.8,pred.mat.mod.NSDmodel2Stage.9,pred.mat.mod.NSDmodel2Stage.10))),
       var(c(pred.krige.bayes.2)),
       var(c(pred.mat.res.orig.F.okfd[[which.min(rmse.vec.Fourier.okfd)]])),
       var(c(pred.mat.res.orig.bsp.okfd[[which.min(rmse.vec.Bspline.okfd)]])),
       var(c(pred.mat.res.orig.F.ukfd[[which.min(rmse.vec.Fourier.ukfd)]])),
       var(c(pred.mat.res.orig.bsp.ukfd[[which.min(rmse.vec.Bspline.ukfd)]]))
),xlab="",ylab="Variance of predictions",pch=15,xaxt="n")
axis(1,at=1:10,labels = c("NSD: 2 covariates","NSD: just satellite","NSD: just drone","2-stage NSD","2-stage NSD, fully integrated","Bayesian spatial kriging","OKFD, Fourier 3","OKFD, B-spline 14","UKFD, Fourier 3","UKFD, B-spline 14"),las=2,cex.axis=0.75)
mtext("Model",side=1,line=9.5,cex=0.85)

plot(c(mean(unlist(c(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
                     uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10)) - 
              unlist(c(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
                       lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10))),
       mean(unlist(c(uprbnd.mat.mod.NSDsat.1,uprbnd.mat.mod.NSDsat.2,uprbnd.mat.mod.NSDsat.3,uprbnd.mat.mod.NSDsat.4,uprbnd.mat.mod.NSDsat.5,
                     uprbnd.mat.mod.NSDsat.6,uprbnd.mat.mod.NSDsat.7,uprbnd.mat.mod.NSDsat.8,uprbnd.mat.mod.NSDsat.9,uprbnd.mat.mod.NSDsat.10)) - 
              unlist(c(lwrbnd.mat.mod.NSDsat.1,lwrbnd.mat.mod.NSDsat.2,lwrbnd.mat.mod.NSDsat.3,lwrbnd.mat.mod.NSDsat.4,lwrbnd.mat.mod.NSDsat.5,
                       lwrbnd.mat.mod.NSDsat.6,lwrbnd.mat.mod.NSDsat.7,lwrbnd.mat.mod.NSDsat.8,lwrbnd.mat.mod.NSDsat.9,lwrbnd.mat.mod.NSDsat.10))),
       mean(unlist(c(uprbnd.mat.mod.NSDdrone.1,uprbnd.mat.mod.NSDdrone.2,uprbnd.mat.mod.NSDdrone.3,uprbnd.mat.mod.NSDdrone.4,uprbnd.mat.mod.NSDdrone.5,
                     uprbnd.mat.mod.NSDdrone.6,uprbnd.mat.mod.NSDdrone.7,uprbnd.mat.mod.NSDdrone.8,uprbnd.mat.mod.NSDdrone.9,uprbnd.mat.mod.NSDdrone.10)) - 
              unlist(c(lwrbnd.mat.mod.NSDdrone.1,lwrbnd.mat.mod.NSDdrone.2,lwrbnd.mat.mod.NSDdrone.3,lwrbnd.mat.mod.NSDdrone.4,lwrbnd.mat.mod.NSDdrone.5,
                       lwrbnd.mat.mod.NSDdrone.6,lwrbnd.mat.mod.NSDdrone.7,lwrbnd.mat.mod.NSDdrone.8,lwrbnd.mat.mod.NSDdrone.9,lwrbnd.mat.mod.NSDdrone.10))),
       mean(unlist(c(uprbnd.mat.mod.NSD2stagePart2.1,uprbnd.mat.mod.NSD2stagePart2.2,uprbnd.mat.mod.NSD2stagePart2.3,uprbnd.mat.mod.NSD2stagePart2.4,uprbnd.mat.mod.NSD2stagePart2.5,
                     uprbnd.mat.mod.NSD2stagePart2.6,uprbnd.mat.mod.NSD2stagePart2.7,uprbnd.mat.mod.NSD2stagePart2.8,uprbnd.mat.mod.NSD2stagePart2.9,uprbnd.mat.mod.NSD2stagePart2.10)) - 
              unlist(c(lwrbnd.mat.mod.NSD2stagePart2.1,lwrbnd.mat.mod.NSD2stagePart2.2,lwrbnd.mat.mod.NSD2stagePart2.3,lwrbnd.mat.mod.NSD2stagePart2.4,lwrbnd.mat.mod.NSD2stagePart2.5,
                       lwrbnd.mat.mod.NSD2stagePart2.6,lwrbnd.mat.mod.NSD2stagePart2.7,lwrbnd.mat.mod.NSD2stagePart2.8,lwrbnd.mat.mod.NSD2stagePart2.9,lwrbnd.mat.mod.NSD2stagePart2.10))),
       mean(unlist(c(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
                     uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10)) - 
              unlist(c(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
                       lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10))),
       mean(uprbnd.krige.bayes.2-lwrbnd.krige.bayes.2),
       NA,
       NA,
       NA,
       NA
),xlab="",ylab="Mean 95% interval width",pch=15,xaxt="n")
axis(1,at=1:10,labels = c("NSD: 2 covariates","NSD: just satellite","NSD: just drone","2-stage NSD","2-stage NSD, fully integrated","Bayesian spatial kriging","OKFD, Fourier 3","OKFD, B-spline 14","UKFD, Fourier 3","UKFD, B-spline 14"),las=2,cex.axis=0.75)
mtext("Model",side=1,line=9.5,cex=0.85)

plot(c(mean(unlist(c(uprbnd.mat.mod.fullNSD.1,uprbnd.mat.mod.fullNSD.2,uprbnd.mat.mod.fullNSD.3,uprbnd.mat.mod.fullNSD.4,uprbnd.mat.mod.fullNSD.5,
                     uprbnd.mat.mod.fullNSD.6,uprbnd.mat.mod.fullNSD.7,uprbnd.mat.mod.fullNSD.8,uprbnd.mat.mod.fullNSD.9,uprbnd.mat.mod.fullNSD.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.fullNSD.1,lwrbnd.mat.mod.fullNSD.2,lwrbnd.mat.mod.fullNSD.3,lwrbnd.mat.mod.fullNSD.4,lwrbnd.mat.mod.fullNSD.5,
                       lwrbnd.mat.mod.fullNSD.6,lwrbnd.mat.mod.fullNSD.7,lwrbnd.mat.mod.fullNSD.8,lwrbnd.mat.mod.fullNSD.9,lwrbnd.mat.mod.fullNSD.10))<=unlist(IS.avail.10locs)),
       mean(unlist(c(uprbnd.mat.mod.NSDsat.1,uprbnd.mat.mod.NSDsat.2,uprbnd.mat.mod.NSDsat.3,uprbnd.mat.mod.NSDsat.4,uprbnd.mat.mod.NSDsat.5,
                     uprbnd.mat.mod.NSDsat.6,uprbnd.mat.mod.NSDsat.7,uprbnd.mat.mod.NSDsat.8,uprbnd.mat.mod.NSDsat.9,uprbnd.mat.mod.NSDsat.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.NSDsat.1,lwrbnd.mat.mod.NSDsat.2,lwrbnd.mat.mod.NSDsat.3,lwrbnd.mat.mod.NSDsat.4,lwrbnd.mat.mod.NSDsat.5,
                       lwrbnd.mat.mod.NSDsat.6,lwrbnd.mat.mod.NSDsat.7,lwrbnd.mat.mod.NSDsat.8,lwrbnd.mat.mod.NSDsat.9,lwrbnd.mat.mod.NSDsat.10))<=unlist(IS.avail.10locs)),
       mean(unlist(c(uprbnd.mat.mod.NSDdrone.1,uprbnd.mat.mod.NSDdrone.2,uprbnd.mat.mod.NSDdrone.3,uprbnd.mat.mod.NSDdrone.4,uprbnd.mat.mod.NSDdrone.5,
                     uprbnd.mat.mod.NSDdrone.6,uprbnd.mat.mod.NSDdrone.7,uprbnd.mat.mod.NSDdrone.8,uprbnd.mat.mod.NSDdrone.9,uprbnd.mat.mod.NSDdrone.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.NSDdrone.1,lwrbnd.mat.mod.NSDdrone.2,lwrbnd.mat.mod.NSDdrone.3,lwrbnd.mat.mod.NSDdrone.4,lwrbnd.mat.mod.NSDdrone.5,
                       lwrbnd.mat.mod.NSDdrone.6,lwrbnd.mat.mod.NSDdrone.7,lwrbnd.mat.mod.NSDdrone.8,lwrbnd.mat.mod.NSDdrone.9,lwrbnd.mat.mod.NSDdrone.10))<=unlist(IS.avail.10locs)),
       mean(unlist(c(uprbnd.mat.mod.NSD2stagePart2.1,uprbnd.mat.mod.NSD2stagePart2.2,uprbnd.mat.mod.NSD2stagePart2.3,uprbnd.mat.mod.NSD2stagePart2.4,uprbnd.mat.mod.NSD2stagePart2.5,
                     uprbnd.mat.mod.NSD2stagePart2.6,uprbnd.mat.mod.NSD2stagePart2.7,uprbnd.mat.mod.NSD2stagePart2.8,uprbnd.mat.mod.NSD2stagePart2.9,uprbnd.mat.mod.NSD2stagePart2.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.NSD2stagePart2.1,lwrbnd.mat.mod.NSD2stagePart2.2,lwrbnd.mat.mod.NSD2stagePart2.3,lwrbnd.mat.mod.NSD2stagePart2.4,lwrbnd.mat.mod.NSD2stagePart2.5,
                       lwrbnd.mat.mod.NSD2stagePart2.6,lwrbnd.mat.mod.NSD2stagePart2.7,lwrbnd.mat.mod.NSD2stagePart2.8,lwrbnd.mat.mod.NSD2stagePart2.9,lwrbnd.mat.mod.NSD2stagePart2.10))<=unlist(IS.avail.10locs)),
       mean(unlist(c(uprbnd.mat.mod.NSDmodel2Stage.1,uprbnd.mat.mod.NSDmodel2Stage.2,uprbnd.mat.mod.NSDmodel2Stage.3,uprbnd.mat.mod.NSDmodel2Stage.4,uprbnd.mat.mod.NSDmodel2Stage.5,
                     uprbnd.mat.mod.NSDmodel2Stage.6,uprbnd.mat.mod.NSDmodel2Stage.7,uprbnd.mat.mod.NSDmodel2Stage.8,uprbnd.mat.mod.NSDmodel2Stage.9,uprbnd.mat.mod.NSDmodel2Stage.10))>=unlist(IS.avail.10locs)&
              unlist(c(lwrbnd.mat.mod.NSDmodel2Stage.1,lwrbnd.mat.mod.NSDmodel2Stage.2,lwrbnd.mat.mod.NSDmodel2Stage.3,lwrbnd.mat.mod.NSDmodel2Stage.4,lwrbnd.mat.mod.NSDmodel2Stage.5,
                       lwrbnd.mat.mod.NSDmodel2Stage.6,lwrbnd.mat.mod.NSDmodel2Stage.7,lwrbnd.mat.mod.NSDmodel2Stage.8,lwrbnd.mat.mod.NSDmodel2Stage.9,lwrbnd.mat.mod.NSDmodel2Stage.10))<=unlist(IS.avail.10locs)),
       mean(uprbnd.krige.bayes.2>=pred.krige.bayes.2&pred.krige.bayes.2>=lwrbnd.krige.bayes.2),
       NA,
       NA,
       NA,
       NA
),xlab="",ylab="Mean 95% interval coverage",pch=15,xaxt="n")
axis(1,at=1:10,labels = c("NSD: 2 covariates","NSD: just satellite","NSD: just drone","2-stage NSD","2-stage NSD, fully integrated","Bayesian spatial kriging","OKFD, Fourier 3","OKFD, B-spline 14","UKFD, Fourier 3","UKFD, B-spline 14"),las=2,cex.axis=0.75)
mtext("Model",side=1,line=9.5,cex=0.85)
par(mfrow=c(1,1),mar=c(4,4.5,1,0.5))

#### plots of data over space: #######################################################################################################################

rfsim1.sp.tur.list.all<-vector("list",length(rfsim1.sp.tur.list))
for(i in 1:length(rfsim1.sp.tur.list)){
  tryCatch({rfsim1.sp.tur.list.all[[i]]<-cbind.data.frame(rbind.data.frame(rfsim1.sp.tur.list.drone1[[i]]@coords,rfsim1.sp.tur.list[[i]]@coords,cbind(x=locs.insitu.10locs$lon,y=locs.insitu.10locs$lat)),
                                                rbind.data.frame(rfsim1.sp.tur.list.drone1[[i]]@data,rfsim1.sp.tur.list[[i]]@data,data.frame(data=t(t(simData.10[,i])))))
  coordinates(rfsim1.sp.tur.list.all[[i]])<-c("x","y")},error=function(e){e})
}

p.list.tur.all<-vector("list",length(rfsim1.sp.tur.list))
for(i in 1:48){
  tryCatch({p.list.tur.all[[i]]<-spplot(rfsim1.sp.tur.list.all[[i]],colorkey=TRUE,col.regions=rev(heat.colors(100)),xlim=c(min(rfsim1.sp.tur.list.drone1[[i]]@coords[,1]),max(rfsim1.sp.tur.list.drone1[[i]]@coords[,1])),ylim=c(min(rfsim1.sp.tur.list.drone1[[i]]@coords[,2]),max(rfsim1.sp.tur.list.drone1[[i]]@coords[,2])),main=paste0("Month ",i),cex=0.75)},error=function(e){e})
}

print(p.list.tur.all[[1]],position=c(0,0.8571429,1,1),more=TRUE)
print(p.list.tur.all[[2]],position=c(0,0.7142857,1,0.8571429),more=TRUE)
print(p.list.tur.all[[3]],position=c(0,0.5714286,1,0.7142857),more=TRUE)
print(p.list.tur.all[[4]],position=c(0,0.4285714,1,0.5714286),more=TRUE)
print(p.list.tur.all[[5]],position=c(0,0.2857143,1,0.4285714),more=TRUE)
print(p.list.tur.all[[6]],position=c(0,0.1428571,1,0.2857143),more=TRUE)
print(p.list.tur.all[[7]],position=c(0,0,1,0.1428571))

print(p.list.tur.all[[8]],position=c(0,0.8571429,1,1),more=TRUE)
print(p.list.tur.all[[9]],position=c(0,0.7142857,1,0.8571429),more=TRUE)
print(p.list.tur.all[[10]],position=c(0,0.5714286,1,0.7142857),more=TRUE)
print(p.list.tur.all[[11]],position=c(0,0.4285714,1,0.5714286),more=TRUE)
print(p.list.tur.all[[12]],position=c(0,0.2857143,1,0.4285714),more=TRUE)
print(p.list.tur.all[[13]],position=c(0,0.1428571,1,0.2857143),more=TRUE)
print(p.list.tur.all[[14]],position=c(0,0,1,0.1428571))

print(p.list.tur.all[[15]],position=c(0,0.8571429,1,1),more=TRUE)
print(p.list.tur.all[[16]],position=c(0,0.7142857,1,0.8571429),more=TRUE)
print(p.list.tur.all[[17]],position=c(0,0.5714286,1,0.7142857),more=TRUE)
print(p.list.tur.all[[18]],position=c(0,0.4285714,1,0.5714286),more=TRUE)
print(p.list.tur.all[[19]],position=c(0,0.2857143,1,0.4285714),more=TRUE)
print(p.list.tur.all[[20]],position=c(0,0.1428571,1,0.2857143),more=TRUE)
print(p.list.tur.all[[21]],position=c(0,0,1,0.1428571))

print(p.list.tur.all[[22]],position=c(0,0.8571429,1,1),more=TRUE)
print(p.list.tur.all[[23]],position=c(0,0.7142857,1,0.8571429),more=TRUE)
print(p.list.tur.all[[24]],position=c(0,0.5714286,1,0.7142857),more=TRUE)
print(p.list.tur.all[[25]],position=c(0,0.4285714,1,0.5714286),more=TRUE)
print(p.list.tur.all[[26]],position=c(0,0.2857143,1,0.4285714),more=TRUE)
print(p.list.tur.all[[27]],position=c(0,0.1428571,1,0.2857143),more=TRUE)
print(p.list.tur.all[[28]],position=c(0,0,1,0.1428571))

print(p.list.tur.all[[29]],position=c(0,0.8571429,1,1),more=TRUE)
print(p.list.tur.all[[30]],position=c(0,0.7142857,1,0.8571429),more=TRUE)
print(p.list.tur.all[[31]],position=c(0,0.5714286,1,0.7142857),more=TRUE)
print(p.list.tur.all[[32]],position=c(0,0.4285714,1,0.5714286),more=TRUE)
print(p.list.tur.all[[33]],position=c(0,0.2857143,1,0.4285714),more=TRUE)
print(p.list.tur.all[[34]],position=c(0,0.1428571,1,0.2857143),more=TRUE)
print(p.list.tur.all[[35]],position=c(0,0,1,0.1428571))

print(p.list.tur.all[[36]],position=c(0,0.8571429,1,1),more=TRUE)
print(p.list.tur.all[[37]],position=c(0,0.7142857,1,0.8571429),more=TRUE)
print(p.list.tur.all[[38]],position=c(0,0.5714286,1,0.7142857),more=TRUE)
print(p.list.tur.all[[39]],position=c(0,0.4285714,1,0.5714286),more=TRUE)
print(p.list.tur.all[[40]],position=c(0,0.2857143,1,0.4285714),more=TRUE)
print(p.list.tur.all[[41]],position=c(0,0.1428571,1,0.2857143),more=TRUE)
print(p.list.tur.all[[42]],position=c(0,0,1,0.1428571))

print(p.list.tur.all[[43]],position=c(0,0.8571429,1,1),more=TRUE)
print(p.list.tur.all[[44]],position=c(0,0.7142857,1,0.8571429),more=TRUE)
print(p.list.tur.all[[45]],position=c(0,0.5714286,1,0.7142857),more=TRUE)
print(p.list.tur.all[[46]],position=c(0,0.4285714,1,0.5714286),more=TRUE)
print(p.list.tur.all[[47]],position=c(0,0.2857143,1,0.4285714),more=TRUE)
print(p.list.tur.all[[48]],position=c(0,0.1428571,1,0.2857143),more=FALSE)

# for slides:
print(p.list.tur.all[[1]],position=c(0,0.66,1,0.99),more=TRUE)
print(p.list.tur.all[[2]],position=c(0,0.33,1,0.66),more=TRUE)
print(p.list.tur.all[[3]],position=c(0,0,1,0.33),more=FALSE)

i<-1
plot(IS.avail.10locs[[i]]~times.avail.10locs[[i]],type="o",col="grey",pch=16,xlab="Year",ylab="Log(turbidity)",main=paste0("Location ",i),
     ylim=c(min(c(min(lwrbnd.mat.mod.fullNSD.10locs),
                  min(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                  min(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])))),
            max(c(max(uprbnd.mat.mod.fullNSD.10locs),
                  max(t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])),
                  max(t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]))))))
lines(t(simData_sat_tur_all[which.closest.sat.10locs[i],-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))])~months.RS.tur.dec,col=2,pch=15,type="o")
lines(t(simData_drone_tur_all[which.closest.drone.10locs[i],-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))])~months.RS.tur.dec,col=4,pch=17,type="o")
lines(pred.mat.mod.fullNSD.10locs[,i]~times.avail.10locs[[i]])
lines(lwrbnd.mat.mod.fullNSD.10locs[,i]~times.avail.10locs[[i]],lty=2)
lines(uprbnd.mat.mod.fullNSD.10locs[,i]~times.avail.10locs[[i]],lty=2)

legend("bottomleft",legend=c("In situ","Drone","Satellite","Predictions","95% CI bounds"),pch = c(16,15,17,NA,NA),col=c("grey",2,4,1,1),lty=c(1,1,1,1,2),bty="n")

# spatial predictions for model 1:

set.seed(1001)
points.pred.x<-runif(1000,min=min(rfsim1.sp.tur.list.drone1[[i]]@coords[,1]),max=max(rfsim1.sp.tur.list.drone1[[i]]@coords[,1]))
points.pred.y<-runif(1000,min=min(rfsim1.sp.tur.list.drone1[[i]]@coords[,2]),max=max(rfsim1.sp.tur.list.drone1[[i]]@coords[,2]))
points.pred<-cbind.data.frame(points.pred.x,points.pred.y)

plot(rfsim1.sp.tur.list.drone1[[1]]@coords)
points(rfsim1.sp.tur.list[[1]]@coords,col=2)
points(points.pred.x,points.pred.y,col=4)
points(locs.insitu.10locs,col="grey")

which.closest.sat.pred<-numeric(1000)
which.closest.drone.pred<-numeric(1000)
for(i in 1:1000){
  which.closest.sat.pred[i]<-which.min(spDistsN1(as.matrix(coords.grid1),as.matrix(points.pred[i,]),longlat = TRUE))
  which.closest.drone.pred[i]<-which.min(spDistsN1(as.matrix(coords.drone.grid1),as.matrix(points.pred[i,]),longlat = TRUE))
}

points(coords.grid1[which.closest.sat.pred,],pch=16,cex=0.5,col=4)
points(coords.drone.grid1[which.closest.drone.pred,],pch=16,cex=0.5,col=4)

Sys.time() # "2020-10-16 16:40:27 BST"
mod.fullNSD.spatial.1<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
                                         yData=IS.avail.10locs,
                                         xData=t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                         zData=t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                         xPred=t(simData_sat_tur_all[which.closest.sat.pred,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                         zPred=t(simData_drone_tur_all[which.closest.drone.pred,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                         coordsData=as.matrix(locs.insitu.10locs),
                                         coordsPred=as.matrix(points.pred),
                                         By=eb.IS.bspline14,
                                         Bx=eb.RS.bspline14,
                                         Bz=eb.RS.bspline14,
                                         ByPred=eb.IS.bspline14[[1]],
                                         phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
                                         aAlpha=2, bAlpha=1,
                                         aBeta=2, bBeta=1,
                                         aGamma=2,bGamma=2,
                                         aY=2, bY=1,
                                         aC=2, bC=1,
                                         aX=2, bX=1,
                                         aZ=2,bZ=1,
                                         muD=rep(0, 14),SigmaD=100*diag(14),
                                         muE=rep(0, 14),SigmaE=100*diag(14),
                                         sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
                                         sigmaCPrecInit=1.4,
                                         alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)),
                                         betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)),
                                         gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)),
                                         cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)),
                                         sigmaXPrecInit=1.5,
                                         sigmaZPrecInit=1.55,
                                         dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)),
                                         eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)))
Sys.time() # "2020-10-16 17:06:20 BST"
summary.mod.fullNSD.spatial.1<-summary(mod.fullNSD.spatial.1)
Sys.time() # "2020-10-16 17:13:28 BST"

pred.mat.mod.fullNSD.spatial.1<-matrix(summary.mod.fullNSD.spatial.1$quantiles[nrow(summary.mod.fullNSD.spatial.1$quantiles)-(((48*1000)-1):0),3],nrow=48,ncol=1000)
lwrbnd.mat.mod.fullNSD.spatial.1<-matrix(summary.mod.fullNSD.spatial.1$quantiles[nrow(summary.mod.fullNSD.spatial.1$quantiles)-(((48*1000)-1):0),1],nrow=48,ncol=1000)
uprbnd.mat.mod.fullNSD.spatial.1<-matrix(summary.mod.fullNSD.spatial.1$quantiles[nrow(summary.mod.fullNSD.spatial.1$quantiles)-(((48*1000)-1):0),5],nrow=48,ncol=1000)

pred.mat.mod.fullNSD.spatial.sp.1<-cbind.data.frame(points.pred,t(pred.mat.mod.fullNSD.spatial.1))
colnames(pred.mat.mod.fullNSD.spatial.sp.1)<-c("x","y",paste0("month.",1:48))
coordinates(pred.mat.mod.fullNSD.spatial.sp.1)<-c("x","y")

pred.mat.mod.fullNSD.spatial.all.sp.1<-rbind.data.frame(cbind.data.frame(x=points.pred[,1],y=points.pred[,2],t(pred.mat.mod.fullNSD.spatial.1)),cbind.data.frame(x=locs.insitu.10locs[,1],y=locs.insitu.10locs[,2],simData.10))
colnames(pred.mat.mod.fullNSD.spatial.all.sp.1)<-c("x","y",paste0("month.",1:48))
coordinates(pred.mat.mod.fullNSD.spatial.all.sp.1)<-c("x","y")

spplot(pred.mat.mod.fullNSD.spatial.sp.1,"month.1",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Predictions for month 1")
spplot(pred.mat.mod.fullNSD.spatial.all.sp.1,"month.1",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 1")

spplot(pred.mat.mod.fullNSD.spatial.sp.1,"month.2",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 2")
spplot(pred.mat.mod.fullNSD.spatial.all.sp.1,"month.2",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 2")

spplot(pred.mat.mod.fullNSD.spatial.sp.1,"month.3",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 3")
spplot(pred.mat.mod.fullNSD.spatial.all.sp.1,"month.3",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 3")

## using grid instead:

points.pred.x.2<-seq(from=min(rfsim1.sp.tur.list.drone1[[1]]@coords[,1]),to=max(rfsim1.sp.tur.list.drone1[[1]]@coords[,1]),length.out = 100)
points.pred.y.2<-seq(from=min(rfsim1.sp.tur.list.drone1[[1]]@coords[,2]),to=max(rfsim1.sp.tur.list.drone1[[1]]@coords[,2]),length.out = 10)
points.pred.2<-expand.grid(points.pred.x.2,points.pred.y.2)

which.closest.sat.pred.2<-numeric(1000)
which.closest.drone.pred.2<-numeric(1000)
for(i in 1:1000){
  which.closest.sat.pred.2[i]<-which.min(spDistsN1(as.matrix(coords.grid1),as.matrix(points.pred.2[i,]),longlat = TRUE))
  which.closest.drone.pred.2[i]<-which.min(spDistsN1(as.matrix(coords.drone.grid1),as.matrix(points.pred.2[i,]),longlat = TRUE))
}

Sys.time() # "2020-10-16 19:39:51 BST"
mod.fullNSD.spatial.2<-run.NSDmodelMulti(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
                                         yData=IS.avail.10locs,
                                         xData=t(simData_sat_tur_all[which.closest.sat.10locs,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                         zData=t(simData_drone_tur_all[which.closest.drone.10locs,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                         xPred=t(simData_sat_tur_all[which.closest.sat.pred.2,-(c(1,2,which((apply(is.na(simData_sat_tur_all),2,any)))))]),
                                         zPred=t(simData_drone_tur_all[which.closest.drone.pred.2,-(c(1,2,which((apply(is.na(simData_drone_tur_all),2,any)))))]),
                                         coordsData=as.matrix(locs.insitu.10locs),
                                         coordsPred=as.matrix(points.pred.2),
                                         By=eb.IS.bspline14,
                                         Bx=eb.RS.bspline14,
                                         Bz=eb.RS.bspline14,
                                         ByPred=eb.IS.bspline14[[1]],
                                         phiAlpha=0.1, phiBeta=0.1, phiGamma = 0.1,
                                         aAlpha=2, bAlpha=1,
                                         aBeta=2, bBeta=1,
                                         aGamma=2,bGamma=2,
                                         aY=2, bY=1,
                                         aC=2, bC=1,
                                         aX=2, bX=1,
                                         aZ=2,bZ=1,
                                         muD=rep(0, 14),SigmaD=100*diag(14),
                                         muE=rep(0, 14),SigmaE=100*diag(14),
                                         sigmaAlphaPrecInit=1.1, sigmaBetaPrecInit=1.2, sigmaGammaPrecInit = 1.25, sigmaYPrecInit=1.10,
                                         sigmaCPrecInit=1.4,
                                         alphaInit=matrix(0, nrow = 14, ncol = length(IS.avail.10locs)),
                                         betaInit=matrix(0.4, nrow = 14, ncol = length(IS.avail.10locs)),
                                         gammaInit=matrix(0.45, nrow = 14, ncol = length(IS.avail.10locs)),
                                         cInit=matrix(0.5, nrow = 14, ncol = length(IS.avail.10locs)),
                                         sigmaXPrecInit=1.5,
                                         sigmaZPrecInit=1.55,
                                         dInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)),
                                         eInit=matrix(0.6, nrow = 14, ncol = length(IS.avail.10locs)))
Sys.time() # "2020-10-16 20:06:23 BST"
summary.mod.fullNSD.spatial.2<-summary(mod.fullNSD.spatial.2)
Sys.time() # "2020-10-16 20:13:42 BST"

pred.mat.mod.fullNSD.spatial.2<-matrix(summary.mod.fullNSD.spatial.2$quantiles[nrow(summary.mod.fullNSD.spatial.2$quantiles)-(((48*1000)-1):0),3],nrow=48,ncol=1000)
lwrbnd.mat.mod.fullNSD.spatial.2<-matrix(summary.mod.fullNSD.spatial.2$quantiles[nrow(summary.mod.fullNSD.spatial.2$quantiles)-(((48*1000)-1):0),1],nrow=48,ncol=1000)
uprbnd.mat.mod.fullNSD.spatial.2<-matrix(summary.mod.fullNSD.spatial.2$quantiles[nrow(summary.mod.fullNSD.spatial.2$quantiles)-(((48*1000)-1):0),5],nrow=48,ncol=1000)

pred.mat.mod.fullNSD.spatial.sp.2<-cbind.data.frame(points.pred.2,t(pred.mat.mod.fullNSD.spatial.2))
colnames(pred.mat.mod.fullNSD.spatial.sp.2)<-c("x","y",paste0("month.",1:48))
coordinates(pred.mat.mod.fullNSD.spatial.sp.2)<-c("x","y")

pred.mat.mod.fullNSD.spatial.all.sp.2<-rbind.data.frame(cbind.data.frame(x=points.pred.2[,1],y=points.pred.2[,2],t(pred.mat.mod.fullNSD.spatial.2)),cbind.data.frame(x=locs.insitu.10locs[,1],y=locs.insitu.10locs[,2],simData.10))
colnames(pred.mat.mod.fullNSD.spatial.all.sp.2)<-c("x","y",paste0("month.",1:48))
coordinates(pred.mat.mod.fullNSD.spatial.all.sp.2)<-c("x","y")

spplot(pred.mat.mod.fullNSD.spatial.sp.2,"month.1",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Predictions for month 1",xlim=c(min(rfsim1.sp.tur.list.drone1[[1]]@coords[,1]),max(rfsim1.sp.tur.list.drone1[[1]]@coords[,1])),ylim=c(min(rfsim1.sp.tur.list.drone1[[1]]@coords[,2]),max(rfsim1.sp.tur.list.drone1[[1]]@coords[,2])))
spplot(pred.mat.mod.fullNSD.spatial.all.sp.2,"month.1",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 1")

spplot(pred.mat.mod.fullNSD.spatial.sp.2,"month.2",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 2")
spplot(pred.mat.mod.fullNSD.spatial.all.sp.2,"month.2",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 2")

spplot(pred.mat.mod.fullNSD.spatial.sp.2,"month.3",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 3")
spplot(pred.mat.mod.fullNSD.spatial.all.sp.2,"month.3",colorkey=TRUE,col.regions=rev(heat.colors(100)),main="Month 3")



