
# Modelling using data from data_simulation_multiple_drone_sites_3.R:

# Trying to model using data from all three sources:

library(NSD)
library(sp)
library(fda)
library(lubridate)

load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_true.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_droneLocs_sd1.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_droneLocs_sd2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_droneLocs_sd3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_sat_sd1.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_sat_sd2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_sat_sd3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_insitu_sd1.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_insitu_sd2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/simData_insitu_sd3.RData")

load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/grid_xy.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/grid_xy_droneLocs.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/grid_xy_sat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/data_simulation_multiple_drone_sites_3/grid_xy_insitu.RData")

for(i in 1:length(grid.xy.droneLocs)){grid.xy.droneLocs[[i]]<-cbind.data.frame(x=grid.xy.droneLocs[[i]]$x,y=grid.xy.droneLocs[[i]]$y)}
grid.xy<-cbind.data.frame(x=grid.xy$x,y=grid.xy$y)
grid.xy.sat<-cbind.data.frame(x=grid.xy.sat$x,y=grid.xy.sat$y)

dates.5years<-seq(from=as.Date("2015-01-15"),to=as.Date("2019-12-15"),length.out = 5*12)
dates.dec.5years<-decimal_date(dates.5years)

# Data subsets:

simData2.sat.sd1<-simData.sat.sd1[,month(dates.5years)%in%c(1:4,10:12)]
simData2.sat.sd2<-simData.sat.sd2[,month(dates.5years)%in%c(1:4,10:12)]
simData2.sat.sd3<-simData.sat.sd3[,month(dates.5years)%in%c(1:4,10:12)]

simData2.droneLocs.sd1<-simData.droneLocs.sd1;for(i in 1:length(simData2.droneLocs.sd1)){simData2.droneLocs.sd1[[i]]<-simData.droneLocs.sd1[[i]][,month(dates.5years)%in%c(5,7,9)]}
simData2.droneLocs.sd2<-simData.droneLocs.sd2;for(i in 1:length(simData2.droneLocs.sd2)){simData2.droneLocs.sd2[[i]]<-simData.droneLocs.sd2[[i]][,month(dates.5years)%in%c(5,7,9)]}
simData2.droneLocs.sd3<-simData.droneLocs.sd3;for(i in 1:length(simData2.droneLocs.sd3)){simData2.droneLocs.sd3[[i]]<-simData.droneLocs.sd3[[i]][,month(dates.5years)%in%c(5,7,9)]}

simData2.insitu.sd1<-simData.insitu.sd1;for(i in 1:length(simData2.insitu.sd1)){simData2.insitu.sd1[[i]]<-simData.insitu.sd1[[i]][,month(dates.5years)%in%c(1,3,5,7,9,11)]}
simData2.insitu.sd2<-simData.insitu.sd2;for(i in 1:length(simData2.insitu.sd2)){simData2.insitu.sd2[[i]]<-simData.insitu.sd2[[i]][,month(dates.5years)%in%c(1,3,5,7,9,11)]}
simData2.insitu.sd3<-simData.insitu.sd3;for(i in 1:length(simData2.insitu.sd3)){simData2.insitu.sd3[[i]]<-simData.insitu.sd3[[i]][,month(dates.5years)%in%c(1,3,5,7,9,11)]}

which.closest.drone.insitu<-vector("list",10)
for(i in 1:10){
  which.closest.drone.insitu[[i]]<-numeric(10)
  for(j in 1:10){
    which.closest.drone.insitu[[i]][j]<-which.min(spDistsN1(as.matrix(grid.xy.droneLocs[[i]]),as.numeric(grid.xy.insitu[[i]][j,])))
  }
}

which.closest.sat.insitu<-vector("list",10)
for(i in 1:10){
  which.closest.sat.insitu[[i]]<-numeric(10)
  for(j in 1:10){
    which.closest.sat.insitu[[i]][j]<-which.min(spDistsN1(as.matrix(grid.xy.sat),as.numeric(grid.xy.insitu[[i]][j,])))
  }
}

# NSD R package (version for 3 data sources):

library(NSD)

yData.model1<-simData.insitu.sd1[[1]];for(i in 2:10){yData.model1<-rbind.data.frame(yData.model1,simData.insitu.sd1[[i]])};yData.model1<-yData.model1[,month(dates.5years)%in%c(1,3,5,7,9,11)]
xData.model1<-simData.sat.sd1[which.closest.sat.insitu[[1]],];for(i in 2:10){xData.model1<-rbind.data.frame(xData.model1,simData.sat.sd1[which.closest.sat.insitu[[i]],])};xData.model1<-xData.model1[,month(dates.5years)%in%c(1:4,10:12)]
zData.model1<-simData.droneLocs.sd1[[1]][which.closest.drone.insitu[[1]],];for(i in 2:10){zData.model1<-rbind.data.frame(zData.model1,simData.droneLocs.sd1[[i]][which.closest.drone.insitu[[i]],])};zData.model1<-zData.model1[,month(dates.5years)%in%c(5,7,9)]
coords.yData<-grid.xy.insitu[[1]];for(i in 2:10){coords.yData<-rbind.data.frame(coords.yData,grid.xy.insitu[[i]])}

times.insitu<-dates.dec.5years[month(dates.5years)%in%c(1,3,5,7,9,11)]
times.sat<-dates.dec.5years[month(dates.5years)%in%c(1:4,10:12)]
times.drone<-dates.dec.5years[month(dates.5years)%in%c(5,7,9)]

# basis.5<-create.bspline.basis(rangeval = c(min(dates.dec.5years),
#                                            max(dates.dec.5years)),
#                               nbasis = 5)
# 
# eb.insitu.list<-vector("list",100)
# for(i in 1:100){
#   eb.insitu.list[[i]]<-eval.basis(times.insitu,basis.5)
# }
# 
# eb.sat.list<-vector("list",100)
# for(i in 1:100){
#   eb.sat.list[[i]]<-eval.basis(times.sat,basis.5)
# }
# 
# eb.drone.list<-vector("list",100)
# for(i in 1:100){
#   eb.drone.list[[i]]<-eval.basis(times.drone,basis.5)
# }
# 
# 
# 
# model1<-run.NSDmodelMulti2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                            yData=matrix.to.list(t(yData.model1))[-1],
#                            xData=matrix.to.list(t(xData.model1))[-1],
#                            zData=matrix.to.list(t(zData.model1))[-1],
#                            xPred=list(matrix.to.list(t(xData.model1))[[1]]),
#                            zPred=list(matrix.to.list(t(zData.model1))[[1]]),
#                            coordsData=as.matrix(coords.yData[-1,]),coordsPred=as.matrix(coords.yData[1,]),
#                            By=eb.insitu.list[-1],Bx=eb.sat.list[-1],Bz=eb.drone.list[-1],
#                            ByPred=eb.insitu.list[[1]],BxPred=list(eb.sat.list[[1]]),BzPred=list(eb.drone.list[[1]]),
#                            phiAlpha=0.01,phiBeta=0.01,phiGamma=0.01,
#                            aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aGamma=2,bGamma=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,aZ=2,bZ=1,
#                            muD=rep(0,5),SigmaD=100*diag(5),muE=rep(0,5),SigmaE=100*diag(5),
#                            sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaGammaPrecInit=1.2,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                            alphaInit=matrix(0.1,nrow=5,ncol=99),betaInit=matrix(0.2,nrow=5,ncol=99),gammaInit=matrix(0.3,nrow=5,ncol=99),
#                            cInit=matrix(0.4,nrow=5,ncol=99),
#                            sigmaXPrecInit=1.5,sigmaZPrecInit=1.6,
#                            dInit=matrix(0.5,nrow=5,ncol=99),eInit=matrix(0.6,nrow=5,ncol=99))
# summary.model1<-summary(model1)
# 
# tail(summary.model1$quantiles)
# 
# plot(summary.model1$quantiles[nrow(summary.model1$quantiles)-(29:0),3],matrix.to.list(t(yData.model1))[[1]]);abline(0,1)
# 
# #
# 
# basis.20<-create.bspline.basis(rangeval = c(min(dates.dec.5years),
#                                            max(dates.dec.5years)),
#                               nbasis = 20)
# 
# eb.insitu.list.20<-vector("list",100)
# for(i in 1:100){
#   eb.insitu.list.20[[i]]<-eval.basis(times.insitu,basis.20)
# }
# 
# eb.sat.list.20<-vector("list",100)
# for(i in 1:100){
#   eb.sat.list.20[[i]]<-eval.basis(times.sat,basis.20)
# }
# 
# eb.drone.list.20<-vector("list",100)
# for(i in 1:100){
#   eb.drone.list.20[[i]]<-eval.basis(times.drone,basis.20)
# }
# 
# 
# 
# model1.20<-run.NSDmodelMulti2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                            yData=matrix.to.list(t(yData.model1))[-1],
#                            xData=matrix.to.list(t(xData.model1))[-1],
#                            zData=matrix.to.list(t(zData.model1))[-1],
#                            xPred=list(matrix.to.list(t(xData.model1))[[1]]),
#                            zPred=list(matrix.to.list(t(zData.model1))[[1]]),
#                            coordsData=as.matrix(coords.yData[-1,]),coordsPred=as.matrix(coords.yData[1,]),
#                            By=eb.insitu.list.20[-1],Bx=eb.sat.list.20[-1],Bz=eb.drone.list.20[-1],
#                            ByPred=eb.insitu.list.20[[1]],BxPred=list(eb.sat.list.20[[1]]),BzPred=list(eb.drone.list.20[[1]]),
#                            phiAlpha=0.01,phiBeta=0.01,phiGamma=0.01,
#                            aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aGamma=2,bGamma=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,aZ=2,bZ=1,
#                            muD=rep(0,20),SigmaD=100*diag(20),muE=rep(0,20),SigmaE=100*diag(20),
#                            sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaGammaPrecInit=1.2,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                            alphaInit=matrix(0.1,nrow=20,ncol=99),betaInit=matrix(0.2,nrow=20,ncol=99),gammaInit=matrix(0.3,nrow=20,ncol=99),
#                            cInit=matrix(0.4,nrow=20,ncol=99),
#                            sigmaXPrecInit=1.5,sigmaZPrecInit=1.6,
#                            dInit=matrix(0.5,nrow=20,ncol=99),eInit=matrix(0.6,nrow=20,ncol=99))
# summary.model1.20<-summary(model1.20)
# 
# tail(summary.model1.20$quantiles)
# 
# plot(summary.model1.20$quantiles[nrow(summary.model1.20$quantiles)-(29:0),3],matrix.to.list(t(yData.model1))[[1]]);abline(0,1)
# 
# plot(matrix.to.list(t(yData.model1))[[1]]~times.insitu,type="o",ylim=c(min(summary.model1.20$quantiles[nrow(summary.model1.20$quantiles)-(29:0),1]),max(summary.model1.20$quantiles[nrow(summary.model1.20$quantiles)-(29:0),5])))
# points(summary.model1.20$quantiles[nrow(summary.model1.20$quantiles)-(29:0),3]~times.insitu,type="o",pch=16,col=2,lty=2)
# points(summary.model1.20$quantiles[nrow(summary.model1.20$quantiles)-(29:0),1]~times.insitu,type="l",col=2,lty=2)
# points(summary.model1.20$quantiles[nrow(summary.model1.20$quantiles)-(29:0),5]~times.insitu,type="l",col=2,lty=2)
# 
# points(matrix.to.list(t(xData.model1))[[1]]~times.sat,col=3)
# points(matrix.to.list(t(zData.model1))[[1]]~times.drone,col=4,pch=4)

# Find optimal value of basis dim:

# Just predicting at 10 left-out locations.

# set.seed(30)
# which.pred.locs<-sample(100,10)
which.pred.locs<-c(74,50,46,13,76,10,59,100,29,60)
plot(coords.yData)
points(coords.yData[which.pred.locs,],col=2,pch=16)

seq.bspline<-5:30
n.seq<-length(seq.bspline)
# mod1.basisdim<-vector("list",n.seq)
# summary.mod1.basisdim<-vector("list",n.seq)
# pred.mat.mod1.basisdim<-vector("list",n.seq)
# lwrbnd.mat.mod1.basisdim<-vector("list",n.seq)
# uprbnd.mat.mod1.basisdim<-vector("list",n.seq)
# print(paste0(0," of ",n.seq,"; time: ",Sys.time()))
# for(i in 1:n.seq){
#   basis.i<-create.bspline.basis(rangeval = c(min(dates.dec.5years),
#                                               max(dates.dec.5years)),
#                                  nbasis = seq.bspline[i])
#   eb.insitu.list.i<-vector("list",100)
#   for(j in 1:100){
#     eb.insitu.list.i[[j]]<-eval.basis(times.insitu,basis.i)
#   }
#   eb.sat.list.i<-vector("list",100)
#   for(j in 1:100){
#     eb.sat.list.i[[j]]<-eval.basis(times.sat,basis.i)
#   }
#   eb.drone.list.i<-vector("list",100)
#   for(j in 1:100){
#     eb.drone.list.i[[j]]<-eval.basis(times.drone,basis.i)
#   }
#   mod1.basisdim[[i]]<-run.NSDmodelMulti2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=matrix.to.list(t(yData.model1))[-which.pred.locs],
#                                          xData=matrix.to.list(t(xData.model1))[-which.pred.locs],
#                                          zData=matrix.to.list(t(zData.model1))[-which.pred.locs],
#                                          xPred=matrix.to.list(t(xData.model1))[which.pred.locs],
#                                          zPred=matrix.to.list(t(zData.model1))[which.pred.locs],
#                                          coordsData=as.matrix(coords.yData[-which.pred.locs,]),coordsPred=as.matrix(coords.yData[which.pred.locs,]),
#                                          By=eb.insitu.list.i[-which.pred.locs],Bx=eb.sat.list.i[-which.pred.locs],Bz=eb.drone.list.i[-which.pred.locs],
#                                          ByPred=eb.insitu.list.i[1][[1]],BxPred=eb.sat.list.i[which.pred.locs],BzPred=eb.drone.list.i[which.pred.locs],
#                                          phiAlpha=0.01,phiBeta=0.01,phiGamma=0.01,
#                                          aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aGamma=2,bGamma=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,aZ=2,bZ=1,
#                                          muD=rep(0,seq.bspline[i]),SigmaD=100*diag(seq.bspline[i]),muE=rep(0,seq.bspline[i]),SigmaE=100*diag(seq.bspline[i]),
#                                          sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaGammaPrecInit=1.2,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                                          alphaInit=matrix(0.1,nrow=seq.bspline[i],ncol=90),betaInit=matrix(0.2,nrow=seq.bspline[i],ncol=90),gammaInit=matrix(0.3,nrow=seq.bspline[i],ncol=90),
#                                          cInit=matrix(0.4,nrow=seq.bspline[i],ncol=90),
#                                          sigmaXPrecInit=1.5,sigmaZPrecInit=1.6,
#                                          dInit=matrix(0.5,nrow=seq.bspline[i],ncol=90),eInit=matrix(0.6,nrow=seq.bspline[i],ncol=90))
#   summary.mod1.basisdim[[i]]<-summary(mod1.basisdim[[i]])
#   pred.mat.mod1.basisdim[[i]]<-matrix(summary.mod1.basisdim[[i]]$quantiles[nrow(summary.mod1.basisdim[[i]]$quantiles)-(((10*30)-1):0),3],nrow=30,ncol=10)
#   lwrbnd.mat.mod1.basisdim[[i]]<-matrix(summary.mod1.basisdim[[i]]$quantiles[nrow(summary.mod1.basisdim[[i]]$quantiles)-(((10*30)-1):0),1],nrow=30,ncol=10)
#   uprbnd.mat.mod1.basisdim[[i]]<-matrix(summary.mod1.basisdim[[i]]$quantiles[nrow(summary.mod1.basisdim[[i]]$quantiles)-(((10*30)-1):0),5],nrow=30,ncol=10)
#   print(paste0(i," of ",n.seq,"; time: ",Sys.time()))
# }
# save(pred.mat.mod1.basisdim,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_basisdim.RData")
# save(lwrbnd.mat.mod1.basisdim,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_basisdim.RData")
# save(uprbnd.mat.mod1.basisdim,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_basisdim.RData")
# save(summary.mod1.basisdim,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_basisdim.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_basisdim.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_basisdim.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_basisdim.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_basisdim.RData")

rmse<-function(obs,pred){
  return(sqrt(mean((obs-pred)^2)))
}

rmse.vec.mod1.basisdim<-numeric(n.seq)
for(i in 1:n.seq){
  rmse.vec.mod1.basisdim[i]<-rmse(pred.mat.mod1.basisdim[[i]],t(yData.model1[which.pred.locs,]))
}
plot(rmse.vec.mod1.basisdim~seq.bspline,type="o")
seq.bspline[which.min(rmse.vec.mod1.basisdim)] # 17.

## phi selection:

basis.17<-create.bspline.basis(rangeval = c(min(dates.dec.5years),
                                           max(dates.dec.5years)),
                              nbasis = 17)
eb.insitu.list.17<-vector("list",100)
for(j in 1:100){
  eb.insitu.list.17[[j]]<-eval.basis(times.insitu,basis.17)
}
eb.sat.list.17<-vector("list",100)
for(j in 1:100){
  eb.sat.list.17[[j]]<-eval.basis(times.sat,basis.17)
}
eb.drone.list.17<-vector("list",100)
for(j in 1:100){
  eb.drone.list.17[[j]]<-eval.basis(times.drone,basis.17)
}

seq.phi<-c(0.001,0.01,0.1)
n.phi<-length(seq.phi)
# mod1.phisel<-vector("list",n.phi)
# summary.mod1.phisel<-vector("list",n.phi)
# pred.mat.mod1.phisel<-vector("list",n.phi)
# lwrbnd.mat.mod1.phisel<-vector("list",n.phi)
# uprbnd.mat.mod1.phisel<-vector("list",n.phi)
# print(paste0(0," of ",n.phi,"; time: ",Sys.time()))
# for(i in 1:n.phi){
#   mod1.phisel[[i]]<-vector("list",n.phi)
#   summary.mod1.phisel[[i]]<-vector("list",n.phi)
#   pred.mat.mod1.phisel[[i]]<-vector("list",n.phi)
#   lwrbnd.mat.mod1.phisel[[i]]<-vector("list",n.phi)
#   uprbnd.mat.mod1.phisel[[i]]<-vector("list",n.phi)
#   for(j in 1:n.phi){
#     mod1.phisel[[i]][[j]]<-vector("list",n.phi)
#     summary.mod1.phisel[[i]][[j]]<-vector("list",n.phi)
#     pred.mat.mod1.phisel[[i]][[j]]<-vector("list",n.phi)
#     lwrbnd.mat.mod1.phisel[[i]][[j]]<-vector("list",n.phi)
#     uprbnd.mat.mod1.phisel[[i]][[j]]<-vector("list",n.phi)
#     for(k in 1:n.phi){
#       mod1.phisel[[i]][[j]][[k]]<-run.NSDmodelMulti2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                            yData=matrix.to.list(t(yData.model1))[-which.pred.locs],
#                                            xData=matrix.to.list(t(xData.model1))[-which.pred.locs],
#                                            zData=matrix.to.list(t(zData.model1))[-which.pred.locs],
#                                            xPred=matrix.to.list(t(xData.model1))[which.pred.locs],
#                                            zPred=matrix.to.list(t(zData.model1))[which.pred.locs],
#                                            coordsData=as.matrix(coords.yData[-which.pred.locs,]),coordsPred=as.matrix(coords.yData[which.pred.locs,]),
#                                            By=eb.insitu.list.17[-which.pred.locs],Bx=eb.sat.list.17[-which.pred.locs],Bz=eb.drone.list.17[-which.pred.locs],
#                                            ByPred=eb.insitu.list.17[1][[1]],BxPred=eb.sat.list.17[which.pred.locs],BzPred=eb.drone.list.17[which.pred.locs],
#                                            phiAlpha=seq.phi[i],phiBeta=seq.phi[j],phiGamma=seq.phi[k],
#                                            aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aGamma=2,bGamma=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,aZ=2,bZ=1,
#                                            muD=rep(0,17),SigmaD=100*diag(17),muE=rep(0,17),SigmaE=100*diag(17),
#                                            sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaGammaPrecInit=1.2,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                                            alphaInit=matrix(0.1,nrow=17,ncol=90),betaInit=matrix(0.2,nrow=17,ncol=90),gammaInit=matrix(0.3,nrow=17,ncol=90),
#                                            cInit=matrix(0.4,nrow=17,ncol=90),
#                                            sigmaXPrecInit=1.5,sigmaZPrecInit=1.6,
#                                            dInit=matrix(0.5,nrow=17,ncol=90),eInit=matrix(0.6,nrow=17,ncol=90))
#       summary.mod1.phisel[[i]][[j]][[k]]<-summary(mod1.phisel[[i]][[j]][[k]])
#       pred.mat.mod1.phisel[[i]][[j]][[k]]<-matrix(summary.mod1.phisel[[i]][[j]][[k]]$quantiles[nrow(summary.mod1.phisel[[i]][[j]][[k]]$quantiles)-(((10*30)-1):0),3],nrow=30,ncol=10)
#       lwrbnd.mat.mod1.phisel[[i]][[j]][[k]]<-matrix(summary.mod1.phisel[[i]][[j]][[k]]$quantiles[nrow(summary.mod1.phisel[[i]][[j]][[k]]$quantiles)-(((10*30)-1):0),1],nrow=30,ncol=10)
#       uprbnd.mat.mod1.phisel[[i]][[j]][[k]]<-matrix(summary.mod1.phisel[[i]][[j]][[k]]$quantiles[nrow(summary.mod1.phisel[[i]][[j]][[k]]$quantiles)-(((10*30)-1):0),5],nrow=30,ncol=10)
#       print(paste0(i,", ",j,", ",k,": ",Sys.time()))
#     }
#   }
# }
# save(pred.mat.mod1.phisel,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_phisel.RData")
# save(lwrbnd.mat.mod1.phisel,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_phisel.RData")
# save(uprbnd.mat.mod1.phisel,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_phisel.RData")
# save(summary.mod1.phisel,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_phisel.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_phisel.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_phisel.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_phisel.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_phisel.RData")

rmse.arr.mod1.phisel<-array(dim=c(n.phi,n.phi,n.phi),dimnames = list(paste0("phiAlpha.",seq.phi),paste0("phiBeta.",seq.phi),paste0("phiGamma.",seq.phi)))
for(i in 1:n.phi){
  for(j in 1:n.phi){
    for(k in 1:n.phi){
      rmse.arr.mod1.phisel[i,j,k]<-rmse(pred.mat.mod1.phisel[[i]][[j]][[k]],t(yData.model1[which.pred.locs,]))
    }
  }
}
which(rmse.arr.mod1.phisel==min(rmse.arr.mod1.phisel),arr.ind = TRUE) # phiAlpha=0.001, phiBeta=0.001, phiGamma=0.01.

library(fields)
library(TeachingDemos)

par(mfrow=c(2,2))
breaks<-seq(min(rmse.arr.mod1.phisel),max(rmse.arr.mod1.phisel),length.out=101)
for(i in 1:n.phi){
  image.plot(rmse.arr.mod1.phisel[,,i],xaxt="n",yaxt="n",main=paste0("phiGamma = ",seq.phi[i]),col = rev(heat.colors(100)),legend.shrink = 1,legend.width = 1,xlab="phiAlpha",ylab="phiBeta",breaks = breaks)
  box()
  axis(side=1,at=seq(0,1,length.out=n.phi),labels = seq.phi)
  axis(side=2,at=seq(0,1,length.out=n.phi),labels = seq.phi)
  shadowtext(x=rep(seq(0,1,length.out=n.phi),n.phi),y=rep(seq(0,1,length.out=n.phi),each=n.phi),labels = round(as.numeric(rmse.arr.mod1.phisel[,,i]),3))
}
par(mfrow=c(1,1))

#

pred.mat.mod1.phisel[[1]][[1]][[2]]
par(mfrow=c(4,3))
for(i in 1:10){
  plot(pred.mat.mod1.phisel[[1]][[1]][[2]][,i]~times.insitu,type="o")
  points(t(yData.model1[which.pred.locs[i],])~times.insitu,type="o",col=2,pch=16,lty=2)
}
par(mfrow=c(1,1))

# Predictions over space given optimal parameter values:

# (Note that can only do this for locations with data for drone and satellite)

grid.xy.droneLocs.all<-grid.xy.droneLocs[[1]];for(i in 2:length(grid.xy.droneLocs)){grid.xy.droneLocs.all<-rbind.data.frame(grid.xy.droneLocs.all,grid.xy.droneLocs[[i]])}
simData.droneLocs.sd1.all<-simData.droneLocs.sd1[[1]];for(i in 2:length(grid.xy.droneLocs)){simData.droneLocs.sd1.all<-rbind.data.frame(simData.droneLocs.sd1.all,simData.droneLocs.sd1[[i]])}
which.closest.sat.pred<-numeric(nrow(grid.xy.droneLocs.all));for(i in 1:nrow(grid.xy.droneLocs.all)){
  which.closest.sat.pred[i]<-which.min(spDistsN1(as.matrix(grid.xy.sat),as.numeric(grid.xy.droneLocs.all[i,])))
}
set.seed(700)
sample.locs<-sample(nrow(grid.xy.droneLocs.all),1000)

xPred.model1<-simData.sat.sd1[which.closest.sat.pred,][sample.locs,month(dates.5years)%in%c(1:4,10:12)]
zPred.model1<-simData.droneLocs.sd1.all[sample.locs,month(dates.5years)%in%c(5,7,9)]
coords.yPred<-grid.xy.droneLocs.all[sample.locs,]

eb.pred.sat.list.17<-vector("list",1000)
for(j in 1:1000){
  eb.pred.sat.list.17[[j]]<-eval.basis(times.sat,basis.17)
}
eb.pred.drone.list.17<-vector("list",1000)
for(j in 1:1000){
  eb.pred.drone.list.17[[j]]<-eval.basis(times.drone,basis.17)
}

# mod1.spat<-run.NSDmodelMulti2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                    yData=matrix.to.list(t(yData.model1)),
#                    xData=matrix.to.list(t(xData.model1)),
#                    zData=matrix.to.list(t(zData.model1)),
#                    xPred=matrix.to.list(t(xPred.model1)),
#                    zPred=matrix.to.list(t(zPred.model1)),
#                    coordsData=as.matrix(coords.yData),coordsPred=as.matrix(coords.yPred),
#                    By=eb.insitu.list.17,Bx=eb.sat.list.17,Bz=eb.drone.list.17,
#                    ByPred=eb.insitu.list.17[1][[1]],BxPred=eb.pred.sat.list.17,BzPred=eb.pred.drone.list.17,
#                    phiAlpha=0.001,phiBeta=0.001,phiGamma=0.01,
#                    aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aGamma=2,bGamma=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,aZ=2,bZ=1,
#                    muD=rep(0,17),SigmaD=100*diag(17),muE=rep(0,17),SigmaE=100*diag(17),
#                    sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaGammaPrecInit=1.2,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                    alphaInit=matrix(0.1,nrow=17,ncol=100),betaInit=matrix(0.2,nrow=17,ncol=100),gammaInit=matrix(0.3,nrow=17,ncol=100),
#                    cInit=matrix(0.4,nrow=17,ncol=100),
#                    sigmaXPrecInit=1.5,sigmaZPrecInit=1.6,
#                    dInit=matrix(0.5,nrow=17,ncol=100),eInit=matrix(0.6,nrow=17,ncol=100))
# summary.mod1.spat<-summary(mod1.spat)
# pred.mat.mod1.spat<-matrix(summary.mod1.spat$quantiles[nrow(summary.mod1.spat$quantiles)-(((1000*30)-1):0),3],nrow=30,ncol=1000)
# lwrbnd.mat.mod1.spat<-matrix(summary.mod1.spat$quantiles[nrow(summary.mod1.spat$quantiles)-(((1000*30)-1):0),1],nrow=30,ncol=1000)
# uprbnd.mat.mod1.spat<-matrix(summary.mod1.spat$quantiles[nrow(summary.mod1.spat$quantiles)-(((1000*30)-1):0),5],nrow=30,ncol=1000)
# save(pred.mat.mod1.spat,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_spat.RData")
# save(lwrbnd.mat.mod1.spat,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_spat.RData")
# save(uprbnd.mat.mod1.spat,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_spat.RData")
# save(summary.mod1.spat,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_spat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_spat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_spat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_spat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_spat.RData")

# Took approx. 1 hour to run.

pred.mat.mod1.spat.sp<-cbind.data.frame(grid.xy.droneLocs.all[sample.locs,],t(pred.mat.mod1.spat))
colnames(pred.mat.mod1.spat.sp)<-c("x","y",paste0("date.",round(times.insitu,3)))
coordinates(pred.mat.mod1.spat.sp)<-c("x","y")
spplot(pred.mat.mod1.spat.sp,"date.2015.038",colorkey=TRUE)

# split into the ten drone regions to plot:

pred.mats.mod1.spat.sp<-vector("list",10)
for(i in 1:10){
  pred.mats.mod1.spat.sp[[i]]<-cbind.data.frame(grid.xy.droneLocs.all[sample.locs,],t(pred.mat.mod1.spat))[grid.xy.droneLocs.all[sample.locs,]$x%in%grid.xy.droneLocs[[i]]$x,]
  colnames(pred.mats.mod1.spat.sp[[i]])<-c("x","y",paste0("date.",round(times.insitu,3)))
  coordinates(pred.mats.mod1.spat.sp[[i]])<-c("x","y")
}
cuts.pred.mats.mod1.spat<-seq(from=min(pred.mat.mod1.spat),to=max(pred.mat.mod1.spat),length.out=100)
spplot(pred.mats.mod1.spat.sp[[1]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[2]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[3]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[4]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[5]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[6]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[7]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[8]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[9]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")
spplot(pred.mats.mod1.spat.sp[[10]],"date.2015.038",colorkey=TRUE,cuts=cuts.pred.mats.mod1.spat,scales=list(draw=TRUE),xlab="x",ylab="y")

# so, want predictions made for a single part of the river (1000 points), for two methods (just sat and sat+drone, for comparison).

which.closest.sat.pred2<-numeric(nrow(grid.xy.droneLocs[[3]]));for(i in 1:nrow(grid.xy.droneLocs[[3]])){
  which.closest.sat.pred2[i]<-which.min(spDistsN1(as.matrix(grid.xy.sat),as.numeric(grid.xy.droneLocs[[3]][i,])))
}
set.seed(701)
sample.locs2<-sample(nrow(grid.xy.droneLocs[[3]]),1000)

xPred2.model1<-simData.sat.sd1[which.closest.sat.pred2,][sample.locs2,month(dates.5years)%in%c(1:4,10:12)]
zPred2.model1<-simData.droneLocs.sd1[[3]][sample.locs2,month(dates.5years)%in%c(5,7,9)]
coords2.yPred<-grid.xy.droneLocs[[3]][sample.locs2,]

# mod1.spat2<-run.NSDmodelMulti2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                    yData=matrix.to.list(t(yData.model1)),
#                    xData=matrix.to.list(t(xData.model1)),
#                    zData=matrix.to.list(t(zData.model1)),
#                    xPred=matrix.to.list(t(xPred2.model1)),
#                    zPred=matrix.to.list(t(zPred2.model1)),
#                    coordsData=as.matrix(coords.yData),coordsPred=as.matrix(coords2.yPred),
#                    By=eb.insitu.list.17,Bx=eb.sat.list.17,Bz=eb.drone.list.17,
#                    ByPred=eb.insitu.list.17[1][[1]],BxPred=eb.pred.sat.list.17,BzPred=eb.pred.drone.list.17,
#                    phiAlpha=0.001,phiBeta=0.001,phiGamma=0.01,
#                    aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aGamma=2,bGamma=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,aZ=2,bZ=1,
#                    muD=rep(0,17),SigmaD=100*diag(17),muE=rep(0,17),SigmaE=100*diag(17),
#                    sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaGammaPrecInit=1.2,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                    alphaInit=matrix(0.1,nrow=17,ncol=100),betaInit=matrix(0.2,nrow=17,ncol=100),gammaInit=matrix(0.3,nrow=17,ncol=100),
#                    cInit=matrix(0.4,nrow=17,ncol=100),
#                    sigmaXPrecInit=1.5,sigmaZPrecInit=1.6,
#                    dInit=matrix(0.5,nrow=17,ncol=100),eInit=matrix(0.6,nrow=17,ncol=100))
# summary.mod1.spat2<-summary(mod1.spat2)
# pred.mat.mod1.spat2<-matrix(summary.mod1.spat2$quantiles[nrow(summary.mod1.spat2$quantiles)-(((1000*30)-1):0),3],nrow=30,ncol=1000)
# lwrbnd.mat.mod1.spat2<-matrix(summary.mod1.spat2$quantiles[nrow(summary.mod1.spat2$quantiles)-(((1000*30)-1):0),1],nrow=30,ncol=1000)
# uprbnd.mat.mod1.spat2<-matrix(summary.mod1.spat2$quantiles[nrow(summary.mod1.spat2$quantiles)-(((1000*30)-1):0),5],nrow=30,ncol=1000)
# save(pred.mat.mod1.spat2,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_spat2.RData")
# save(lwrbnd.mat.mod1.spat2,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_spat2.RData")
# save(uprbnd.mat.mod1.spat2,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_spat2.RData")
# save(summary.mod1.spat2,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_spat2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_spat2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_spat2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_spat2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_spat2.RData")

# Took approx. 1 hour to run.

pred.mat.mod1.spat2.sp<-cbind.data.frame(grid.xy.droneLocs[[3]][sample.locs2,],t(pred.mat.mod1.spat2))
colnames(pred.mat.mod1.spat2.sp)<-c("x","y",paste0("date.",round(times.insitu,3)))
coordinates(pred.mat.mod1.spat2.sp)<-c("x","y")
spplot(pred.mat.mod1.spat2.sp,"date.2015.038",colorkey=TRUE)

## Comparison: predictions from model fitted to just satellite data:

# Find optimal value of basis dim:

# Just predicting at 10 left-out locations.

# mod2.basisdim<-vector("list",n.seq)
# summary.mod2.basisdim<-vector("list",n.seq)
# pred.mat.mod2.basisdim<-vector("list",n.seq)
# lwrbnd.mat.mod2.basisdim<-vector("list",n.seq)
# uprbnd.mat.mod2.basisdim<-vector("list",n.seq)
# print(paste0(0," of ",n.seq,"; time: ",Sys.time()))
# for(i in 1:n.seq){
#   basis.i<-create.bspline.basis(rangeval = c(min(dates.dec.5years),
#                                               max(dates.dec.5years)),
#                                  nbasis = seq.bspline[i])
#   eb.insitu.list.i<-vector("list",100)
#   for(j in 1:100){
#     eb.insitu.list.i[[j]]<-eval.basis(times.insitu,basis.i)
#   }
#   eb.sat.list.i<-vector("list",100)
#   for(j in 1:100){
#     eb.sat.list.i[[j]]<-eval.basis(times.sat,basis.i)
#   }
#   # eb.drone.list.i<-vector("list",100)
#   # for(j in 1:100){
#   #   eb.drone.list.i[[j]]<-eval.basis(times.drone,basis.i)
#   # }
#   mod2.basisdim[[i]]<-run.NSDmodel2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                     yData=matrix.to.list(t(yData.model1))[-which.pred.locs],
#                                     xData=matrix.to.list(t(xData.model1))[-which.pred.locs],
#                                     xPred=matrix.to.list(t(xData.model1))[which.pred.locs],
#                                     coordsData=as.matrix(coords.yData[-which.pred.locs,]),coordsPred=as.matrix(coords.yData[which.pred.locs,]),
#                                     By=eb.insitu.list.i[-which.pred.locs],Bx=eb.sat.list.i[-which.pred.locs],
#                                     ByPred=eb.insitu.list.i[1][[1]],BxPred=eb.sat.list.i[which.pred.locs],
#                                     phiAlpha=0.01,phiBeta=0.01,
#                                     aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,
#                                     muD=rep(0,seq.bspline[i]),SigmaD=100*diag(seq.bspline[i]),
#                                     sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                                     alphaInit=matrix(0.1,nrow=seq.bspline[i],ncol=90),betaInit=matrix(0.2,nrow=seq.bspline[i],ncol=90),
#                                     cInit=matrix(0.4,nrow=seq.bspline[i],ncol=90),
#                                     sigmaXPrecInit=1.5,
#                                     dInit=matrix(0.5,nrow=seq.bspline[i],ncol=90))
#   summary.mod2.basisdim[[i]]<-summary(mod2.basisdim[[i]])
#   pred.mat.mod2.basisdim[[i]]<-matrix(summary.mod2.basisdim[[i]]$quantiles[nrow(summary.mod2.basisdim[[i]]$quantiles)-(((10*30)-1):0),3],nrow=30,ncol=10)
#   lwrbnd.mat.mod2.basisdim[[i]]<-matrix(summary.mod2.basisdim[[i]]$quantiles[nrow(summary.mod2.basisdim[[i]]$quantiles)-(((10*30)-1):0),1],nrow=30,ncol=10)
#   uprbnd.mat.mod2.basisdim[[i]]<-matrix(summary.mod2.basisdim[[i]]$quantiles[nrow(summary.mod2.basisdim[[i]]$quantiles)-(((10*30)-1):0),5],nrow=30,ncol=10)
#   print(paste0(i," of ",n.seq,"; time: ",Sys.time()))
# }
# save(pred.mat.mod2.basisdim,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_basisdim.RData")
# save(lwrbnd.mat.mod2.basisdim,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_basisdim.RData")
# save(uprbnd.mat.mod2.basisdim,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_basisdim.RData")
# save(summary.mod2.basisdim,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_basisdim.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_basisdim.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_basisdim.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_basisdim.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_basisdim.RData")

rmse<-function(obs,pred){
  return(sqrt(mean((obs-pred)^2)))
}

rmse.vec.mod2.basisdim<-numeric(n.seq)
for(i in 1:n.seq){
  rmse.vec.mod2.basisdim[i]<-rmse(pred.mat.mod2.basisdim[[i]],t(yData.model1[which.pred.locs,]))
}
plot(rmse.vec.mod2.basisdim~seq.bspline,type="o")
seq.bspline[which.min(rmse.vec.mod2.basisdim)] # 20.

## phi selection:

basis.20<-create.bspline.basis(rangeval = c(min(dates.dec.5years),
                                            max(dates.dec.5years)),
                               nbasis = 20)
eb.insitu.list.20<-vector("list",100)
for(j in 1:100){
  eb.insitu.list.20[[j]]<-eval.basis(times.insitu,basis.20)
}
eb.sat.list.20<-vector("list",100)
for(j in 1:100){
  eb.sat.list.20[[j]]<-eval.basis(times.sat,basis.20)
}
eb.drone.list.20<-vector("list",100)
for(j in 1:100){
  eb.drone.list.20[[j]]<-eval.basis(times.drone,basis.20)
}

# mod2.phisel<-vector("list",n.phi)
# summary.mod2.phisel<-vector("list",n.phi)
# pred.mat.mod2.phisel<-vector("list",n.phi)
# lwrbnd.mat.mod2.phisel<-vector("list",n.phi)
# uprbnd.mat.mod2.phisel<-vector("list",n.phi)
# print(paste0(0," of ",n.phi,"; time: ",Sys.time()))
# for(i in 1:n.phi){
#   mod2.phisel[[i]]<-vector("list",n.phi)
#   summary.mod2.phisel[[i]]<-vector("list",n.phi)
#   pred.mat.mod2.phisel[[i]]<-vector("list",n.phi)
#   lwrbnd.mat.mod2.phisel[[i]]<-vector("list",n.phi)
#   uprbnd.mat.mod2.phisel[[i]]<-vector("list",n.phi)
#   for(j in 1:n.phi){
#     mod2.phisel[[i]][[j]]<-run.NSDmodel2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                                          yData=matrix.to.list(t(yData.model1))[-which.pred.locs],
#                                          xData=matrix.to.list(t(xData.model1))[-which.pred.locs],
#                                          xPred=matrix.to.list(t(xData.model1))[which.pred.locs],
#                                          coordsData=as.matrix(coords.yData[-which.pred.locs,]),coordsPred=as.matrix(coords.yData[which.pred.locs,]),
#                                          By=eb.insitu.list.20[-which.pred.locs],Bx=eb.sat.list.20[-which.pred.locs],
#                                          ByPred=eb.insitu.list.20[1][[1]],BxPred=eb.sat.list.20[which.pred.locs],
#                                          phiAlpha=seq.phi[i],phiBeta=seq.phi[j],
#                                          aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,
#                                          muD=rep(0,20),SigmaD=100*diag(20),
#                                          sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                                          alphaInit=matrix(0.1,nrow=20,ncol=90),betaInit=matrix(0.2,nrow=20,ncol=90),
#                                          cInit=matrix(0.4,nrow=20,ncol=90),
#                                          sigmaXPrecInit=1.5,
#                                          dInit=matrix(0.5,nrow=20,ncol=90))
#     summary.mod2.phisel[[i]][[j]]<-summary(mod2.phisel[[i]][[j]])
#     pred.mat.mod2.phisel[[i]][[j]]<-matrix(summary.mod2.phisel[[i]][[j]]$quantiles[nrow(summary.mod2.phisel[[i]][[j]]$quantiles)-(((10*30)-1):0),3],nrow=30,ncol=10)
#     lwrbnd.mat.mod2.phisel[[i]][[j]]<-matrix(summary.mod2.phisel[[i]][[j]]$quantiles[nrow(summary.mod2.phisel[[i]][[j]]$quantiles)-(((10*30)-1):0),1],nrow=30,ncol=10)
#     uprbnd.mat.mod2.phisel[[i]][[j]]<-matrix(summary.mod2.phisel[[i]][[j]]$quantiles[nrow(summary.mod2.phisel[[i]][[j]]$quantiles)-(((10*30)-1):0),5],nrow=30,ncol=10)
#     print(paste0(i,", ",j,": ",Sys.time()))
#   }
# }
# save(pred.mat.mod2.phisel,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_phisel.RData")
# save(lwrbnd.mat.mod2.phisel,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_phisel.RData")
# save(uprbnd.mat.mod2.phisel,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_phisel.RData")
# save(summary.mod2.phisel,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_phisel.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_phisel.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_phisel.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_phisel.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_phisel.RData")

rmse.arr.mod2.phisel<-array(dim=c(n.phi,n.phi),dimnames = list(paste0("phiAlpha.",seq.phi),paste0("phiBeta.",seq.phi)))
for(i in 1:n.phi){
  for(j in 1:n.phi){
    rmse.arr.mod2.phisel[i,j]<-rmse(pred.mat.mod2.phisel[[i]][[j]],t(yData.model1[which.pred.locs,]))
  }
}
which(rmse.arr.mod2.phisel==min(rmse.arr.mod2.phisel),arr.ind = TRUE) # phiAlpha=0.001, phiBeta=0.001.

eb.pred.sat.list.20<-vector("list",1000)
for(j in 1:1000){
  eb.pred.sat.list.20[[j]]<-eval.basis(times.sat,basis.20)
}
eb.pred.drone.list.20<-vector("list",1000)
for(j in 1:1000){
  eb.pred.drone.list.20[[j]]<-eval.basis(times.drone,basis.20)
}

# mod2.spat<-run.NSDmodel2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                    yData=matrix.to.list(t(yData.model1)),
#                    xData=matrix.to.list(t(xData.model1)),
#                    xPred=matrix.to.list(t(xPred.model1)),
#                    coordsData=as.matrix(coords.yData),coordsPred=as.matrix(coords.yPred),
#                    By=eb.insitu.list.20,Bx=eb.sat.list.20,
#                    ByPred=eb.insitu.list.20[1][[1]],BxPred=eb.pred.sat.list.20,
#                    phiAlpha=0.001,phiBeta=0.001,
#                    aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,
#                    muD=rep(0,20),SigmaD=100*diag(20),
#                    sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                    alphaInit=matrix(0.1,nrow=20,ncol=100),betaInit=matrix(0.2,nrow=20,ncol=100),
#                    cInit=matrix(0.4,nrow=20,ncol=100),
#                    sigmaXPrecInit=1.5,
#                    dInit=matrix(0.5,nrow=20,ncol=100))
# summary.mod2.spat<-summary(mod2.spat)
# pred.mat.mod2.spat<-matrix(summary.mod2.spat$quantiles[nrow(summary.mod2.spat$quantiles)-(((1000*30)-1):0),3],nrow=30,ncol=1000)
# lwrbnd.mat.mod2.spat<-matrix(summary.mod2.spat$quantiles[nrow(summary.mod2.spat$quantiles)-(((1000*30)-1):0),1],nrow=30,ncol=1000)
# uprbnd.mat.mod2.spat<-matrix(summary.mod2.spat$quantiles[nrow(summary.mod2.spat$quantiles)-(((1000*30)-1):0),5],nrow=30,ncol=1000)
# save(pred.mat.mod2.spat,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_spat.RData")
# save(lwrbnd.mat.mod2.spat,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_spat.RData")
# save(uprbnd.mat.mod2.spat,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_spat.RData")
# save(summary.mod2.spat,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_spat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_spat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_spat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_spat.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_spat.RData")

# Took approx. 40 mins. to run.

pred.mat.mod2.spat.sp<-cbind.data.frame(grid.xy.droneLocs.all[sample.locs,],t(pred.mat.mod2.spat))
colnames(pred.mat.mod2.spat.sp)<-c("x","y",paste0("date.",round(times.insitu,3)))
coordinates(pred.mat.mod2.spat.sp)<-c("x","y")
spplot(pred.mat.mod2.spat.sp,"date.2015.038",colorkey=TRUE)

# mod2.spat2<-run.NSDmodel2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                    yData=matrix.to.list(t(yData.model1)),
#                    xData=matrix.to.list(t(xData.model1)),
#                    xPred=matrix.to.list(t(xPred2.model1)),
#                    coordsData=as.matrix(coords.yData),coordsPred=as.matrix(coords2.yPred),
#                    By=eb.insitu.list.20,Bx=eb.sat.list.20,
#                    ByPred=eb.insitu.list.20[1][[1]],BxPred=eb.pred.sat.list.20,
#                    phiAlpha=0.001,phiBeta=0.001,
#                    aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,
#                    muD=rep(0,20),SigmaD=100*diag(20),
#                    sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                    alphaInit=matrix(0.1,nrow=20,ncol=100),betaInit=matrix(0.2,nrow=20,ncol=100),
#                    cInit=matrix(0.4,nrow=20,ncol=100),
#                    sigmaXPrecInit=1.5,
#                    dInit=matrix(0.5,nrow=20,ncol=100))
# summary.mod2.spat2<-summary(mod2.spat2)
# pred.mat.mod2.spat2<-matrix(summary.mod2.spat2$quantiles[nrow(summary.mod2.spat2$quantiles)-(((1000*30)-1):0),3],nrow=30,ncol=1000)
# lwrbnd.mat.mod2.spat2<-matrix(summary.mod2.spat2$quantiles[nrow(summary.mod2.spat2$quantiles)-(((1000*30)-1):0),1],nrow=30,ncol=1000)
# uprbnd.mat.mod2.spat2<-matrix(summary.mod2.spat2$quantiles[nrow(summary.mod2.spat2$quantiles)-(((1000*30)-1):0),5],nrow=30,ncol=1000)
# save(pred.mat.mod2.spat2,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_spat2.RData")
# save(lwrbnd.mat.mod2.spat2,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_spat2.RData")
# save(uprbnd.mat.mod2.spat2,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_spat2.RData")
# save(summary.mod2.spat2,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_spat2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_spat2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_spat2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_spat2.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_spat2.RData")

# Took approx. 40 mins. to run.

pred.mat.mod2.spat2.sp<-cbind.data.frame(grid.xy.droneLocs[[3]][sample.locs2,],t(pred.mat.mod2.spat2))
colnames(pred.mat.mod2.spat2.sp)<-c("x","y",paste0("date.",round(times.insitu,3)))
coordinates(pred.mat.mod2.spat2.sp)<-c("x","y")
spplot(pred.mat.mod2.spat2.sp,"date.2015.038",colorkey=TRUE)

## Plots for CNC21 slides:

# Data:

cuts.data<-seq(from=min(c(CNC21.true.sp@data$date.2015.038,CNC21.drone.sp@data$date.2015.038,CNC21.sat.sp@data$date.2015.038,CNC21.insitu.sp@data$date.2015.038)),
               to=max(c(CNC21.true.sp@data$date.2015.038,CNC21.drone.sp@data$date.2015.038,CNC21.sat.sp@data$date.2015.038,CNC21.insitu.sp@data$date.2015.038)),
               length.out=100)

CNC21.true.sp<-cbind.data.frame(grid.xy[grid.xy$x>13000&grid.xy$x<13200,],simData.true[grid.xy$x>13000&grid.xy$x<13200,])
colnames(CNC21.true.sp)<-c("x","y",paste0("date.",round(dates.dec.5years,3)))
coordinates(CNC21.true.sp)<-c("x","y")
dp1<-spplot(CNC21.true.sp,"date.2015.038",colorkey=TRUE,pch=15,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data,main="Initial simulated surface")

CNC21.sat.sp<-cbind.data.frame(grid.xy.sat[grid.xy.sat$x>13000&grid.xy.sat$x<13200,],simData.sat.sd1[grid.xy.sat$x>13000&grid.xy.sat$x<13200,])
colnames(CNC21.sat.sp)<-c("x","y",paste0("date.",round(dates.dec.5years,3)))
coordinates(CNC21.sat.sp)<-c("x","y")
dp2<-spplot(CNC21.sat.sp,"date.2015.038",colorkey=TRUE,pch=15,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data,main="Simulated satellite data")

CNC21.drone.sp<-cbind.data.frame(grid.xy.droneLocs[[3]],simData.droneLocs.sd1[[3]])
colnames(CNC21.drone.sp)<-c("x","y",paste0("date.",round(dates.dec.5years,3)))
coordinates(CNC21.drone.sp)<-c("x","y")
dp3<-spplot(CNC21.drone.sp,"date.2015.038",colorkey=TRUE,pch=15,cex=0.75,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data,main="Simulated drone data")

CNC21.insitu.sp<-cbind.data.frame(grid.xy.insitu[[3]],simData.insitu.sd1[[3]])
colnames(CNC21.insitu.sp)<-c("x","y",paste0("date.",round(dates.dec.5years,3)))
coordinates(CNC21.insitu.sp)<-c("x","y")
dp4<-spplot(CNC21.insitu.sp,"date.2015.038",colorkey=TRUE,pch=16,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data,main="Simulated in situ data")

print(dp1,position=c(0,0.75,1,1),more=TRUE)
print(dp2,position=c(0,0.5,1,0.75),more=TRUE)
print(dp3,position=c(0,0.25,1,0.5),more=TRUE)
print(dp4,position=c(0,0,1,0.25),more=FALSE)
# save as C:\Users\craig\OneDrive - University of Glasgow\Conferences\CNC21\data_spat_CNC21.png at 400 by 550 pixels.

# Predictions:

cuts.pred<-seq(from=min(c(CNC21.true.sp@data$date.2015.038,pred.mat.mod1.spat2.sp@data$date.2015.038,pred.mat.mod2.spat2.sp@data$date.2015.038)),
               to=max(c(CNC21.true.sp@data$date.2015.038,pred.mat.mod1.spat2.sp@data$date.2015.038,pred.mat.mod2.spat2.sp@data$date.2015.038)),
               length.out=100)
dp1a<-spplot(CNC21.true.sp,"date.2015.038",colorkey=TRUE,pch=15,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.pred,main="Initial simulated surface")
pp1<-spplot(pred.mat.mod2.spat2.sp,"date.2015.038",colorkey=TRUE,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.pred,main="Model (1) predictions",pch=16)
pp2<-spplot(pred.mat.mod1.spat2.sp,"date.2015.038",colorkey=TRUE,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.pred,main="Model (2) predictions",pch=16)
print(dp1a,position=c(0,0.66,1,0.99),more=TRUE)
print(pp1,position=c(0,0.33,1,0.66),more=TRUE)
print(pp2,position=c(0,0,1,0.33),more=FALSE)

# save as C:\Users\craig\OneDrive - University of Glasgow\Conferences\CNC21\pred_spat_CNC21.png at 400 by 420 pixels.

# SEs:

se.mat.mod2.spat2<-matrix(summary.mod2.spat2$statistics[nrow(summary.mod2.spat2$quantiles)-(((1000*30)-1):0),4],nrow=30,ncol=1000)
se.mat.mod2.spat2.sp<-cbind.data.frame(grid.xy.droneLocs[[3]][sample.locs2,],t(se.mat.mod2.spat2))
colnames(se.mat.mod2.spat2.sp)<-c("x","y",paste0("date.",round(times.insitu,3)))
coordinates(se.mat.mod2.spat2.sp)<-c("x","y")
sep1<-spplot(se.mat.mod2.spat2.sp,"date.2015.038",colorkey=TRUE,main="SEs for Model (1)")

se.mat.mod1.spat2<-matrix(summary.mod1.spat2$statistics[nrow(summary.mod1.spat2$quantiles)-(((1000*30)-1):0),4],nrow=30,ncol=1000)
se.mat.mod1.spat2.sp<-cbind.data.frame(grid.xy.droneLocs[[3]][sample.locs2,],t(se.mat.mod1.spat2))
colnames(se.mat.mod1.spat2.sp)<-c("x","y",paste0("date.",round(times.insitu,3)))
coordinates(se.mat.mod1.spat2.sp)<-c("x","y")
sep2<-spplot(se.mat.mod1.spat2.sp,"date.2015.038",colorkey=TRUE,main="SEs for Model (2)")

print(sep1,position=c(0,0.5,1,1),more=TRUE)
print(sep2,position=c(0,0,1,0.5),more=FALSE)
# save as C:\Users\craig\OneDrive - University of Glasgow\Conferences\CNC21\SE_spat_CNC21.png at 400 by 280 pixels.

# Over time:

dists1<-spDistsN1(pts=as.matrix(grid.xy),pt=as.numeric(grid.xy.insitu[[3]][1,]))
which.closest.predCNC21.1<-which(dists1==min(dists1))

par(mar=c(4,4.5,1,0.5))
plot(simData2.insitu.sd1[[3]][1,]~times.insitu,type="o",ylim=c(min(c(simData2.insitu.sd1[[3]][1,],t(simData2.droneLocs.sd1[[3]][which.closest.drone.insitu[[3]][1],]),simData2.sat.sd1[which.closest.sat.insitu[[3]][1],])),
                                                               max(c(simData2.insitu.sd1[[3]][1,],t(simData2.droneLocs.sd1[[3]][which.closest.drone.insitu[[3]][1],]),simData2.sat.sd1[which.closest.sat.insitu[[3]][1],]))),
     xlab="Year",ylab="Value",pch=16,bty="n")
points(t(simData2.droneLocs.sd1[[3]][which.closest.drone.insitu[[3]][1],])~times.drone,type="o",pch=15,col="orange")
points(simData2.sat.sd1[which.closest.sat.insitu[[3]][1],]~times.sat,type="o",pch=17,col=2)
points(simData.true[which.closest.predCNC21.1,]~dates.dec.5years,type="l",col="grey")
legend("topright",legend = c("Initial data","In situ","Drone","Satellite"),pch=c(NA,16,15,17),col=c("grey","black","orange",2),bty="n",lty=c(1,NA,NA,NA))
# save as C:\Users\craig\OneDrive - University of Glasgow\Conferences\CNC21\data_temp_CNC21.png at 665 by 450 pixels.

# Predictions over time:

# plot(pred.mat.mod1.spat2[,1]~times.insitu,type="o",ylim=c(min(lwrbnd.mat.mod1.spat2[,1]),max(uprbnd.mat.mod1.spat2[,1])))
plot(pred.mat.mod1.spat2[,1]~times.insitu,type="o",ylim=c(-5,11),xlab="Year",ylab="Value",bty="n",pch=16)
lines(lwrbnd.mat.mod1.spat2[,1]~times.insitu,type="l")
lines(uprbnd.mat.mod1.spat2[,1]~times.insitu,type="l")

lines(pred.mat.mod2.spat2[,1]~times.insitu,type="o",col=2,pch=15,lty=2)
lines(lwrbnd.mat.mod2.spat2[,1]~times.insitu,type="l",col=2,lty=2)
lines(uprbnd.mat.mod2.spat2[,1]~times.insitu,type="l",col=2,lty=2)

legend("topright",legend=c("Model (1)","Model (2)"),pch=c(15,16),lty=c(2,1),col=c(2,1))
# save as C:\Users\craig\OneDrive - University of Glasgow\Conferences\CNC21\pred_temp_CNC21.png at 665 by 450 pixels.

## To generate plots for EGU21: predictions over regular grid: #######################################################################

grid.pred.EGU21.x<-seq(from=13000,to=13200,length.out=65);grid.pred.EGU21.x<-(grid.pred.EGU21.x+0.5*(grid.pred.EGU21.x[2]-grid.pred.EGU21.x[1]))[-length(grid.pred.EGU21.x)]
grid.pred.EGU21.y<-seq(from=0,to=50,length.out=17);grid.pred.EGU21.y<-(grid.pred.EGU21.y+0.5*(grid.pred.EGU21.y[2]-grid.pred.EGU21.y[1]))[-length(grid.pred.EGU21.y)]
grid.pred.EGU21.xy<-expand.grid(x=grid.pred.EGU21.x,y=grid.pred.EGU21.y)
plot(grid.pred.EGU21.xy)

which.closest.sat.pred3<-numeric(nrow(grid.pred.EGU21.xy));for(i in 1:nrow(grid.pred.EGU21.xy)){
  which.closest.sat.pred3[i]<-which.min(spDistsN1(as.matrix(grid.xy.sat),as.numeric(grid.pred.EGU21.xy[i,])))
}
which.closest.drone.pred3<-numeric(nrow(grid.pred.EGU21.xy));for(i in 1:nrow(grid.pred.EGU21.xy)){
  which.closest.drone.pred3[i]<-which.min(spDistsN1(as.matrix(grid.xy.droneLocs[[3]]),as.numeric(grid.pred.EGU21.xy[i,])))
}

xPred3.model1<-simData.sat.sd1[which.closest.sat.pred3,month(dates.5years)%in%c(1:4,10:12)]
zPred3.model1<-simData.droneLocs.sd1[[3]][which.closest.drone.pred3,month(dates.5years)%in%c(5,7,9)]
coords3.yPred<-grid.pred.EGU21.xy

eb2.pred.sat.list.17<-vector("list",1024)
for(j in 1:1024){
  eb2.pred.sat.list.17[[j]]<-eval.basis(times.sat,basis.17)
}
eb2.pred.drone.list.17<-vector("list",1024)
for(j in 1:1024){
  eb2.pred.drone.list.17[[j]]<-eval.basis(times.drone,basis.17)
}

# mod1.spat3<-run.NSDmodelMulti2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                    yData=matrix.to.list(t(yData.model1)),
#                    xData=matrix.to.list(t(xData.model1)),
#                    zData=matrix.to.list(t(zData.model1)),
#                    xPred=matrix.to.list(t(xPred3.model1)),
#                    zPred=matrix.to.list(t(zPred3.model1)),
#                    coordsData=as.matrix(coords.yData),coordsPred=as.matrix(coords3.yPred),
#                    By=eb.insitu.list.17,Bx=eb.sat.list.17,Bz=eb.drone.list.17,
#                    ByPred=eb.insitu.list.17[1][[1]],BxPred=eb2.pred.sat.list.17,BzPred=eb2.pred.drone.list.17,
#                    phiAlpha=0.001,phiBeta=0.001,phiGamma=0.01,
#                    aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aGamma=2,bGamma=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,aZ=2,bZ=1,
#                    muD=rep(0,17),SigmaD=100*diag(17),muE=rep(0,17),SigmaE=100*diag(17),
#                    sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaGammaPrecInit=1.2,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                    alphaInit=matrix(0.1,nrow=17,ncol=100),betaInit=matrix(0.2,nrow=17,ncol=100),gammaInit=matrix(0.3,nrow=17,ncol=100),
#                    cInit=matrix(0.4,nrow=17,ncol=100),
#                    sigmaXPrecInit=1.5,sigmaZPrecInit=1.6,
#                    dInit=matrix(0.5,nrow=17,ncol=100),eInit=matrix(0.6,nrow=17,ncol=100))
# summary.mod1.spat3<-summary(mod1.spat3)
# pred.mat.mod1.spat3<-matrix(summary.mod1.spat3$quantiles[nrow(summary.mod1.spat3$quantiles)-(((1024*30)-1):0),3],nrow=30,ncol=1024)
# lwrbnd.mat.mod1.spat3<-matrix(summary.mod1.spat3$quantiles[nrow(summary.mod1.spat3$quantiles)-(((1024*30)-1):0),1],nrow=30,ncol=1024)
# uprbnd.mat.mod1.spat3<-matrix(summary.mod1.spat3$quantiles[nrow(summary.mod1.spat3$quantiles)-(((1024*30)-1):0),5],nrow=30,ncol=1024)
# save(pred.mat.mod1.spat3,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_spat3.RData")
# save(lwrbnd.mat.mod1.spat3,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_spat3.RData")
# save(uprbnd.mat.mod1.spat3,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_spat3.RData")
# save(summary.mod1.spat3,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_spat3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod1_spat3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod1_spat3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod1_spat3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod1_spat3.RData")

pred.mat.mod1.spat3.sp<-cbind.data.frame(grid.pred.EGU21.xy,t(pred.mat.mod1.spat3))
colnames(pred.mat.mod1.spat3.sp)<-c("x","y",paste0("time.",round(times.insitu,3)))
coordinates(pred.mat.mod1.spat3.sp)<-c("x","y")

spplot(pred.mat.mod1.spat3.sp,"time.2015.038",colorkey=TRUE,pch=15)

#

eb2.pred.sat.list.20<-vector("list",1024)
for(j in 1:1024){
  eb2.pred.sat.list.20[[j]]<-eval.basis(times.sat,basis.20)
}

# mod2.spat3<-run.NSDmodel2(nIter=10000,nBurnIn=100,nChains=2,nThin=10,
#                    yData=matrix.to.list(t(yData.model1)),
#                    xData=matrix.to.list(t(xData.model1)),
#                    xPred=matrix.to.list(t(xPred3.model1)),
#                    coordsData=as.matrix(coords.yData),coordsPred=as.matrix(coords3.yPred),
#                    By=eb.insitu.list.20,Bx=eb.sat.list.20,
#                    ByPred=eb.insitu.list.20[1][[1]],BxPred=eb2.pred.sat.list.20,
#                    phiAlpha=0.001,phiBeta=0.001,
#                    aAlpha=2,bAlpha=1,aBeta=2,bBeta=1,aY=2,bY=1,aC=2,bC=1,aX=2,bX=1,
#                    muD=rep(0,20),SigmaD=100*diag(20),
#                    sigmaAlphaPrecInit=1,sigmaBetaPrecInit=1.1,sigmaYPrecInit=1.3,sigmaCPrecInit=1.4,
#                    alphaInit=matrix(0.1,nrow=20,ncol=100),betaInit=matrix(0.2,nrow=20,ncol=100),
#                    cInit=matrix(0.4,nrow=20,ncol=100),
#                    sigmaXPrecInit=1.5,
#                    dInit=matrix(0.5,nrow=20,ncol=100))
# summary.mod2.spat3<-summary(mod2.spat3)
# pred.mat.mod2.spat3<-matrix(summary.mod2.spat3$quantiles[nrow(summary.mod2.spat3$quantiles)-(((1024*30)-1):0),3],nrow=30,ncol=1024)
# lwrbnd.mat.mod2.spat3<-matrix(summary.mod2.spat3$quantiles[nrow(summary.mod2.spat3$quantiles)-(((1024*30)-1):0),1],nrow=30,ncol=1024)
# uprbnd.mat.mod2.spat3<-matrix(summary.mod2.spat3$quantiles[nrow(summary.mod2.spat3$quantiles)-(((1024*30)-1):0),5],nrow=30,ncol=1024)
# save(pred.mat.mod2.spat3,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_spat3.RData")
# save(lwrbnd.mat.mod2.spat3,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_spat3.RData")
# save(uprbnd.mat.mod2.spat3,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_spat3.RData")
# save(summary.mod2.spat3,file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_spat3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/pred_mat_mod2_spat3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/lwrbnd_mat_mod2_spat3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/uprbnd_mat_mod2_spat3.RData")
load(file="C:/Users/craig/OneDrive - University of Glasgow/MDrive_partial_March2020/Ramganga/analysis/data_sim_June2020/output_modelling_3_data_types_1/summary_mod2_spat3.RData")

pred.mat.mod2.spat3.sp<-cbind.data.frame(grid.pred.EGU21.xy,t(pred.mat.mod2.spat3))
colnames(pred.mat.mod2.spat3.sp)<-c("x","y",paste0("time.",round(times.insitu,3)))
coordinates(pred.mat.mod2.spat3.sp)<-c("x","y")

spplot(pred.mat.mod2.spat3.sp,"time.2015.038",colorkey=TRUE,pch=15)

se.mat.mod2.spat3<-matrix(summary.mod2.spat3$statistics[nrow(summary.mod2.spat3$statistics)-(((1024*30)-1):0),4],nrow=30,ncol=1024)
se.mat.mod2.spat3.sp<-cbind.data.frame(grid.pred.EGU21.xy,t(se.mat.mod2.spat3))
colnames(se.mat.mod2.spat3.sp)<-c("x","y",paste0("time.",round(times.insitu,3)))
coordinates(se.mat.mod2.spat3.sp)<-c("x","y")
spplot(se.mat.mod2.spat3.sp,"time.2015.038",colorkey=TRUE,pch=15)

# Plots:

cuts.data.EGU21<-seq(from=min(c(CNC21.true.sp@data$date.2015.038,CNC21.drone.sp@data$date.2015.038,CNC21.sat.sp@data$date.2015.038,CNC21.insitu.sp@data$date.2015.038,pred.mat.mod2.spat3.sp@data$time.2015.038)),
               to=max(c(CNC21.true.sp@data$date.2015.038,CNC21.drone.sp@data$date.2015.038,CNC21.sat.sp@data$date.2015.038,CNC21.insitu.sp@data$date.2015.038,pred.mat.mod2.spat3.sp@data$time.2015.038)),
               length.out=100)

library(viridis)

EGU21.true.sp<-cbind.data.frame(grid.xy[grid.xy$x>13000&grid.xy$x<13200,],simData.true[grid.xy$x>13000&grid.xy$x<13200,])
colnames(EGU21.true.sp)<-c("x","y",paste0("date.",round(dates.dec.5years,3)))
coordinates(EGU21.true.sp)<-c("x","y")
dp1.EGU21<-spplot(EGU21.true.sp,"date.2015.038",colorkey=TRUE,pch=15,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data.EGU21,main="Initial simulated surface",col.regions=viridis(100))

EGU21.sat.sp<-cbind.data.frame(grid.xy.sat[grid.xy.sat$x>13000&grid.xy.sat$x<13200,],simData.sat.sd1[grid.xy.sat$x>13000&grid.xy.sat$x<13200,])
colnames(EGU21.sat.sp)<-c("x","y",paste0("date.",round(dates.dec.5years,3)))
coordinates(EGU21.sat.sp)<-c("x","y")
dp2.EGU21<-spplot(EGU21.sat.sp,"date.2015.038",colorkey=TRUE,pch=15,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data.EGU21,main="Simulated satellite data",col.regions=viridis(100))

EGU21.drone.sp<-cbind.data.frame(grid.xy.droneLocs[[3]],simData.droneLocs.sd1[[3]])
colnames(EGU21.drone.sp)<-c("x","y",paste0("date.",round(dates.dec.5years,3)))
coordinates(EGU21.drone.sp)<-c("x","y")
dp3.EGU21<-spplot(EGU21.drone.sp,"date.2015.038",colorkey=TRUE,pch=15,cex=0.75,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data.EGU21,main="Simulated drone data",col.regions=viridis(100))

EGU21.insitu.sp<-cbind.data.frame(grid.xy.insitu[[3]],simData.insitu.sd1[[3]])
colnames(EGU21.insitu.sp)<-c("x","y",paste0("date.",round(dates.dec.5years,3)))
coordinates(EGU21.insitu.sp)<-c("x","y")
dp4.EGU21<-spplot(EGU21.insitu.sp,"date.2015.038",colorkey=TRUE,pch=16,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data.EGU21,main="Simulated in situ data",col.regions=viridis(100))

dp5.EGU21<-spplot(pred.mat.mod2.spat3.sp,"time.2015.038",colorkey=TRUE,pch=15,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data.EGU21,main="Predictions",col.regions=viridis(100))
dp5a.EGU21<-spplot(pred.mat.mod1.spat3.sp,"time.2015.038",colorkey=TRUE,pch=15,cex=2,xlim=c(13000,13200),ylim=c(0,50),cuts=cuts.data.EGU21,main="Predictions",col.regions=viridis(100))

dp6.EGU21<-spplot(se.mat.mod2.spat3.sp,"time.2015.038",colorkey=TRUE,pch=15,cex=2,xlim=c(13000,13200),ylim=c(0,50),main="SE",col.regions=rev(heat.colors(100)))

print(dp2.EGU21,position=c(0,0.75,1,1),more=TRUE)
print(dp4.EGU21,position=c(0,0.5,1,0.75),more=TRUE)
print(dp5.EGU21,position=c(0,0.25,1,0.5),more=TRUE)
print(dp6.EGU21,position=c(0,0,1,0.25),more=FALSE)
# save as C:\Users\craig\OneDrive - University of Glasgow\Conferences\EGU21\data_spat_EGU21.png at 400 by 550 pixels.

# Plots over time:

pol1<-cbind.data.frame(x=c(times.insitu,rev(times.insitu)),y=c(lwrbnd.mat.mod2.spat2[,1],rev(uprbnd.mat.mod2.spat2[,1])))

plot(t(yData.model1[1,])~times.insitu,type="n",ylim=c(-3,11),xlab="Year",ylab="Value",bty="n")
polygon(pol1,col="slategray1",border = NA)
lines(lwrbnd.mat.mod2.spat2[,1]~times.insitu,type="l",col="dodgerblue",lty=2)
lines(uprbnd.mat.mod2.spat2[,1]~times.insitu,type="l",col="dodgerblue",lty=2)
lines(pred.mat.mod2.spat2[,1]~times.insitu,type="o",col="dodgerblue",pch=16,lty=2)
lines(t(yData.model1[1,])~times.insitu,col="grey50")
legend("topright",legend=c("In situ data","Predictions","95% CI bounds"),col=c("grey50","dodgerblue","dodgerblue"),pch=c(NA,16,NA),lty=c(1,2,2),bty="n")
# save as C:\Users\craig\OneDrive - University of Glasgow\Conferences\EGU21\pred_temp_EGU21.png at 665 by 350 pixels.




